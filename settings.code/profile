[{
    // Polling interval (in seconds) for automatically refreshing the tree when your repository is updated. Set to '0' to disable.
    "todo-tree.general.automaticGitRefreshInterval": 0,
  
    // Create a debug channel in the Output view.
    "todo-tree.general.debug": false,
  
    // Path to use when exporting the tree. Environment variables will be expanded, e.g `${HOME}` and the path is passed through strftime (see <https://github.com/samsonjs/strftime>). Set the extension to `.json` to export as a JSON record.
    "todo-tree.general.exportPath": "~/todo-tree-%Y%m%d-%H%M.txt",
  
    // Periodic refresh interval (in minutes) for automatically refreshing the tree. Set to '0' to disable.
    "todo-tree.general.periodicRefreshInterval": 0,
  
    // Sets where the cursor is positioned when revealing a todo.
    //  - start of line: Moves the cursor to the start of the line
    //  - start of todo: Moves the cursor to the beginning of the todo
    //  - end of todo: Moves the cursor to the end of the todo
    //  - leave focus in tree: Leave the focus in the tree view
    "todo-tree.general.revealBehaviour": "start of todo",
  
    // Folder in which to run the search (defaults to the workspace folder).
    "todo-tree.general.rootFolder": "",
  
    // Editor schemes to find TODOs in. To find TODOs in settings files, for instance, add `vscode-userdata` or for output windows, add `output`.
    "todo-tree.general.schemes": [
      "file",
      "ssh",
      "untitled",
      "vscode-notebook-cell"
    ],
  
    // Show a badge in the activity bar indicating the total number of TODOs
    "todo-tree.general.showActivityBarBadge": false,
  
    // Show icons instead of tags in the status bar
    "todo-tree.general.showIconsInsteadOfTagsInStatusBar": false,
  
    // What to show in the status bar - nothing, total count, counts per tag, top three counts per tag or count of tags in the current file.
    //  - none: Only show the scanning status in the status bar
    //  - total: Show the total count of tags in the status bar
    //  - tags: Show a breakdown of the count of each tag in the status bar
    //  - top three: Show the count of the top three tags in the status bar
    //  - current file: Show the count of tags in the current file in the status bar
    "todo-tree.general.statusBar": "none",
  
    // What to do when the status bar is clicked.
    //  - cycle: Toggle between showing total count and the top three tag counts
    //  - reveal: Reveal the tree view
    //  - toggle highlights: Toggle highlighting
    "todo-tree.general.statusBarClickBehaviour": "reveal",
  
    // Allows similar tags to be grouped under the same type, e.g. `{ "FIX": ["FIXME","FIXIT"] }`. *Note: All tags must also be in the `todo-tree.general.tags` tag list. If a tag group is defined, custom highlights apply to the group, not the tags within the group.*
    "todo-tree.general.tagGroups": {},
  
    // List of tags. *Note, if one tag starts with another tag, the longer tag should be specified first to prevent the shorter tag being matched.*
    "todo-tree.general.tags": [
      "BUG",
      "HACK",
      "FIXME",
      "TODO",
      "XXX",
      "[ ]",
      "[x]"
    ]
  
  },
  {
    // If this setting is false, no telemetry will be sent regardless of the new setting's value. Deprecated due to being combined into the `telemetry.telemetryLevel` setting.
    // Enable crash reports to be collected. This helps us improve stability. 
    // This option requires restart to take effect.
    "telemetry.enableCrashReporter": true,
  
    // If this setting is false, no telemetry will be sent regardless of the new setting's value. Deprecated in favor of the `telemetry.telemetryLevel` setting.
    // Enable diagnostic data to be collected. This helps us to better understand how Windsurf is performing and where improvements need to be made.
    "telemetry.enableTelemetry": true,
  
    // 
    // Controls Windsurf telemetry, first-party extension telemetry, and participating third-party extension telemetry. Some third party extensions might not respect this setting. Consult the specific extension's documentation to be sure. Telemetry helps us better understand how Windsurf is performing, where improvements need to be made, and how features are being used. Read more about the [data we collect](https://aka.ms/vscode-telemetry). A full restart of the application is necessary for crash reporting changes to take effect.
    // 
    // &nbsp;
    // 
    // The following table outlines the data sent with each setting:
    // 
    // |       | Crash Reports | Error Telemetry | Usage Data |
    // |:------|:---------------------:|:---------------:|:--------------:|
    // | all   |            ✓          |        ✓        |        ✓       |
    // | error |            ✓          |        ✓        |        -       |
    // | crash |            ✓          |        -        |        -       |
    // | off   |            -          |        -        |        -       |
    // 
    // 
    // &nbsp;
    // 
    // ****Note:*** If this setting is 'off', no telemetry will be sent regardless of other telemetry settings. If this setting is set to anything except 'off' and telemetry is disabled with deprecated settings, no telemetry will be sent.*
    // 
    //  - all: Sends usage data, errors, and crash reports.
    //  - error: Sends general error telemetry and crash reports.
    //  - crash: Sends OS level crash reports.
    //  - off: Disables all product telemetry.
    "telemetry.telemetryLevel": "all"
  
  },
  {
    // A list of colours which is applied to tag highlights in the same order as the tags. Repeats if necessary and is overridden by `todo-tree.highlights.customHighlight`.
    "todo-tree.highlights.backgroundColourScheme": [
      "red",
      "orange",
      "yellow",
      "green",
      "blue",
      "indigo",
      "violet"
    ],
  
    // Custom configuration for highlighting, [Read more...](https://github.com/Gruntfuggly/todo-tree#highlighting).
    "todo-tree.highlights.customHighlight": {
      "BUG": {
        "icon": "bug"
      },
      "HACK": {
        "icon": "tools"
      },
      "FIXME": {
        "icon": "flame"
      },
      "XXX": {
        "icon": "x"
      },
      "[ ]": {
        "icon": "issue-draft"
      },
      "[x]": {
        "icon": "issue-closed"
      }
    },
  
    // Default configuration for highlighting. [Read more...](https://github.com/Gruntfuggly/todo-tree#highlighting).
    "todo-tree.highlights.defaultHighlight": {},
  
    // Set to false to disable highlighting.
    "todo-tree.highlights.enabled": true,
  
    // A list of colours which is applied to tag highlights in the same order as the tags. Repeats if necessary and is overridden by `todo-tree.highlights.customHighlight`.
    "todo-tree.highlights.foregroundColourScheme": [
      "white",
      "black",
      "black",
      "white",
      "white",
      "white",
      "black"
    ],
  
    // Delay before highlighting tags within files (milliseconds).
    "todo-tree.highlights.highlightDelay": 500,
  
    // Use a colour scheme to colour the tags. This scheme is applied to the tags in the order of tags. The colours can be modified using `todo-tree.highlights.foregroundColourScheme` and `todo-tree.highlights.backgroundColourScheme`. The colour scheme overrides colours in the default highlight, but not the custom highlight.
    "todo-tree.highlights.useColourScheme": false
  
  },
  {
    // An array of workspace names to exclude as roots in the tree (wildcards can be used).
    "todo-tree.filtering.excludedWorkspaces": [],
  
    // Globs for use in limiting search results by exclusion (applied after **includeGlobs**), e.g. `["**/*.txt"]` to ignore all .txt files.
    "todo-tree.filtering.excludeGlobs": [
      "**/node_modules/*/**"
    ],
  
    // If true, any subfolders containing a .git file will be ignored when searching.
    "todo-tree.filtering.ignoreGitSubmodules": false,
  
    // An array of workspace names to include as roots in the tree (wildcards can be used). An empty array includes all workspace folders.
    "todo-tree.filtering.includedWorkspaces": [],
  
    // Globs for use in limiting search results by inclusion, e.g. `["**/unit-tests/*.js"]` to only show .js files in unit-tests subfolders.
    "todo-tree.filtering.includeGlobs": [],
  
    // Include hidden files (starting with a .).
    "todo-tree.filtering.includeHiddenFiles": false,
  
    // By default the globs are passed into ripgrep to narrow the search. Set this to false to apply the globs *after* the search (pre 0.0.132 behaviour).
    "todo-tree.filtering.passGlobsToRipgrep": true,
  
    // Scopes (sets of globs) that can be switched between
    "todo-tree.filtering.scopes": [],
  
    // Add VSCode's `files.exclude` and/or `search.exclude` list to the ignored paths.
    //  - none: Don't used any built in excludes
    //  - file excludes: Use the Files:Exclude setting
    //  - search excludes: Use the Search:Exclude setting
    //  - file and search excludes: Use the Files:Exclude and the Search:Exclude setting
    "todo-tree.filtering.useBuiltInExcludes": "none"
  
  },
  {
    // Refresh the tree when files are opened or saved.
    "todo-tree.tree.autoRefresh": true,
  
    // Prevent the tree from showing compact folders.
    "todo-tree.tree.disableCompactFolders": false,
  
    // When opening new workspaces, show the tree initially fully expanded.
    "todo-tree.tree.expanded": false,
  
    // Set to true if you want the view filtering to be case sensitive.
    "todo-tree.tree.filterCaseSensitive": false,
  
    // When opening new workspaces, show the tree initially as flat list of files.
    "todo-tree.tree.flat": false,
  
    // When opening new workspaces, show the tree initially grouped by sub tag.
    "todo-tree.tree.groupedBySubTag": false,
  
    // When opening new workspaces, show the tree initially grouped by tag.
    "todo-tree.tree.groupedByTag": false,
  
    // Save some space by hiding the item icons when grouped by tag.
    "todo-tree.tree.hideIconsWhenGroupedByTag": false,
  
    // Hide the view if it is empty.
    "todo-tree.tree.hideTreeWhenEmpty": false,
  
    // Format for tree items.
    "todo-tree.tree.labelFormat": "${tag} ${after}",
  
    // Normally the tree is built as soon as the window is opened. If you have a large code base and want to manually start the scan, set this to false.
    "todo-tree.tree.scanAtStartup": true,
  
    // Set this to change which files are scanned.
    //  - workspace: Scan the whole workspace (or workspaces) and open file
    //  - open files: Scan open files only
    //  - current file: Scan the current file only
    //  - workspace only: Scan the workspace but don't refresh files open in the editor
    "todo-tree.tree.scanMode": "workspace",
  
    // Show badges and SCM state in the tree view.
    "todo-tree.tree.showBadges": true,
  
    // Show counts of TODOs in the tree.
    "todo-tree.tree.showCountsInTree": false,
  
    // Show the current scan mode at the top of the tree view
    "todo-tree.tree.showCurrentScanMode": true,
  
    // This setting is no longer used. Please drag the view to move it.
    // 
    "todo-tree.tree.showInExplorer": false,
  
    // This setting is no longer used, please use "todo-tree.tree.scanMode" instead.
    // 
    "todo-tree.tree.showScanOpenFilesOrWorkspaceButton": false,
  
    // This setting is no longer used, please use "todo-tree.tree.scanMode" instead.
    // 
    "todo-tree.tree.showTagsFromOpenFilesOnly": false,
  
    // ripgrep searches using multiple threads to improve performance. The tree is sorted when it is populated so that it stays stable. If you want to use ripgrep's own sort arguments, set this to false.
    "todo-tree.tree.sort": true,
  
    // Sort items in the tags only view alphabetically instead of by file and line number.
    "todo-tree.tree.sortTagsOnlyViewAlphabetically": false,
  
    // The URL to open when clicking on a sub tag in the tree. Can include placeholders as defined in `todo-tree.tree.labelFormat`.
    "todo-tree.tree.subTagClickUrl": "",
  
    // When opening new workspaces, show only tag elements in tree.
    "todo-tree.tree.tagsOnly": false,
  
    // Tree item tooltip format.
    "todo-tree.tree.tooltipFormat": "${filepath}, line ${line}",
  
    // Track the current file in the tree view.
    "todo-tree.tree.trackFile": true
  
  },
  {
    // Show a button in the tree view title bar to expand or collapse the whole tree.
    "todo-tree.tree.buttons.expand": true,
  
    // Show a button in the tree view title bar to create a file showing the tree content.
    "todo-tree.tree.buttons.export": false,
  
    // Show a button in the tree view title bar allowing the tree to be filtered by entering some text.
    "todo-tree.tree.buttons.filter": true,
  
    // Show a button in the tree view title bar to enable grouping items by sub tag.
    "todo-tree.tree.buttons.groupBySubTag": false,
  
    // Show a button in the tree view title bar to enable grouping items by tag.
    "todo-tree.tree.buttons.groupByTag": true,
  
    // Show a refresh button in the tree view title bar.
    "todo-tree.tree.buttons.refresh": true,
  
    // Show a button in the tree view title bar to reveal the current item (only when track file is not enabled).
    "todo-tree.tree.buttons.reveal": true,
  
    // Show a button in the tree view title bar to change the Scan Mode setting.
    "todo-tree.tree.buttons.scanMode": false,
  
    // Show a button in the tree view title bar to change the view style (tree, flat or tags only).
    "todo-tree.tree.buttons.viewStyle": true
  
  },
  {
    // Controls whether the editor shows CodeLens.
    "diffEditor.codeLens": false,
  
    // 
    //  - legacy: Uses the legacy diffing algorithm.
    //  - advanced: Uses the advanced diffing algorithm.
    "diffEditor.diffAlgorithm": "advanced",
  
    // Controls whether the diff editor shows empty decorations to see where characters got inserted or deleted.
    "diffEditor.experimental.showEmptyDecorations": true,
  
    // Controls whether the diff editor should show detected code moves.
    "diffEditor.experimental.showMoves": false,
  
    // If enabled and the editor uses the inline view, word changes are rendered inline.
    "diffEditor.experimental.useTrueInlineView": false,
  
    // Controls how many lines are used as context when comparing unchanged regions.
    "diffEditor.hideUnchangedRegions.contextLineCount": 3,
  
    // Controls whether the diff editor shows unchanged regions.
    "diffEditor.hideUnchangedRegions.enabled": false,
  
    // Controls how many lines are used as a minimum for unchanged regions.
    "diffEditor.hideUnchangedRegions.minimumLineCount": 3,
  
    // Controls how many lines are used for unchanged regions.
    "diffEditor.hideUnchangedRegions.revealLineCount": 20,
  
    // When enabled, the diff editor ignores changes in leading or trailing whitespace.
    "diffEditor.ignoreTrimWhitespace": true,
  
    // Timeout in milliseconds after which diff computation is cancelled. Use 0 for no timeout.
    "diffEditor.maxComputationTime": 5000,
  
    // Maximum file size in MB for which to compute diffs. Use 0 for no limit.
    "diffEditor.maxFileSize": 50,
  
    // When enabled, the diff editor shows a special gutter for revert and stage actions.
    "diffEditor.renderGutterMenu": true,
  
    // Controls whether the diff editor shows +/- indicators for added/removed changes.
    "diffEditor.renderIndicators": true,
  
    // When enabled, the diff editor shows arrows in its glyph margin to revert changes.
    "diffEditor.renderMarginRevertIcon": true,
  
    // Controls whether the diff editor shows the diff side by side or inline.
    "diffEditor.renderSideBySide": true,
  
    // If the diff editor width is smaller than this value, the inline view is used.
    "diffEditor.renderSideBySideInlineBreakpoint": 900,
  
    // If enabled and the editor width is too small, the inline view is used.
    "diffEditor.useInlineViewWhenSpaceIsLimited": true,
  
    // 
    //  - off: Lines will never wrap.
    //  - on: Lines will wrap at the viewport width.
    //  - inherit: Lines will wrap according to the `editor.wordWrap` setting.
    "diffEditor.wordWrap": "inherit",
  
    // Controls whether suggestions should be accepted on commit characters. For example, in JavaScript, the semi-colon (`;`) can be a commit character that accepts a suggestion and types that character.
    "editor.acceptSuggestionOnCommitCharacter": true,
  
    // Controls whether suggestions should be accepted on `Enter`, in addition to `Tab`. Helps to avoid ambiguity between inserting new lines or accepting suggestions.
    //  - on
    //  - smart: Only accept a suggestion with `Enter` when it makes a textual change.
    //  - off
    "editor.acceptSuggestionOnEnter": "on",
  
    // Controls the number of lines in the editor that can be read out by a screen reader at once. When we detect a screen reader we automatically set the default to be 500. Warning: this has a performance implication for numbers larger than the default.
    "editor.accessibilityPageSize": 500,
  
    // Controls if the UI should run in a mode where it is optimized for screen readers.
    //  - auto: Use platform APIs to detect when a Screen Reader is attached.
    //  - on: Optimize for usage with a Screen Reader.
    //  - off: Assume a screen reader is not attached.
    "editor.accessibilitySupport": "auto",
  
    // Controls whether the editor should automatically close brackets after the user adds an opening bracket.
    //  - always
    //  - languageDefined: Use language configurations to determine when to autoclose brackets.
    //  - beforeWhitespace: Autoclose brackets only when the cursor is to the left of whitespace.
    //  - never
    "editor.autoClosingBrackets": "languageDefined",
  
    // Controls whether the editor should automatically close comments after the user adds an opening comment.
    //  - always
    //  - languageDefined: Use language configurations to determine when to autoclose comments.
    //  - beforeWhitespace: Autoclose comments only when the cursor is to the left of whitespace.
    //  - never
    "editor.autoClosingComments": "languageDefined",
  
    // Controls whether the editor should remove adjacent closing quotes or brackets when deleting.
    //  - always
    //  - auto: Remove adjacent closing quotes or brackets only if they were automatically inserted.
    //  - never
    "editor.autoClosingDelete": "auto",
  
    // Controls whether the editor should type over closing quotes or brackets.
    //  - always
    //  - auto: Type over closing quotes or brackets only if they were automatically inserted.
    //  - never
    "editor.autoClosingOvertype": "auto",
  
    // Controls whether the editor should automatically close quotes after the user adds an opening quote.
    //  - always
    //  - languageDefined: Use language configurations to determine when to autoclose quotes.
    //  - beforeWhitespace: Autoclose quotes only when the cursor is to the left of whitespace.
    //  - never
    "editor.autoClosingQuotes": "languageDefined",
  
    // Controls whether the editor should automatically adjust the indentation when users type, paste, move or indent lines.
    //  - none: The editor will not insert indentation automatically.
    //  - keep: The editor will keep the current line's indentation.
    //  - brackets: The editor will keep the current line's indentation and honor language defined brackets.
    //  - advanced: The editor will keep the current line's indentation, honor language defined brackets and invoke special onEnterRules defined by languages.
    //  - full: The editor will keep the current line's indentation, honor language defined brackets, invoke special onEnterRules defined by languages, and honor indentationRules defined by languages.
    "editor.autoIndent": "full",
  
    // Controls whether the editor should automatically surround selections when typing quotes or brackets.
    //  - languageDefined: Use language configurations to determine when to automatically surround selections.
    //  - quotes: Surround with quotes but not brackets.
    //  - brackets: Surround with brackets but not quotes.
    //  - never
    "editor.autoSurround": "languageDefined",
  
    // Controls whether bracket pair colorization is enabled or not. Use `workbench.colorCustomizations` to override the bracket highlight colors.
    "editor.bracketPairColorization.enabled": true,
  
    // Controls whether each bracket type has its own independent color pool.
    "editor.bracketPairColorization.independentColorPoolPerBracketType": false,
  
    // Enable triggering `editor.codeActionsOnSave#` when `#files.autoSave` is set to `afterDelay`. Code Actions must be set to `always` to be triggered for window and focus changes.
    "editor.codeActions.triggerOnFocusChange": false,
  
    // Run Code Actions for the editor on save. Code Actions must be specified and the editor must not be shutting down. When `files.autoSave` is set to `afterDelay`, Code Actions will only be run when the file is saved explicitly. Example: `"source.organizeImports": "explicit" `
    "editor.codeActionsOnSave": {},
  
    // Enable/disable showing nearest Quick Fix within a line when not currently on a diagnostic.
    "editor.codeActionWidget.includeNearbyQuickFixes": true,
  
    // Enable/disable showing group headers in the Code Action menu.
    "editor.codeActionWidget.showHeaders": true,
  
    // Controls whether the editor shows CodeLens.
    "editor.codeLens": true,
  
    // Controls the font family for CodeLens.
    "editor.codeLensFontFamily": "",
  
    // Controls the font size in pixels for CodeLens. When set to 0, 90% of `editor.fontSize` is used.
    "editor.codeLensFontSize": 0,
  
    // Controls whether the editor should render the inline color decorators and color picker.
    "editor.colorDecorators": true,
  
    // Controls the condition to make a color picker appear from a color decorator.
    //  - clickAndHover: Make the color picker appear both on click and hover of the color decorator
    //  - hover: Make the color picker appear on hover of the color decorator
    //  - click: Make the color picker appear on click of the color decorator
    "editor.colorDecoratorsActivatedOn": "clickAndHover",
  
    // Controls the max number of color decorators that can be rendered in an editor at once.
    "editor.colorDecoratorsLimit": 500,
  
    // Enable that the selection with the mouse and keys is doing column selection.
    "editor.columnSelection": false,
  
    // Controls if empty lines should be ignored with toggle, add or remove actions for line comments.
    "editor.comments.ignoreEmptyLines": true,
  
    // Controls whether a space character is inserted when commenting.
    "editor.comments.insertSpace": true,
  
    // Controls whether syntax highlighting should be copied into the clipboard.
    "editor.copyWithSyntaxHighlighting": true,
  
    // Control the cursor animation style.
    "editor.cursorBlinking": "blink",
  
    // Controls whether the smooth caret animation should be enabled.
    //  - off: Smooth caret animation is disabled.
    //  - explicit: Smooth caret animation is enabled only when the user moves the cursor with an explicit gesture.
    //  - on: Smooth caret animation is always enabled.
    "editor.cursorSmoothCaretAnimation": "off",
  
    // Controls the cursor style in insert input mode.
    "editor.cursorStyle": "line",
  
    // Controls the minimal number of visible leading lines (minimum 0) and trailing lines (minimum 1) surrounding the cursor. Known as 'scrollOff' or 'scrollOffset' in some other editors.
    "editor.cursorSurroundingLines": 0,
  
    // Controls when `editor.cursorSurroundingLines` should be enforced.
    //  - default: `cursorSurroundingLines` is enforced only when triggered via the keyboard or API.
    //  - all: `cursorSurroundingLines` is enforced always.
    "editor.cursorSurroundingLinesStyle": "default",
  
    // Controls the width of the cursor when `editor.cursorStyle` is set to `line`.
    "editor.cursorWidth": 0,
  
    // Controls whether inline color decorations should be shown using the default document color provider.
    //  - auto: Show default color decorators only when no extension provides colors decorators.
    //  - always: Always show default color decorators.
    //  - never: Never show default color decorators.
    "editor.defaultColorDecorators": "auto",
  
    // Defines a default folding range provider that takes precedence over all other folding range providers. Must be the identifier of an extension contributing a folding range provider.
    //  - null: All active folding range providers
    //  - Posit.air-vscode: R formatter and language server
    //  - ms-python.black-formatter: Formatting support for Python files using the Black formatter.
    //  - saoudrizwan.claude-dev: Autonomous coding agent right in your IDE, capable of creating/editing files, running commands, using the browser, and more with your permission every step of the way.
    //  - coddx.coddx-alpha: Coddx - a collection of tools that help developers program efficiently. Some useful features like: Kanban Board to manage project tasks in TODO.md, generating multiple files from templates quickly.
    //  - formulahendry.code-runner: Run C, C++, Java, JS, PHP, Python, Perl, Ruby, Go, Lua, Groovy, PowerShell, CMD, BASH, F#, C#, VBScript, TypeScript, CoffeeScript, Scala, Swift, Julia, Crystal, OCaml, R, AppleScript, Elixir, VB.NET, Clojure, Haxe, Obj-C, Rust, Racket, Scheme, AutoHotkey, AutoIt, Kotlin, Dart, Pascal, Haskell, Nim, D, Lisp, Kit, V, SCSS, Sass, CUDA, Less, Fortran, Ring, Standard ML, Zig, Mojo, Erlang, SPWN, Pkl, Gleam
    //  - ms-vscode.cpptools: C/C++ IntelliSense, debugging, and code browsing.
    //  - vscode.css-language-features: Provides rich language support for CSS, LESS and SCSS files.
    //  - tamasfe.even-better-toml: Fully-featured TOML support
    //  - ms-python.gather: Adds gather functionality in the Python language to the Jupyter Extension
    //  - codezombiech.gitignore: Lets you pull .gitignore templates from the https://github.com/github/gitignore repository. Language support for .gitignore files.
    //  - vscode.html-language-features: Provides rich language support for HTML and Handlebar files
    //  - ms-python.isort: Import Organization support for Python files using `isort`.
    //  - redhat.java: Java Linting, Intellisense, formatting, refactoring, Maven/Gradle support and more...
    //  - vscode.json-language-features: Provides rich language support for JSON files.
    //  - yzhang.markdown-all-in-one: All you need to write Markdown (keyboard shortcuts, table of contents, auto preview and more)
    //  - zaaack.markdown-editor: A full-featured WYSIWYG editor for markdown.
    //  - vscode.markdown-language-features: Provides rich language support for Markdown.
    //  - vscode.markdown-math: Adds math support to Markdown in notebooks.
    //  - jithurjacob.nbpreviewer: An easy to use extension for previewing Jupyter Notebooks within VS Code
    //  - tomoki1207.pdf: Display pdf file in VSCode.
    //  - vscode.php-language-features: Provides rich language support for PHP files.
    //  - ms-vscode.powershell: Develop PowerShell modules, commands and scripts in Visual Studio Code!
    //  - ms-python.pylint: Linting support for Python files using Pylint.
    //  - ms-python.python: Python language support with extension access points for IntelliSense (Pylance), Debugging (Python Debugger), linting, formatting, refactoring, unit tests, and more.
    //  - donjayamanne.python-environment-manager: View and manage Python environments & packages.
    //  - REditorSupport.r: R Extension for Visual Studio Code
    //  - mechatroner.rainbow-csv: Highlight CSV and TSV files, Run SQL-like queries
    //  - ms-vscode-remote.remote-ssh-edit: Edit SSH configuration files
    //  - RooVeterinaryInc.roo-cline: A whole dev team of AI agents in your editor.
    //  - charliermarsh.ruff: A Visual Studio Code extension with support for the Ruff linter and formatter.
    //  - vscode.typescript-language-features: Provides rich language support for JavaScript and TypeScript.
    //  - KevinRose.vsc-python-indent: Correct Python indentation
    //  - RandomFractalsInc.vscode-data-preview: Data Preview 🈸 extension for importing 📤 viewing 🔎 slicing 🔪 dicing 🎲 charting 📊 & exporting 📥 large JSON array/config, YAML, Apache Arrow, Avro, Parquet & Excel data files
    //  - batisteo.vscode-django: Beautiful syntax and scoped snippets for perfectionists with deadlines
    //  - ms-azuretools.vscode-docker: Makes it easy to create, manage, and debug containerized applications.
    //  - vscjava.vscode-gradle: Manage Gradle Projects, run Gradle tasks and provide better Gradle file authoring experience in VS Code
    //  - vscjava.vscode-java-debug: A lightweight Java debugger for Visual Studio Code
    //  - vscjava.vscode-java-pack: Popular extensions for Java development that provides Java IntelliSense, debugging, testing, Maven/Gradle support, project management and more
    //  - vscjava.vscode-maven: Manage Maven projects, execute goals, generate project from archetype, improve user experience for Java developers.
    //  - franneck94.vscode-python-config: Creates config files for modern Python projects
    //  - njqdev.vscode-python-typehint: Type hint completion for Python.
    //  - vmware.vscode-spring-boot: Provides validation and content assist for Spring Boot `application.properties`, `application.yml` properties files. As well as Boot-specific support for `.java` files.
    //  - redhat.vscode-xml: XML Language Support by Red Hat
    //  - redhat.vscode-yaml: YAML Language Support by Red Hat, with built-in Kubernetes syntax support
    //  - Codeium.windsurfPyright: A language server for Python in Windsurf
    //  - DotJoshJohnson.xml: XML Formatting, XQuery, and XPath Tools for Visual Studio Code
    //  - almenon.arepl: real-time python scratchpad
    //  - dzhavat.bracket-pair-toggler: Quickly toggle 'Bracket Pair Colorization' setting with a simple command
    //  - vscode.configuration-editing: Provides capabilities (advanced IntelliSense, auto-fixing) in configuration files like settings, launch, and extension recommendation files.
    //  - phplasma.csv-to-table: Convert a CSV/TSV/PSV file to an ASCII formatted table
    //  - vscode.debug-auto-launch: Helper for auto-attach feature when node-debug extensions are not active.
    //  - vscode.debug-server-ready: Open URI in browser if server under debugging is ready.
    //  - ms-python.debugpy: Python Debugger extension using debugpy.
    //  - adamraichu.docx-viewer: An extension which provides a read-only renderer for docx files using the npm package docx-preview. Now with configuration!
    //  - vscode.emmet: Emmet support for Windsurf
    //  - vscode.extension-editing: Provides linting capabilities for authoring extensions.
    //  - atsyplenkov.formalist: Make R code properly formatted
    //  - j-brooke.fracturedjsonvsc: A JSON formatter that produces human-readable but fairly compact output.
    //  - GrapeCity.gc-excelviewer: Edit Excel spreadsheets and CSV files in Visual Studio Code and VS Code for the Web.
    //  - vscode.git: Git SCM Integration
    //  - vscode.git-base: Git static contributions and pickers.
    //  - mhutchie.git-graph: View a Git Graph of your repository, and perform Git actions from the graph.
    //  - donjayamanne.githistory: View git log, file history, compare branches or commits
    //  - vscode.github: GitHub features for Windsurf
    //  - vscode.github-authentication: GitHub Authentication Provider
    //  - vscode.grunt: Extension to add Grunt capabilities to VS Code.
    //  - vscode.gulp: Extension to add Gulp capabilities to VSCode.
    //  - VisualStudioExptTeam.intellicode-api-usage-examples: See relevant code examples from GitHub for over 100K different APIs right in your editor.
    //  - vscode.ipynb: Provides basic support for opening and reading Jupyter's .ipynb notebook files
    //  - vscode.jake: Extension to add Jake capabilities to Windsurf.
    //  - ms-vscode.js-debug: An extension for debugging Node.js programs and Chrome.
    //  - ms-vscode.js-debug-companion: Companion extension to js-debug that provides capability for remote debugging
    //  - ZainChen.json: Json for Visual Studio Code
    //  - ms-toolsai.jupyter: Jupyter notebook support, interactive programming and computing that supports Intellisense, debugging and more.
    //  - ms-toolsai.jupyter-hub: Support for connecting to Jupyter Hub in VS Code along with the Jupyter Extension
    //  - ms-toolsai.jupyter-renderers: Renderers for Jupyter Notebooks (with plotly, vega, gif, png, svg, jpeg and other such outputs)
    //  - fnando.linter: An extension for VSCode that provides linting for multiple languages in on package.
    //  - ms-vscode.live-server: Hosts a local server in your workspace for you to preview your webpages on.
    //  - xyz.local-history: Save files into local history
    //  - bierner.markdown-checkbox: Adds checkbox support to the built-in markdown preview
    //  - bierner.markdown-emoji: Adds emoji syntax support to VS Code's built-in markdown preview and markdown cells in notebook
    //  - bierner.markdown-footnotes: Adds [^footnote] syntax support to VS Code's built-in markdown preview
    //  - mervin.markdown-formatter:  A Markdown Plugin for code artist
    //  - bierner.markdown-mermaid: Adds Mermaid diagram and flowchart support to VS Code's builtin markdown preview
    //  - shd101wyy.markdown-preview-enhanced: Markdown Preview Enhanced ported to vscode
    //  - bierner.markdown-preview-github-styles: Changes VS Code's built-in markdown preview to match Github's style
    //  - bierner.markdown-yaml-preamble: Renders yaml front matter as a table in the built-in markdown preview
    //  - PKief.material-icon-theme: Material Design Icons for Visual Studio Code
    //  - zhuangtongfa.material-theme: Atom's iconic One Dark theme for Visual Studio Code
    //  - vscode.media-preview: Provides Windsurf's built-in previews for images, audio, and video
    //  - vscode.merge-conflict: Highlighting and commands for inline merge conflicts.
    //  - vscode.microsoft-authentication: Microsoft authentication provider
    //  - vscode.npm: Extension to add task support for npm scripts.
    //  - jeanp413.open-remote-wsl: Open any folder in the Windows Subsystem for Linux (WSL).
    //  - kv9898.open-remote-wsl: Open any folder in the Windows Subsystem for Linux (WSL) for Positron.
    //  - christian-kohler.path-intellisense: Visual Studio Code plugin that autocompletes filenames
    //  - pnp.polacode: 📸  Polaroid for your code
    //  - esbenp.prettier-vscode: Code formatter using prettier
    //  - mohsen1.prettify-json: Visual Studio Code Prettify JSON Extension
    //  - alefragnani.project-manager: Easily switch between projects
    //  - DiogoNolasco.pyinit: Automatic generation of python __init__.py files and import statements within folders
    //  - RDebugger.r-debugger: R Debugger for VS Code
    //  - vscode.references-view: Reference Search results as separate, stable view in the sidebar
    //  - ms-vscode.remote-explorer: View remote machines for SSH and Tunnels.
    //  - ms-vscode.remote-server: Connect to a remote machine through a Tunnel
    //  - vscode.search-result: Provides syntax highlighting and language features for tabbed search results.
    //  - vscode.simple-browser: A very basic built-in webview for displaying web content.
    //  - vscode.terminal-suggest: Extension to add terminal completions for zsh, bash, and fish terminals.
    //  - Gruntfuggly.todo-tree: Show TODO, FIXME, etc. comment tags in a tree view
    //  - vscode.tunnel-forwarding: Allows forwarding local ports to be accessible over the internet.
    //  - kamikillerto.vscode-colorize: A vscode extension to help visualize css colors in files.
    //  - RandomFractalsInc.vscode-data-table: Data Table 🈸, Flat Data Grid 中 & Data Summary 🈷️ Renderers for VSCode Notebook 📓 Cell ⌗ Data Outputs
    //  - ms-dotnettools.vscode-dotnet-runtime: This extension installs and manages different versions of the .NET SDK and Runtime.
    //  - hediet.vscode-drawio: This unofficial extension integrates Draw.io into VS Code.
    //  - vscjava.vscode-java-dependency: Manage Java projects in Visual Studio Code
    //  - vscjava.vscode-java-test: Run and debug JUnit or TestNG test cases.
    //  - ms-vscode.vscode-js-profile-table: Text visualizer for profiles taken from the JavaScript debugger
    //  - ms-toolsai.vscode-jupyter-cell-tags: Jupyter Cell Tags support for VS Code
    //  - ms-toolsai.vscode-jupyter-powertoys: Experimental features for Jupyter notebook support in VS Code.
    //  - ms-toolsai.vscode-jupyter-slideshow: Jupyter Slide Show support for VS Code
    //  - DavidAnson.vscode-markdownlint: Markdown linting and style checking for Visual Studio Code
    //  - ziyasal.vscode-open-in-github: Jump to a source code line in GitHub, GitLab, Gitea, Bitbucket, VisualStudio.com !
    //  - ChrisChinchilla.vscode-pandoc: Renders markdown through pandoc
    //  - ms-vscode.vscode-speech: A VS Code extension to bring speech-to-text and other voice capabilities to VS Code.
    //  - vscjava.vscode-spring-boot-dashboard: Spring Boot Dashboard for VS Code
    //  - vscjava.vscode-spring-initializr: A lightweight extension based on Spring Initializr to generate quick start Spring Boot Java projects.
    //  - ms-windows-ai-studio.windows-ai-studio: AI Toolkit for VS Code streamlines generative AI app development by integrating tools and models from Azure AI Studio and Hugging Face. Browse and download public models, fine-tune, test, and use them in your Windows applications.
    //  - codeium.windsurf: The modern coding superpower: free AI code acceleration plugin for your favorite languages. Type less. Code more. Ship faster.
    //  - Codeium.windsurf-dev-containers: Use devcontainers within Windsurf
    //  - codeium.windsurf-remote-openssh: Connect to remote machines over SSH using Windsurf
    //  - codeium.windsurf-remote-wsl: Open any folder in the Windows Subsystem for Linux (WSL).
    "editor.defaultFoldingRangeProvider": null,
  
    // Defines a default formatter which takes precedence over all other formatter settings. Must be the identifier of an extension contributing a formatter.
    //  - null: None
    //  - Posit.air-vscode: R formatter and language server
    //  - ms-python.black-formatter: Formatting support for Python files using the Black formatter.
    //  - saoudrizwan.claude-dev: Autonomous coding agent right in your IDE, capable of creating/editing files, running commands, using the browser, and more with your permission every step of the way.
    //  - coddx.coddx-alpha: Coddx - a collection of tools that help developers program efficiently. Some useful features like: Kanban Board to manage project tasks in TODO.md, generating multiple files from templates quickly.
    //  - formulahendry.code-runner: Run C, C++, Java, JS, PHP, Python, Perl, Ruby, Go, Lua, Groovy, PowerShell, CMD, BASH, F#, C#, VBScript, TypeScript, CoffeeScript, Scala, Swift, Julia, Crystal, OCaml, R, AppleScript, Elixir, VB.NET, Clojure, Haxe, Obj-C, Rust, Racket, Scheme, AutoHotkey, AutoIt, Kotlin, Dart, Pascal, Haskell, Nim, D, Lisp, Kit, V, SCSS, Sass, CUDA, Less, Fortran, Ring, Standard ML, Zig, Mojo, Erlang, SPWN, Pkl, Gleam
    //  - ms-vscode.cpptools: C/C++ IntelliSense, debugging, and code browsing.
    //  - vscode.css-language-features: Provides rich language support for CSS, LESS and SCSS files.
    //  - tamasfe.even-better-toml: Fully-featured TOML support
    //  - j-brooke.fracturedjsonvsc: A JSON formatter that produces human-readable but fairly compact output.
    //  - ms-python.gather: Adds gather functionality in the Python language to the Jupyter Extension
    //  - codezombiech.gitignore: Lets you pull .gitignore templates from the https://github.com/github/gitignore repository. Language support for .gitignore files.
    //  - vscode.html-language-features: Provides rich language support for HTML and Handlebar files
    //  - ms-python.isort: Import Organization support for Python files using `isort`.
    //  - redhat.java: Java Linting, Intellisense, formatting, refactoring, Maven/Gradle support and more...
    //  - vscode.json-language-features: Provides rich language support for JSON files.
    //  - yzhang.markdown-all-in-one: All you need to write Markdown (keyboard shortcuts, table of contents, auto preview and more)
    //  - zaaack.markdown-editor: A full-featured WYSIWYG editor for markdown.
    //  - mervin.markdown-formatter:  A Markdown Plugin for code artist
    //  - vscode.markdown-language-features: Provides rich language support for Markdown.
    //  - vscode.markdown-math: Adds math support to Markdown in notebooks.
    //  - jithurjacob.nbpreviewer: An easy to use extension for previewing Jupyter Notebooks within VS Code
    //  - tomoki1207.pdf: Display pdf file in VSCode.
    //  - vscode.php-language-features: Provides rich language support for PHP files.
    //  - ms-vscode.powershell: Develop PowerShell modules, commands and scripts in Visual Studio Code!
    //  - esbenp.prettier-vscode: Code formatter using prettier
    //  - DiogoNolasco.pyinit: Automatic generation of python __init__.py files and import statements within folders
    //  - ms-python.pylint: Linting support for Python files using Pylint.
    //  - ms-python.python: Python language support with extension access points for IntelliSense (Pylance), Debugging (Python Debugger), linting, formatting, refactoring, unit tests, and more.
    //  - donjayamanne.python-environment-manager: View and manage Python environments & packages.
    //  - REditorSupport.r: R Extension for Visual Studio Code
    //  - mechatroner.rainbow-csv: Highlight CSV and TSV files, Run SQL-like queries
    //  - ms-vscode-remote.remote-ssh-edit: Edit SSH configuration files
    //  - RooVeterinaryInc.roo-cline: A whole dev team of AI agents in your editor.
    //  - charliermarsh.ruff: A Visual Studio Code extension with support for the Ruff linter and formatter.
    //  - vscode.typescript-language-features: Provides rich language support for JavaScript and TypeScript.
    //  - KevinRose.vsc-python-indent: Correct Python indentation
    //  - RandomFractalsInc.vscode-data-preview: Data Preview 🈸 extension for importing 📤 viewing 🔎 slicing 🔪 dicing 🎲 charting 📊 & exporting 📥 large JSON array/config, YAML, Apache Arrow, Avro, Parquet & Excel data files
    //  - RandomFractalsInc.vscode-data-table: Data Table 🈸, Flat Data Grid 中 & Data Summary 🈷️ Renderers for VSCode Notebook 📓 Cell ⌗ Data Outputs
    //  - batisteo.vscode-django: Beautiful syntax and scoped snippets for perfectionists with deadlines
    //  - ms-azuretools.vscode-docker: Makes it easy to create, manage, and debug containerized applications.
    //  - vscjava.vscode-gradle: Manage Gradle Projects, run Gradle tasks and provide better Gradle file authoring experience in VS Code
    //  - vscjava.vscode-java-debug: A lightweight Java debugger for Visual Studio Code
    //  - vscjava.vscode-java-pack: Popular extensions for Java development that provides Java IntelliSense, debugging, testing, Maven/Gradle support, project management and more
    //  - DavidAnson.vscode-markdownlint: Markdown linting and style checking for Visual Studio Code
    //  - vscjava.vscode-maven: Manage Maven projects, execute goals, generate project from archetype, improve user experience for Java developers.
    //  - franneck94.vscode-python-config: Creates config files for modern Python projects
    //  - njqdev.vscode-python-typehint: Type hint completion for Python.
    //  - vmware.vscode-spring-boot: Provides validation and content assist for Spring Boot `application.properties`, `application.yml` properties files. As well as Boot-specific support for `.java` files.
    //  - redhat.vscode-xml: XML Language Support by Red Hat
    //  - redhat.vscode-yaml: YAML Language Support by Red Hat, with built-in Kubernetes syntax support
    //  - Codeium.windsurfPyright: A language server for Python in Windsurf
    //  - DotJoshJohnson.xml: XML Formatting, XQuery, and XPath Tools for Visual Studio Code
    //  - almenon.arepl: real-time python scratchpad
    //  - dzhavat.bracket-pair-toggler: Quickly toggle 'Bracket Pair Colorization' setting with a simple command
    //  - vscode.configuration-editing: Provides capabilities (advanced IntelliSense, auto-fixing) in configuration files like settings, launch, and extension recommendation files.
    //  - phplasma.csv-to-table: Convert a CSV/TSV/PSV file to an ASCII formatted table
    //  - vscode.debug-auto-launch: Helper for auto-attach feature when node-debug extensions are not active.
    //  - vscode.debug-server-ready: Open URI in browser if server under debugging is ready.
    //  - ms-python.debugpy: Python Debugger extension using debugpy.
    //  - adamraichu.docx-viewer: An extension which provides a read-only renderer for docx files using the npm package docx-preview. Now with configuration!
    //  - vscode.emmet: Emmet support for Windsurf
    //  - vscode.extension-editing: Provides linting capabilities for authoring extensions.
    //  - atsyplenkov.formalist: Make R code properly formatted
    //  - GrapeCity.gc-excelviewer: Edit Excel spreadsheets and CSV files in Visual Studio Code and VS Code for the Web.
    //  - vscode.git: Git SCM Integration
    //  - vscode.git-base: Git static contributions and pickers.
    //  - mhutchie.git-graph: View a Git Graph of your repository, and perform Git actions from the graph.
    //  - donjayamanne.githistory: View git log, file history, compare branches or commits
    //  - vscode.github: GitHub features for Windsurf
    //  - vscode.github-authentication: GitHub Authentication Provider
    //  - vscode.grunt: Extension to add Grunt capabilities to VS Code.
    //  - vscode.gulp: Extension to add Gulp capabilities to VSCode.
    //  - VisualStudioExptTeam.intellicode-api-usage-examples: See relevant code examples from GitHub for over 100K different APIs right in your editor.
    //  - vscode.ipynb: Provides basic support for opening and reading Jupyter's .ipynb notebook files
    //  - vscode.jake: Extension to add Jake capabilities to Windsurf.
    //  - ms-vscode.js-debug: An extension for debugging Node.js programs and Chrome.
    //  - ms-vscode.js-debug-companion: Companion extension to js-debug that provides capability for remote debugging
    //  - ZainChen.json: Json for Visual Studio Code
    //  - ms-toolsai.jupyter: Jupyter notebook support, interactive programming and computing that supports Intellisense, debugging and more.
    //  - ms-toolsai.jupyter-hub: Support for connecting to Jupyter Hub in VS Code along with the Jupyter Extension
    //  - ms-toolsai.jupyter-renderers: Renderers for Jupyter Notebooks (with plotly, vega, gif, png, svg, jpeg and other such outputs)
    //  - fnando.linter: An extension for VSCode that provides linting for multiple languages in on package.
    //  - ms-vscode.live-server: Hosts a local server in your workspace for you to preview your webpages on.
    //  - xyz.local-history: Save files into local history
    //  - bierner.markdown-checkbox: Adds checkbox support to the built-in markdown preview
    //  - bierner.markdown-emoji: Adds emoji syntax support to VS Code's built-in markdown preview and markdown cells in notebook
    //  - bierner.markdown-footnotes: Adds [^footnote] syntax support to VS Code's built-in markdown preview
    //  - bierner.markdown-mermaid: Adds Mermaid diagram and flowchart support to VS Code's builtin markdown preview
    //  - shd101wyy.markdown-preview-enhanced: Markdown Preview Enhanced ported to vscode
    //  - bierner.markdown-preview-github-styles: Changes VS Code's built-in markdown preview to match Github's style
    //  - bierner.markdown-yaml-preamble: Renders yaml front matter as a table in the built-in markdown preview
    //  - PKief.material-icon-theme: Material Design Icons for Visual Studio Code
    //  - zhuangtongfa.material-theme: Atom's iconic One Dark theme for Visual Studio Code
    //  - vscode.media-preview: Provides Windsurf's built-in previews for images, audio, and video
    //  - vscode.merge-conflict: Highlighting and commands for inline merge conflicts.
    //  - vscode.microsoft-authentication: Microsoft authentication provider
    //  - vscode.npm: Extension to add task support for npm scripts.
    //  - jeanp413.open-remote-wsl: Open any folder in the Windows Subsystem for Linux (WSL).
    //  - kv9898.open-remote-wsl: Open any folder in the Windows Subsystem for Linux (WSL) for Positron.
    //  - christian-kohler.path-intellisense: Visual Studio Code plugin that autocompletes filenames
    //  - pnp.polacode: 📸  Polaroid for your code
    //  - mohsen1.prettify-json: Visual Studio Code Prettify JSON Extension
    //  - alefragnani.project-manager: Easily switch between projects
    //  - RDebugger.r-debugger: R Debugger for VS Code
    //  - vscode.references-view: Reference Search results as separate, stable view in the sidebar
    //  - ms-vscode.remote-explorer: View remote machines for SSH and Tunnels.
    //  - ms-vscode.remote-server: Connect to a remote machine through a Tunnel
    //  - vscode.search-result: Provides syntax highlighting and language features for tabbed search results.
    //  - vscode.simple-browser: A very basic built-in webview for displaying web content.
    //  - vscode.terminal-suggest: Extension to add terminal completions for zsh, bash, and fish terminals.
    //  - Gruntfuggly.todo-tree: Show TODO, FIXME, etc. comment tags in a tree view
    //  - vscode.tunnel-forwarding: Allows forwarding local ports to be accessible over the internet.
    //  - kamikillerto.vscode-colorize: A vscode extension to help visualize css colors in files.
    //  - ms-dotnettools.vscode-dotnet-runtime: This extension installs and manages different versions of the .NET SDK and Runtime.
    //  - hediet.vscode-drawio: This unofficial extension integrates Draw.io into VS Code.
    //  - vscjava.vscode-java-dependency: Manage Java projects in Visual Studio Code
    //  - vscjava.vscode-java-test: Run and debug JUnit or TestNG test cases.
    //  - ms-vscode.vscode-js-profile-table: Text visualizer for profiles taken from the JavaScript debugger
    //  - ms-toolsai.vscode-jupyter-cell-tags: Jupyter Cell Tags support for VS Code
    //  - ms-toolsai.vscode-jupyter-powertoys: Experimental features for Jupyter notebook support in VS Code.
    //  - ms-toolsai.vscode-jupyter-slideshow: Jupyter Slide Show support for VS Code
    //  - ziyasal.vscode-open-in-github: Jump to a source code line in GitHub, GitLab, Gitea, Bitbucket, VisualStudio.com !
    //  - ChrisChinchilla.vscode-pandoc: Renders markdown through pandoc
    //  - ms-vscode.vscode-speech: A VS Code extension to bring speech-to-text and other voice capabilities to VS Code.
    //  - vscjava.vscode-spring-boot-dashboard: Spring Boot Dashboard for VS Code
    //  - vscjava.vscode-spring-initializr: A lightweight extension based on Spring Initializr to generate quick start Spring Boot Java projects.
    //  - ms-windows-ai-studio.windows-ai-studio: AI Toolkit for VS Code streamlines generative AI app development by integrating tools and models from Azure AI Studio and Hugging Face. Browse and download public models, fine-tune, test, and use them in your Windows applications.
    //  - codeium.windsurf: The modern coding superpower: free AI code acceleration plugin for your favorite languages. Type less. Code more. Ship faster.
    //  - Codeium.windsurf-dev-containers: Use devcontainers within Windsurf
    //  - codeium.windsurf-remote-openssh: Connect to remote machines over SSH using Windsurf
    //  - codeium.windsurf-remote-wsl: Open any folder in the Windows Subsystem for Linux (WSL).
    "editor.defaultFormatter": null,
  
    // Controls whether the Go to Definition mouse gesture always opens the peek widget.
    "editor.definitionLinkOpensInPeek": false,
  
    // Controls whether `editor.tabSize#` and `#editor.insertSpaces` will be automatically detected when a file is opened based on the file contents.
    "editor.detectIndentation": true,
  
    // Controls whether the editor should allow moving selections via drag and drop.
    "editor.dragAndDrop": true,
  
    // Controls whether you can drag and drop a file into a text editor by holding down the `Shift` key (instead of opening the file in an editor).
    "editor.dropIntoEditor.enabled": true,
  
    // Configures the preferred type of edit to use when dropping content.
    // 
    // This is an ordered list of edit kinds. The first available edit of a preferred kind will be used.
    "editor.dropIntoEditor.preferences": [],
  
    // Controls if a widget is shown when dropping files into the editor. This widget lets you control how the file is dropped.
    //  - afterDrop: Show the drop selector widget after a file is dropped into the editor.
    //  - never: Never show the drop selector widget. Instead the default drop provider is always used.
    "editor.dropIntoEditor.showDropSelector": "afterDrop",
  
    // Controls whether copying without a selection copies the current line.
    "editor.emptySelectionClipboard": true,
  
    // Controls whether the tokenization should happen asynchronously on a web worker.
    "editor.experimental.asyncTokenization": true,
  
    // Controls whether async tokenization should be logged. For debugging only.
    "editor.experimental.asyncTokenizationLogging": false,
  
    // Controls whether async tokenization should be verified against legacy background tokenization. Might slow down tokenization. For debugging only.
    "editor.experimental.asyncTokenizationVerification": false,
  
    // Controls whether tree sitter parsing should be turned on for specific languages. This will take precedence over `editor.experimental.treeSitterTelemetry` for the specified languages.
    "editor.experimental.preferTreeSitter": [],
  
    // Controls whether tree sitter parsing should be turned on and telemetry collected. Setting `editor.experimental.preferTreeSitter` for specific languages will take precedence.
    "editor.experimental.treeSitterTelemetry": false,
  
    // Sets whether the new experimental edit context should be used instead of the text area.
    "editor.experimentalEditContextEnabled": false,
  
    // Controls whether to use the experimental GPU acceleration to render the editor.
    //  - off: Use regular DOM-based rendering.
    //  - on: Use GPU acceleration.
    "editor.experimentalGpuAcceleration": "off",
  
    // Controls whether whitespace is rendered with a new, experimental method.
    //  - svg: Use a new rendering method with svgs.
    //  - font: Use a new rendering method with font characters.
    //  - off: Use the stable rendering method.
    "editor.experimentalWhitespaceRendering": "svg",
  
    // Scrolling speed multiplier when pressing `Alt`.
    "editor.fastScrollSensitivity": 5,
  
    // Controls whether the Find Widget should add extra lines on top of the editor. When true, you can scroll beyond the first line when the Find Widget is visible.
    "editor.find.addExtraSpaceOnTop": true,
  
    // Controls the condition for turning on Find in Selection automatically.
    //  - never: Never turn on Find in Selection automatically (default).
    //  - always: Always turn on Find in Selection automatically.
    //  - multiline: Turn on Find in Selection automatically when multiple lines of content are selected.
    "editor.find.autoFindInSelection": "never",
  
    // Controls whether the cursor should jump to find matches while typing.
    "editor.find.cursorMoveOnType": true,
  
    // Controls how the find widget history should be stored
    //  - never: Do not store search history from the find widget.
    //  - workspace: Store search history across the active workspace
    "editor.find.history": "workspace",
  
    // Controls whether the search automatically restarts from the beginning (or the end) when no further matches can be found.
    "editor.find.loop": true,
  
    // Controls how the replace widget history should be stored
    //  - never: Do not store history from the replace widget.
    //  - workspace: Store replace history across the active workspace
    "editor.find.replaceHistory": "workspace",
  
    // Controls whether the search string in the Find Widget is seeded from the editor selection.
    //  - never: Never seed search string from the editor selection.
    //  - always: Always seed search string from the editor selection, including word at cursor position.
    //  - selection: Only seed search string from the editor selection.
    "editor.find.seedSearchStringFromSelection": "always",
  
    // Controls whether the editor has code folding enabled.
    "editor.folding": true,
  
    // Controls whether the editor should highlight folded ranges.
    "editor.foldingHighlight": true,
  
    // Controls whether the editor automatically collapses import ranges.
    "editor.foldingImportsByDefault": false,
  
    // The maximum number of foldable regions. Increasing this value may result in the editor becoming less responsive when the current source has a large number of foldable regions.
    "editor.foldingMaximumRegions": 5000,
  
    // Controls the strategy for computing folding ranges.
    //  - auto: Use a language-specific folding strategy if available, else the indentation-based one.
    //  - indentation: Use the indentation-based folding strategy.
    "editor.foldingStrategy": "auto",
  
    // Controls the font family.
    "editor.fontFamily": "Consolas, 'Courier New', monospace",
  
    // Configures font ligatures or font features. Can be either a boolean to enable/disable ligatures or a string for the value of the CSS 'font-feature-settings' property.
    "editor.fontLigatures": false,
  
    // Controls the font size in pixels.
    "editor.fontSize": 14,
  
    // Configures font variations. Can be either a boolean to enable/disable the translation from font-weight to font-variation-settings or a string for the value of the CSS 'font-variation-settings' property.
    "editor.fontVariations": false,
  
    // Controls the font weight. Accepts "normal" and "bold" keywords or numbers between 1 and 1000.
    "editor.fontWeight": "normal",
  
    // Controls whether the editor should automatically format the pasted content. A formatter must be available and the formatter should be able to format a range in a document.
    "editor.formatOnPaste": false,
  
    // Format a file on save. A formatter must be available and the editor must not be shutting down. When `files.autoSave` is set to `afterDelay`, the file will only be formatted when saved explicitly.
    "editor.formatOnSave": false,
  
    // Controls if format on save formats the whole file or only modifications. Only applies when `editor.formatOnSave` is enabled.
    //  - file: Format the whole file.
    //  - modifications: Format modifications (requires source control).
    //  - modificationsIfAvailable: Will attempt to format modifications only (requires source control). If source control can't be used, then the whole file will be formatted.
    "editor.formatOnSaveMode": "file",
  
    // Controls whether the editor should automatically format the line after typing.
    "editor.formatOnType": false,
  
    // Controls whether the editor should render the vertical glyph margin. Glyph margin is mostly used for debugging.
    "editor.glyphMargin": true,
  
    // Alternative command id that is being executed when the result of 'Go to Declaration' is the current location.
    "editor.gotoLocation.alternativeDeclarationCommand": "editor.action.goToReferences",
  
    // Alternative command id that is being executed when the result of 'Go to Definition' is the current location.
    "editor.gotoLocation.alternativeDefinitionCommand": "editor.action.goToReferences",
  
    // Alternative command id that is being executed when the result of 'Go to Implementation' is the current location.
    "editor.gotoLocation.alternativeImplementationCommand": "",
  
    // Alternative command id that is being executed when the result of 'Go to Reference' is the current location.
    "editor.gotoLocation.alternativeReferenceCommand": "",
  
    // Alternative command id that is being executed when the result of 'Go to Type Definition' is the current location.
    "editor.gotoLocation.alternativeTypeDefinitionCommand": "editor.action.goToReferences",
  
    // This setting is deprecated, please use separate settings like 'editor.editor.gotoLocation.multipleDefinitions' or 'editor.editor.gotoLocation.multipleImplementations' instead.
    // 
    "editor.gotoLocation.multiple": null,
  
    // Controls the behavior the 'Go to Declaration'-command when multiple target locations exist.
    //  - peek: Show Peek view of the results (default)
    //  - gotoAndPeek: Go to the primary result and show a Peek view
    //  - goto: Go to the primary result and enable Peek-less navigation to others
    "editor.gotoLocation.multipleDeclarations": "peek",
  
    // Controls the behavior the 'Go to Definition'-command when multiple target locations exist.
    //  - peek: Show Peek view of the results (default)
    //  - gotoAndPeek: Go to the primary result and show a Peek view
    //  - goto: Go to the primary result and enable Peek-less navigation to others
    "editor.gotoLocation.multipleDefinitions": "peek",
  
    // Controls the behavior the 'Go to Implementations'-command when multiple target locations exist.
    //  - peek: Show Peek view of the results (default)
    //  - gotoAndPeek: Go to the primary result and show a Peek view
    //  - goto: Go to the primary result and enable Peek-less navigation to others
    "editor.gotoLocation.multipleImplementations": "peek",
  
    // Controls the behavior the 'Go to References'-command when multiple target locations exist.
    //  - peek: Show Peek view of the results (default)
    //  - gotoAndPeek: Go to the primary result and show a Peek view
    //  - goto: Go to the primary result and enable Peek-less navigation to others
    "editor.gotoLocation.multipleReferences": "peek",
  
    // Controls the behavior the 'Go to Type Definition'-command when multiple target locations exist.
    //  - peek: Show Peek view of the results (default)
    //  - gotoAndPeek: Go to the primary result and show a Peek view
    //  - goto: Go to the primary result and enable Peek-less navigation to others
    "editor.gotoLocation.multipleTypeDefinitions": "peek",
  
    // Controls whether bracket pair guides are enabled or not.
    //  - true: Enables bracket pair guides.
    //  - active: Enables bracket pair guides only for the active bracket pair.
    //  - false: Disables bracket pair guides.
    "editor.guides.bracketPairs": false,
  
    // Controls whether horizontal bracket pair guides are enabled or not.
    //  - true: Enables horizontal guides as addition to vertical bracket pair guides.
    //  - active: Enables horizontal guides only for the active bracket pair.
    //  - false: Disables horizontal bracket pair guides.
    "editor.guides.bracketPairsHorizontal": "active",
  
    // Controls whether the editor should highlight the active bracket pair.
    "editor.guides.highlightActiveBracketPair": true,
  
    // Controls whether the editor should highlight the active indent guide.
    //  - true: Highlights the active indent guide.
    //  - always: Highlights the active indent guide even if bracket guides are highlighted.
    //  - false: Do not highlight the active indent guide.
    "editor.guides.highlightActiveIndentation": true,
  
    // Controls whether the editor should render indent guides.
    "editor.guides.indentation": true,
  
    // Controls whether the cursor should be hidden in the overview ruler.
    "editor.hideCursorInOverviewRuler": false,
  
    // Prefer showing hovers above the line, if there's space.
    "editor.hover.above": true,
  
    // Controls the delay in milliseconds after which the hover is shown.
    "editor.hover.delay": 300,
  
    // Controls whether the hover is shown.
    "editor.hover.enabled": true,
  
    // Controls the delay in milliseconds after which the hover is hidden. Requires `editor.hover.sticky` to be enabled.
    "editor.hover.hidingDelay": 300,
  
    // Controls whether the hover should remain visible when mouse is moved over it.
    "editor.hover.sticky": true,
  
    // The number of spaces used for indentation or `"tabSize"` to use the value from `editor.tabSize#`. This setting is overridden based on the file contents when `#editor.detectIndentation` is on.
    "editor.indentSize": "tabSize",
  
    // Enables the inlay hints in the editor.
    //  - on: Inlay hints are enabled
    //  - onUnlessPressed: Inlay hints are showing by default and hide when holding Ctrl+Alt
    //  - offUnlessPressed: Inlay hints are hidden by default and show when holding Ctrl+Alt
    //  - off: Inlay hints are disabled
    "editor.inlayHints.enabled": "on",
  
    // Controls font family of inlay hints in the editor. When set to empty, the `editor.fontFamily` is used.
    "editor.inlayHints.fontFamily": "",
  
    // Controls font size of inlay hints in the editor. As default the `editor.fontSize` is used when the configured value is less than `5` or greater than the editor font size.
    "editor.inlayHints.fontSize": 0,
  
    // Maximum overall length of inlay hints, for a single line, before they get truncated by the editor. Set to `0` to never truncate
    "editor.inlayHints.maximumLength": 43,
  
    // Enables the padding around the inlay hints in the editor.
    "editor.inlayHints.padding": false,
  
    // Controls whether the accessibility hint should be provided to screen reader users when an inline completion is shown.
    "editor.inlineCompletionsAccessibilityVerbose": false,
  
    // Controls whether showing a suggestion will shift the code to make space for the suggestion inline.
    "editor.inlineSuggest.edits.codeShifting": true,
  
    // Controls whether larger suggestions can be shown side by side.
    //  - auto: Larger suggestions will show side by side if there is enough space, otherwise they will be shown bellow.
    //  - never: Larger suggestions are never shown side by side and will always be shown bellow.
    "editor.inlineSuggest.edits.renderSideBySide": "auto",
  
    // Controls whether to automatically show inline suggestions in the editor.
    "editor.inlineSuggest.enabled": true,
  
    // Controls the font family of the inline suggestions.
    "editor.inlineSuggest.fontFamily": "default",
  
    // Controls when to show the inline suggestion toolbar.
    //  - always: Show the inline suggestion toolbar whenever an inline suggestion is shown.
    //  - onHover: Show the inline suggestion toolbar when hovering over an inline suggestion.
    //  - never: Never show the inline suggestion toolbar.
    "editor.inlineSuggest.showToolbar": "onHover",
  
    // Controls how inline suggestions interact with the suggest widget. If enabled, the suggest widget is not shown automatically when inline suggestions are available.
    "editor.inlineSuggest.suppressSuggestions": false,
  
    // Controls whether to show syntax highlighting for inline suggestions in the editor.
    "editor.inlineSuggest.syntaxHighlightingEnabled": false,
  
    // Insert spaces when pressing `Tab`. This setting is overridden based on the file contents when `editor.detectIndentation` is on.
    "editor.insertSpaces": true,
  
    // Defines the bracket symbols that increase or decrease the indentation.
    "editor.language.brackets": null,
  
    // Defines the bracket pairs that are colorized by their nesting level if bracket pair colorization is enabled.
    "editor.language.colorizedBracketPairs": null,
  
    // Special handling for large files to disable certain memory intensive features.
    "editor.largeFileOptimizations": true,
  
    // Controls the letter spacing in pixels.
    "editor.letterSpacing": 0,
  
    // Enables the Code Action lightbulb in the editor.
    //  - off: Disable the code action menu.
    //  - onCode: Show the code action menu when the cursor is on lines with code.
    //  - on: Show the code action menu when the cursor is on lines with code or on empty lines.
    "editor.lightbulb.enabled": "onCode",
  
    // Controls the line height. 
    //  - Use 0 to automatically compute the line height from the font size.
    //  - Values between 0 and 8 will be used as a multiplier with the font size.
    //  - Values greater than or equal to 8 will be used as effective values.
    "editor.lineHeight": 0,
  
    // Controls the display of line numbers.
    //  - off: Line numbers are not rendered.
    //  - on: Line numbers are rendered as absolute number.
    //  - relative: Line numbers are rendered as distance in lines to cursor position.
    //  - interval: Line numbers are rendered every 10 lines.
    "editor.lineNumbers": "on",
  
    // Controls whether the editor has linked editing enabled. Depending on the language, related symbols such as HTML tags, are updated while editing.
    "editor.linkedEditing": false,
  
    // Controls whether the editor should detect links and make them clickable.
    "editor.links": true,
  
    // Highlight matching brackets.
    "editor.matchBrackets": "always",
  
    // Lines above this length will not be tokenized for performance reasons
    "editor.maxTokenizationLineLength": 20000,
  
    // Controls whether the minimap is hidden automatically.
    "editor.minimap.autohide": false,
  
    // Controls whether the minimap is shown.
    "editor.minimap.enabled": true,
  
    // Limit the width of the minimap to render at most a certain number of columns.
    "editor.minimap.maxColumn": 120,
  
    // Render the actual characters on a line as opposed to color blocks.
    "editor.minimap.renderCharacters": true,
  
    // Scale of content drawn in the minimap: 1, 2 or 3.
    "editor.minimap.scale": 1,
  
    // Controls the font size of section headers in the minimap.
    "editor.minimap.sectionHeaderFontSize": 9,
  
    // Controls the amount of space (in pixels) between characters of section header. This helps the readability of the header in small font sizes.
    "editor.minimap.sectionHeaderLetterSpacing": 1,
  
    // Controls whether MARK: comments are shown as section headers in the minimap.
    "editor.minimap.showMarkSectionHeaders": true,
  
    // Controls whether named regions are shown as section headers in the minimap.
    "editor.minimap.showRegionSectionHeaders": true,
  
    // Controls when the minimap slider is shown.
    "editor.minimap.showSlider": "mouseover",
  
    // Controls the side where to render the minimap.
    "editor.minimap.side": "right",
  
    // Controls the size of the minimap.
    //  - proportional: The minimap has the same size as the editor contents (and might scroll).
    //  - fill: The minimap will stretch or shrink as necessary to fill the height of the editor (no scrolling).
    //  - fit: The minimap will shrink as necessary to never be larger than the editor (no scrolling).
    "editor.minimap.size": "proportional",
  
    // A multiplier to be used on the `deltaX` and `deltaY` of mouse wheel scroll events.
    "editor.mouseWheelScrollSensitivity": 1,
  
    // Zoom the font of the editor when using mouse wheel and holding `Ctrl`.
    "editor.mouseWheelZoom": false,
  
    // Controls the max number of cursors that can be in an active editor at once.
    "editor.multiCursorLimit": 10000,
  
    // Merge multiple cursors when they are overlapping.
    "editor.multiCursorMergeOverlapping": true,
  
    // The modifier to be used to add multiple cursors with the mouse. The Go to Definition and Open Link mouse gestures will adapt such that they do not conflict with the [multicursor modifier](https://code.visualstudio.com/docs/editor/codebasics#_multicursor-modifier).
    //  - ctrlCmd: Maps to `Control` on Windows and Linux and to `Command` on macOS.
    //  - alt: Maps to `Alt` on Windows and Linux and to `Option` on macOS.
    "editor.multiCursorModifier": "alt",
  
    // Controls pasting when the line count of the pasted text matches the cursor count.
    //  - spread: Each cursor pastes a single line of the text.
    //  - full: Each cursor pastes the full text.
    "editor.multiCursorPaste": "spread",
  
    // Controls whether occurrences should be highlighted across open files.
    //  - off: Does not highlight occurrences.
    //  - singleFile: Highlights occurrences only in the current file.
    //  - multiFile: Experimental: Highlights occurrences across all valid open files.
    "editor.occurrencesHighlight": "singleFile",
  
    // Controls the delay in milliseconds after which occurrences are highlighted.
    "editor.occurrencesHighlightDelay": 250,
  
    // Controls the cursor style in overtype input mode.
    "editor.overtypeCursorStyle": "block",
  
    // Controls whether pasting should overtype.
    "editor.overtypeOnPaste": true,
  
    // Controls whether a border should be drawn around the overview ruler.
    "editor.overviewRulerBorder": true,
  
    // Controls the amount of space between the bottom edge of the editor and the last line.
    "editor.padding.bottom": 0,
  
    // Controls the amount of space between the top edge of the editor and the first line.
    "editor.padding.top": 0,
  
    // Controls whether the parameter hints menu cycles or closes when reaching the end of the list.
    "editor.parameterHints.cycle": true,
  
    // Enables a pop-up that shows parameter documentation and type information as you type.
    "editor.parameterHints.enabled": true,
  
    // Controls whether you can paste content in different ways.
    "editor.pasteAs.enabled": true,
  
    // Configures the preferred type of edit to use when pasting content.
    // 
    // This is an ordered list of edit kinds. The first available edit of a preferred kind will be used.
    "editor.pasteAs.preferences": [],
  
    // Controls if a widget is shown when pasting content in to the editor. This widget lets you control how the file is pasted.
    //  - afterPaste: Show the paste selector widget after content is pasted into the editor.
    //  - never: Never show the paste selector widget. Instead the default pasting behavior is always used.
    "editor.pasteAs.showPasteSelector": "afterPaste",
  
    // Controls whether to focus the inline editor or the tree in the peek widget.
    //  - tree: Focus the tree when opening peek
    //  - editor: Focus the editor when opening peek
    "editor.peekWidgetDefaultFocus": "tree",
  
    // Controls whether suggestions should automatically show up while typing. This can be controlled for typing in comments, strings, and other code. Quick suggestion can be configured to show as ghost text or with the suggest widget. Also be aware of the `editor.suggestOnTriggerCharacters`-setting which controls if suggestions are triggered by special characters.
    "editor.quickSuggestions": {
      "other": "on",
      "comments": "off",
      "strings": "off"
    },
  
    // Controls the delay in milliseconds after which quick suggestions will show up.
    "editor.quickSuggestionsDelay": 10,
  
    // Enable/disable the ability to preview changes before renaming
    "editor.rename.enablePreview": true,
  
    // Deprecated, use `editor.linkedEditing` instead.
    // Controls whether the editor auto renames on type.
    "editor.renameOnType": false,
  
    // Controls whether the editor should render control characters.
    "editor.renderControlCharacters": true,
  
    // Render last line number when the file ends with a newline.
    "editor.renderFinalNewline": "on",
  
    // Controls how the editor should render the current line highlight.
    //  - none
    //  - gutter
    //  - line
    //  - all: Highlights both the gutter and the current line.
    "editor.renderLineHighlight": "line",
  
    // Controls if the editor should render the current line highlight only when the editor is focused.
    "editor.renderLineHighlightOnlyWhenFocus": false,
  
    // Controls how the editor should render whitespace characters.
    //  - none
    //  - boundary: Render whitespace characters except for single spaces between words.
    //  - selection: Render whitespace characters only on selected text.
    //  - trailing: Render only trailing whitespace characters.
    //  - all
    "editor.renderWhitespace": "selection",
  
    // Controls whether selections should have rounded corners.
    "editor.roundedSelection": true,
  
    // Render vertical rulers after a certain number of monospace characters. Use multiple values for multiple rulers. No rulers are drawn if array is empty.
    "editor.rulers": [],
  
    // Control whether inline suggestions are announced by a screen reader.
    "editor.screenReaderAnnounceInlineSuggestion": true,
  
    // Controls the visibility of the horizontal scrollbar.
    //  - auto: The horizontal scrollbar will be visible only when necessary.
    //  - visible: The horizontal scrollbar will always be visible.
    //  - hidden: The horizontal scrollbar will always be hidden.
    "editor.scrollbar.horizontal": "auto",
  
    // The height of the horizontal scrollbar.
    "editor.scrollbar.horizontalScrollbarSize": 12,
  
    // When set, the horizontal scrollbar will not increase the size of the editor's content.
    "editor.scrollbar.ignoreHorizontalScrollbarInContentHeight": false,
  
    // Controls whether clicks scroll by page or jump to click position.
    "editor.scrollbar.scrollByPage": false,
  
    // Controls the visibility of the vertical scrollbar.
    //  - auto: The vertical scrollbar will be visible only when necessary.
    //  - visible: The vertical scrollbar will always be visible.
    //  - hidden: The vertical scrollbar will always be hidden.
    "editor.scrollbar.vertical": "auto",
  
    // The width of the vertical scrollbar.
    "editor.scrollbar.verticalScrollbarSize": 14,
  
    // Controls the number of extra characters beyond which the editor will scroll horizontally.
    "editor.scrollBeyondLastColumn": 4,
  
    // Controls whether the editor will scroll beyond the last line.
    "editor.scrollBeyondLastLine": true,
  
    // Scroll only along the predominant axis when scrolling both vertically and horizontally at the same time. Prevents horizontal drift when scrolling vertically on a trackpad.
    "editor.scrollPredominantAxis": true,
  
    // Controls whether the editor should highlight matches similar to the selection.
    "editor.selectionHighlight": true,
  
    // Controls whether the semanticHighlighting is shown for the languages that support it.
    //  - true: Semantic highlighting enabled for all color themes.
    //  - false: Semantic highlighting disabled for all color themes.
    //  - configuredByTheme: Semantic highlighting is configured by the current color theme's `semanticHighlighting` setting.
    "editor.semanticHighlighting.enabled": "configuredByTheme",
  
    // Overrides editor semantic token color and styles from the currently selected color theme.
    "editor.semanticTokenColorCustomizations": {},
  
    // Controls strikethrough deprecated variables.
    "editor.showDeprecated": true,
  
    // Controls when the folding controls on the gutter are shown.
    //  - always: Always show the folding controls.
    //  - never: Never show the folding controls and reduce the gutter size.
    //  - mouseover: Only show the folding controls when the mouse is over the gutter.
    "editor.showFoldingControls": "mouseover",
  
    // Controls fading out of unused code.
    "editor.showUnused": true,
  
    // Whether leading and trailing whitespace should always be selected.
    "editor.smartSelect.selectLeadingAndTrailingWhitespace": true,
  
    // Whether subwords (like 'foo' in 'fooBar' or 'foo_bar') should be selected.
    "editor.smartSelect.selectSubwords": true,
  
    // Controls whether the editor will scroll using an animation.
    "editor.smoothScrolling": false,
  
    // Controls if surround-with-snippets or file template snippets show as Code Actions.
    "editor.snippets.codeActions.enabled": true,
  
    // Controls whether snippets are shown with other suggestions and how they are sorted.
    //  - top: Show snippet suggestions on top of other suggestions.
    //  - bottom: Show snippet suggestions below other suggestions.
    //  - inline: Show snippets suggestions with other suggestions.
    //  - none: Do not show snippet suggestions.
    "editor.snippetSuggestions": "inline",
  
    // Keep peek editors open even when double-clicking their content or when hitting `Escape`.
    "editor.stablePeek": false,
  
    // Defines the model to use for determining which lines to stick. If the outline model does not exist, it will fall back on the folding provider model which falls back on the indentation model. This order is respected in all three cases.
    "editor.stickyScroll.defaultModel": "outlineModel",
  
    // Shows the nested current scopes during the scroll at the top of the editor.
    "editor.stickyScroll.enabled": true,
  
    // Defines the maximum number of sticky lines to show.
    "editor.stickyScroll.maxLineCount": 5,
  
    // Enable scrolling of Sticky Scroll with the editor's horizontal scrollbar.
    "editor.stickyScroll.scrollWithEditor": true,
  
    // Emulate selection behavior of tab characters when using spaces for indentation. Selection will stick to tab stops.
    "editor.stickyTabStops": false,
  
    // This setting is deprecated, please use separate settings like 'editor.suggest.showKeywords' or 'editor.suggest.showSnippets' instead.
    // 
    "editor.suggest.filteredTypes": {},
  
    // Controls whether filtering and sorting suggestions accounts for small typos.
    "editor.suggest.filterGraceful": true,
  
    // Controls whether words are overwritten when accepting completions. Note that this depends on extensions opting into this feature.
    //  - insert: Insert suggestion without overwriting text right of the cursor.
    //  - replace: Insert suggestion and overwrite text right of the cursor.
    "editor.suggest.insertMode": "insert",
  
    // Controls whether sorting favors words that appear close to the cursor.
    "editor.suggest.localityBonus": false,
  
    // When enabled IntelliSense filtering requires that the first character matches on a word start. For example, `c` on `Console` or `WebContext` but _not_ on `description`. When disabled IntelliSense will show more results but still sorts them by match quality.
    "editor.suggest.matchOnWordStartOnly": true,
  
    // This setting is deprecated. The suggest widget can now be resized.
    // 
    "editor.suggest.maxVisibleSuggestions": 0,
  
    // Controls whether to preview the suggestion outcome in the editor.
    "editor.suggest.preview": false,
  
    // Controls whether a suggestion is selected when the widget shows. Note that this only applies to automatically triggered suggestions (`editor.quickSuggestions#` and `#editor.suggestOnTriggerCharacters`) and that a suggestion is always selected when explicitly invoked, e.g via `Ctrl+Space`.
    //  - always: Always select a suggestion when automatically triggering IntelliSense.
    //  - never: Never select a suggestion when automatically triggering IntelliSense.
    //  - whenTriggerCharacter: Select a suggestion only when triggering IntelliSense from a trigger character.
    //  - whenQuickSuggestion: Select a suggestion only when triggering IntelliSense as you type.
    "editor.suggest.selectionMode": "always",
  
    // Controls whether remembered suggestion selections are shared between multiple workspaces and windows (needs `editor.suggestSelection`).
    "editor.suggest.shareSuggestSelections": false,
  
    // When enabled IntelliSense shows `class`-suggestions.
    "editor.suggest.showClasses": true,
  
    // When enabled IntelliSense shows `color`-suggestions.
    "editor.suggest.showColors": true,
  
    // When enabled IntelliSense shows `constant`-suggestions.
    "editor.suggest.showConstants": true,
  
    // When enabled IntelliSense shows `constructor`-suggestions.
    "editor.suggest.showConstructors": true,
  
    // When enabled IntelliSense shows `customcolor`-suggestions.
    "editor.suggest.showCustomcolors": true,
  
    // When enabled IntelliSense shows `deprecated`-suggestions.
    "editor.suggest.showDeprecated": true,
  
    // When enabled IntelliSense shows `enumMember`-suggestions.
    "editor.suggest.showEnumMembers": true,
  
    // When enabled IntelliSense shows `enum`-suggestions.
    "editor.suggest.showEnums": true,
  
    // When enabled IntelliSense shows `event`-suggestions.
    "editor.suggest.showEvents": true,
  
    // When enabled IntelliSense shows `field`-suggestions.
    "editor.suggest.showFields": true,
  
    // When enabled IntelliSense shows `file`-suggestions.
    "editor.suggest.showFiles": true,
  
    // When enabled IntelliSense shows `folder`-suggestions.
    "editor.suggest.showFolders": true,
  
    // When enabled IntelliSense shows `function`-suggestions.
    "editor.suggest.showFunctions": true,
  
    // Controls whether to show or hide icons in suggestions.
    "editor.suggest.showIcons": true,
  
    // Controls whether suggest details show inline with the label or only in the details widget.
    "editor.suggest.showInlineDetails": true,
  
    // When enabled IntelliSense shows `interface`-suggestions.
    "editor.suggest.showInterfaces": true,
  
    // When enabled IntelliSense shows `issues`-suggestions.
    "editor.suggest.showIssues": true,
  
    // When enabled IntelliSense shows `keyword`-suggestions.
    "editor.suggest.showKeywords": true,
  
    // When enabled IntelliSense shows `method`-suggestions.
    "editor.suggest.showMethods": true,
  
    // When enabled IntelliSense shows `module`-suggestions.
    "editor.suggest.showModules": true,
  
    // When enabled IntelliSense shows `operator`-suggestions.
    "editor.suggest.showOperators": true,
  
    // When enabled IntelliSense shows `property`-suggestions.
    "editor.suggest.showProperties": true,
  
    // When enabled IntelliSense shows `reference`-suggestions.
    "editor.suggest.showReferences": true,
  
    // When enabled IntelliSense shows `snippet`-suggestions.
    "editor.suggest.showSnippets": true,
  
    // Controls the visibility of the status bar at the bottom of the suggest widget.
    "editor.suggest.showStatusBar": false,
  
    // When enabled IntelliSense shows `struct`-suggestions.
    "editor.suggest.showStructs": true,
  
    // When enabled IntelliSense shows `typeParameter`-suggestions.
    "editor.suggest.showTypeParameters": true,
  
    // When enabled IntelliSense shows `unit`-suggestions.
    "editor.suggest.showUnits": true,
  
    // When enabled IntelliSense shows `user`-suggestions.
    "editor.suggest.showUsers": true,
  
    // When enabled IntelliSense shows `value`-suggestions.
    "editor.suggest.showValues": true,
  
    // When enabled IntelliSense shows `variable`-suggestions.
    "editor.suggest.showVariables": true,
  
    // When enabled IntelliSense shows `text`-suggestions.
    "editor.suggest.showWords": true,
  
    // Controls whether an active snippet prevents quick suggestions.
    "editor.suggest.snippetsPreventQuickSuggestions": false,
  
    // Font size for the suggest widget. When set to `0`, the value of `editor.fontSize` is used.
    "editor.suggestFontSize": 0,
  
    // Line height for the suggest widget. When set to `0`, the value of `editor.lineHeight` is used. The minimum value is 8.
    "editor.suggestLineHeight": 0,
  
    // Controls whether suggestions should automatically show up when typing trigger characters.
    "editor.suggestOnTriggerCharacters": true,
  
    // Controls how suggestions are pre-selected when showing the suggest list.
    //  - first: Always select the first suggestion.
    //  - recentlyUsed: Select recent suggestions unless further typing selects one, e.g. `console.| -> console.log` because `log` has been completed recently.
    //  - recentlyUsedByPrefix: Select suggestions based on previous prefixes that have completed those suggestions, e.g. `co -> console` and `con -> const`.
    "editor.suggestSelection": "first",
  
    // Enables tab completions.
    //  - on: Tab complete will insert the best matching suggestion when pressing tab.
    //  - off: Disable tab completions.
    //  - onlySnippets: Tab complete snippets when their prefix match. Works best when 'quickSuggestions' aren't enabled.
    "editor.tabCompletion": "off",
  
    // Controls whether the editor receives tabs or defers them to the workbench for navigation.
    "editor.tabFocusMode": false,
  
    // The number of spaces a tab is equal to. This setting is overridden based on the file contents when `editor.detectIndentation` is on.
    "editor.tabSize": 4,
  
    // Overrides editor syntax colors and font style from the currently selected color theme.
    "editor.tokenColorCustomizations": {},
  
    // Remove trailing auto inserted whitespace.
    "editor.trimAutoWhitespace": true,
  
    // Controls whether clicking on the empty content after a folded line will unfold the line.
    "editor.unfoldOnClickAfterEndOfLine": false,
  
    // Defines allowed characters that are not being highlighted.
    "editor.unicodeHighlight.allowedCharacters": {},
  
    // Unicode characters that are common in allowed locales are not being highlighted.
    "editor.unicodeHighlight.allowedLocales": {
      "_os": true,
      "_vscode": true
    },
  
    // Controls whether characters are highlighted that can be confused with basic ASCII characters, except those that are common in the current user locale.
    "editor.unicodeHighlight.ambiguousCharacters": true,
  
    // Controls whether characters in comments should also be subject to Unicode highlighting.
    "editor.unicodeHighlight.includeComments": "inUntrustedWorkspace",
  
    // Controls whether characters in strings should also be subject to Unicode highlighting.
    "editor.unicodeHighlight.includeStrings": true,
  
    // Controls whether characters that just reserve space or have no width at all are highlighted.
    "editor.unicodeHighlight.invisibleCharacters": true,
  
    // Controls whether all non-basic ASCII characters are highlighted. Only characters between U+0020 and U+007E, tab, line-feed and carriage-return are considered basic ASCII.
    "editor.unicodeHighlight.nonBasicASCII": "inUntrustedWorkspace",
  
    // Remove unusual line terminators that might cause problems.
    //  - auto: Unusual line terminators are automatically removed.
    //  - off: Unusual line terminators are ignored.
    //  - prompt: Unusual line terminators prompt to be removed.
    "editor.unusualLineTerminators": "prompt",
  
    // Spaces and tabs are inserted and deleted in alignment with tab stops.
    "editor.useTabStops": true,
  
    // Controls whether completions should be computed based on words in the document and from which documents they are computed.
    //  - off: Turn off Word Based Suggestions.
    //  - currentDocument: Only suggest words from the active document.
    //  - matchingDocuments: Suggest words from all open documents of the same language.
    //  - allDocuments: Suggest words from all open documents.
    "editor.wordBasedSuggestions": "matchingDocuments",
  
    // Controls the word break rules used for Chinese/Japanese/Korean (CJK) text.
    //  - normal: Use the default line break rule.
    //  - keepAll: Word breaks should not be used for Chinese/Japanese/Korean (CJK) text. Non-CJK text behavior is the same as for normal.
    "editor.wordBreak": "normal",
  
    // 
    "editor.wordSegmenterLocales": null,
  
    // Characters that will be used as word separators when doing word related navigations or operations.
    "editor.wordSeparators": "`~!@#$%^&*()-=+[{]}\\|;:'\",.<>/?",
  
    // Controls how lines should wrap.
    //  - off: Lines will never wrap.
    //  - on: Lines will wrap at the viewport width.
    //  - wordWrapColumn: Lines will wrap at `editor.wordWrapColumn`.
    //  - bounded: Lines will wrap at the minimum of viewport and `editor.wordWrapColumn`.
    "editor.wordWrap": "off",
  
    // Controls the wrapping column of the editor when `editor.wordWrap` is `wordWrapColumn` or `bounded`.
    "editor.wordWrapColumn": 80,
  
    // Controls the indentation of wrapped lines.
    //  - none: No indentation. Wrapped lines begin at column 1.
    //  - same: Wrapped lines get the same indentation as the parent.
    //  - indent: Wrapped lines get +1 indentation toward the parent.
    //  - deepIndent: Wrapped lines get +2 indentation toward the parent.
    "editor.wrappingIndent": "same",
  
    // Controls the algorithm that computes wrapping points. Note that when in accessibility mode, advanced will be used for the best experience.
    //  - simple: Assumes that all characters are of the same width. This is a fast algorithm that works correctly for monospace fonts and certain scripts (like Latin characters) where glyphs are of equal width.
    //  - advanced: Delegates wrapping points computation to the browser. This is a slow algorithm, that might cause freezes for large files, but it works correctly in all cases.
    "editor.wrappingStrategy": "simple",
  
    // Whether the inline chat also renders an accessible diff viewer for its changes.
    //  - auto: The accessible diff viewer is based on screen reader mode being enabled.
    //  - on: The accessible diff viewer is always enabled.
    //  - off: The accessible diff viewer is never enabled.
    "inlineChat.accessibleDiffView": "auto",
  
    // Whether to finish an inline chat session when typing outside of changed regions.
    "inlineChat.finishOnType": false,
  
    // Whether holding the inline chat keybinding will automatically enable speech recognition.
    "inlineChat.holdToSpeech": true,
  
    // Whether empty lines show a hint to generate code with inline chat.
    "inlineChat.lineEmptyHint": false,
  
    // Whether lines that are dominated by natural language or pseudo code show a hint to continue with inline chat. For instance, `class Person with name and hobbies` would show a hint to continue with chat.
    "inlineChat.lineNaturalLanguageHint": true,
  
    // Run a series of Code Actions for a notebook on save. Code Actions must be specified and the editor must not be shutting down. When `files.autoSave` is set to `afterDelay`, Code Actions will only be run when the file is saved explicitly. Example: `"notebook.source.organizeImports": "explicit"`
    "notebook.codeActionsOnSave": {}
  
  },
  {
    // Controls whether inline actions are always visible in the Source Control view.
    "scm.alwaysShowActions": false,
  
    // Controls whether repositories should always be visible in the Source Control view.
    "scm.alwaysShowRepositories": false,
  
    // Controls whether the Source Control view should automatically reveal and select files when opening them.
    "scm.autoReveal": true,
  
    // Controls whether the Source Control view should render folders in a compact form. In such a form, single child folders will be compressed in a combined tree element.
    "scm.compactFolders": true,
  
    // Controls the count badge on the Source Control icon on the Activity Bar.
    //  - all: Show the sum of all Source Control Provider count badges.
    //  - focused: Show the count badge of the focused Source Control Provider.
    //  - off: Disable the Source Control count badge.
    "scm.countBadge": "all",
  
    // Controls the default Source Control repository view mode.
    //  - tree: Show the repository changes as a tree.
    //  - list: Show the repository changes as a list.
    "scm.defaultViewMode": "list",
  
    // Controls the default Source Control repository changes sort order when viewed as a list.
    //  - name: Sort the repository changes by file name.
    //  - path: Sort the repository changes by path.
    //  - status: Sort the repository changes by Source Control status.
    "scm.defaultViewSortKey": "path",
  
    // Controls diff decorations in the editor.
    //  - all: Show the diff decorations in all available locations.
    //  - gutter: Show the diff decorations only in the editor gutter.
    //  - overview: Show the diff decorations only in the overview ruler.
    //  - minimap: Show the diff decorations only in the minimap.
    //  - none: Do not show the diff decorations.
    "scm.diffDecorations": "all",
  
    // Controls the behavior of Source Control diff gutter decorations.
    //  - diff: Show the inline diff Peek view on click.
    //  - none: Do nothing.
    "scm.diffDecorationsGutterAction": "diff",
  
    // Controls whether a pattern is used for the diff decorations in gutter.
    "scm.diffDecorationsGutterPattern": {
      "added": false,
      "modified": true
    },
  
    // Controls the visibility of the Source Control diff decorator in the gutter.
    //  - always: Show the diff decorator in the gutter at all times.
    //  - hover: Show the diff decorator in the gutter only on hover.
    "scm.diffDecorationsGutterVisibility": "always",
  
    // Controls the width(px) of diff decorations in gutter (added & modified).
    "scm.diffDecorationsGutterWidth": 3,
  
    // Controls whether leading and trailing whitespace is ignored in Source Control diff gutter decorations.
    //  - true: Ignore leading and trailing whitespace.
    //  - false: Do not ignore leading and trailing whitespace.
    //  - inherit: Inherit from `diffEditor.ignoreTrimWhitespace`.
    "scm.diffDecorationsIgnoreTrimWhitespace": "false",
  
    // Controls which badges are shown in the Source Control Graph view. The badges are shown on the right side of the graph indicating the names of history item groups.
    //  - all: Show badges of all history item groups in the Source Control Graph view.
    //  - filter: Show only the badges of history item groups used as a filter in the Source Control Graph view.
    "scm.graph.badges": "filter",
  
    // Controls whether the Source Control Graph view will load the next page of items when you scroll to the end of the list.
    "scm.graph.pageOnScroll": true,
  
    // The number of items to show in the Source Control Graph view by default and when loading more items.
    "scm.graph.pageSize": 50,
  
    // Controls the font for the input message. Use `default` for the workbench user interface font family, `editor` for the `editor.fontFamily`'s value, or a custom font family.
    "scm.inputFontFamily": "default",
  
    // Controls the font size for the input message in pixels.
    "scm.inputFontSize": 13,
  
    // Controls the maximum number of lines that the input will auto-grow to.
    "scm.inputMaxLineCount": 10,
  
    // Controls the minimum number of lines that the input will auto-grow from.
    "scm.inputMinLineCount": 1,
  
    // Controls the count badges on Source Control Provider headers. These headers appear in the Source Control view when there is more than one provider or when the `scm.alwaysShowRepositories` setting is enabled, and in the Source Control Repositories view.
    //  - hidden: Hide Source Control Provider count badges.
    //  - auto: Only show count badge for Source Control Provider when non-zero.
    //  - visible: Show Source Control Provider count badges.
    "scm.providerCountBadge": "hidden",
  
    // Controls the sort order of the repositories in the source control repositories view.
    //  - discovery time: Repositories in the Source Control Repositories view are sorted by discovery time. Repositories in the Source Control view are sorted in the order that they were selected.
    //  - name: Repositories in the Source Control Repositories and Source Control views are sorted by repository name.
    //  - path: Repositories in the Source Control Repositories and Source Control views are sorted by repository path.
    "scm.repositories.sortOrder": "discovery time",
  
    // Controls how many repositories are visible in the Source Control Repositories section. Set to 0, to be able to manually resize the view.
    "scm.repositories.visible": 10,
  
    // Controls whether an action button can be shown in the Source Control view.
    "scm.showActionButton": true,
  
    // Controls whether an action button can be shown in the Source Control input.
    "scm.showInputActionButton": true,
  
    // Controls the default working set to use when switching to a source control history item group that does not have a working set.
    //  - empty: Use an empty working set when switching to a source control history item group that does not have a working set.
    //  - current: Use the current working set when switching to a source control history item group that does not have a working set.
    "scm.workingSets.default": "current",
  
    // Controls whether to store editor working sets when switching between source control history item groups.
    "scm.workingSets.enabled": false
  
  },
  {
    // Force the regex to match over multiple lines. Allows use of `[\s\S]` to match anything including newlines.
    "todo-tree.regex.enableMultiLine": false,
  
    // Regular expression for matching TODOs. Note: **($TAGS)** will be replaced by the expanded tag list. For some of the extension features to work, **($TAGS)** should be present in the regex, however, the basic functionality should still work if you need to explicitly expand the tag list.
    "todo-tree.regex.regex": "(//|#|<!--|;|/\\*|^|^[ \\t]*(-|\\d+.))\\s*($TAGS)",
  
    // Use a case sensitive regular expression.
    "todo-tree.regex.regexCaseSensitive": true,
  
    // Regular expression for processing the text to the right of the tag, e.g. for extracting a sub tag, or removing unwanted characters.
    "todo-tree.regex.subTagRegex": "",
  
    // Location of your version of ripgrep.
    "todo-tree.ripgrep.ripgrep": "",
  
    // Additional arguments to pass to ripgrep (Use with caution!).
    "todo-tree.ripgrep.ripgrepArgs": "--max-columns=1000 --no-config "
  
  },
  {
    // Size of the buffer to use for retrieving output from ripgrep (kilobytes).
    "todo-tree.ripgrep.ripgrepMaxBuffer": 200,
  
    // A pattern file is used with ripgrep by default. If you experience issues with deleting the pattern file, set this to false to use the legacy method of providing the regex to ripgrep.
    "todo-tree.ripgrep.usePatternFile": true
  
  },
  {
    // A set of UNC host names (without leading or trailing backslash, for example `192.168.0.1` or `my-server`) to allow without user confirmation. If a UNC host is being accessed that is not allowed via this setting or has not been acknowledged via user confirmation, an error will occur and the operation stopped. A restart is required when changing this setting. Find out more about this setting at https://aka.ms/vscode-windows-unc.
    "security.allowedUNCHosts": [],
  
    // If enabled, a dialog will ask for confirmation whenever a local file or workspace is about to open through a protocol handler.
    "security.promptForLocalFileProtocolHandling": true,
  
    // If enabled, a dialog will ask for confirmation whenever a remote file or workspace is about to open through a protocol handler.
    "security.promptForRemoteFileProtocolHandling": true,
  
    // If enabled, only allows access to UNC host names that are allowed by the `security.allowedUNCHosts` setting or after user confirmation. Find out more about this setting at https://aka.ms/vscode-windows-unc.
    "security.restrictUNCAccess": true,
  
    // Controls when the restricted mode banner is shown.
    //  - always: Show the banner every time an untrusted workspace is open.
    //  - untilDismissed: Show the banner when an untrusted workspace is opened until dismissed.
    //  - never: Do not show the banner when an untrusted workspace is open.
    "security.workspace.trust.banner": "untilDismissed",
  
    // Controls whether or not the empty window is trusted by default within Windsurf. When used with `security.workspace.trust.untrustedFiles`, you can enable the full functionality of Windsurf without prompting in an empty window.
    "security.workspace.trust.emptyWindow": true,
  
    // Controls whether or not Workspace Trust is enabled within Windsurf.
    "security.workspace.trust.enabled": true,
  
    // Controls when the startup prompt to trust a workspace is shown.
    //  - always: Ask for trust every time an untrusted workspace is opened.
    //  - once: Ask for trust the first time an untrusted workspace is opened.
    //  - never: Do not ask for trust when an untrusted workspace is opened.
    "security.workspace.trust.startupPrompt": "once",
  
    // Controls how to handle opening untrusted files in a trusted workspace. This setting also applies to opening files in an empty window which is trusted via `security.workspace.trust.emptyWindow`.
    //  - prompt: Ask how to handle untrusted files for each workspace. Once untrusted files are introduced to a trusted workspace, you will not be prompted again.
    //  - open: Always allow untrusted files to be introduced to a trusted workspace without prompting.
    //  - newWindow: Always open untrusted files in a separate window in restricted mode without prompting.
    "security.workspace.trust.untrustedFiles": "prompt"
  
  },
  {
    // Whether to dim unfocused editors and terminals, which makes it more clear where typed input will go to. This works with the majority of editors with the notable exceptions of those that utilize iframes like notebooks and extension webview editors.
    "accessibility.dimUnfocused.enabled": false,
  
    // The opacity fraction (0.2 to 1.0) to use for unfocused editors and terminals. This will only take effect when `accessibility.dimUnfocused.enabled` is enabled.
    "accessibility.dimUnfocused.opacity": 0.75,
  
    // Controls whether the Accessible View is hidden.
    "accessibility.hideAccessibleView": false,
  
    // Controls the height of editor tabs. Also applies to the title control bar when `workbench.editor.showTabs` is not set to `multiple`.
    "window.density.editorTabHeight": "default",
  
    // Controls the behavior of clicking an Activity Bar icon in the workbench. This value is ignored when `workbench.activityBar.location` is not set to `default`.
    //  - toggle: Hide the Primary Side Bar if the clicked item is already visible.
    //  - focus: Focus the Primary Side Bar if the clicked item is already visible.
    "workbench.activityBar.iconClickBehavior": "toggle",
  
    // Controls the location of the Activity Bar relative to the Primary Side Bar.
    //  - default: Show the Activity Bar on the side of the Primary Side Bar.
    //  - top: Show the Activity Bar on top of the Primary Side Bar.
    //  - bottom: Show the Activity Bar at the bottom of the Primary Side Bar.
    //  - hidden: Hide the Activity Bar in the Primary Side Bar.
    "workbench.activityBar.location": "default",
  
    // Controls the location of the Secondary Activity Bar relative to the Secondary Side Bar.
    //  - default: Show the Secondary Activity Bar on the side of the Secondary Side Bar.
    //  - top: Show the Secondary Activity Bar on top of the Secondary Side Bar.
    //  - bottom: Show the Secondary Activity Bar at the bottom of the Secondary Side Bar.
    //  - hidden: Hide the Secondary Activity Bar in the Secondary Side Bar.
    "workbench.auxiliaryActivityBar.location": "hidden",
  
    // Controls whether to automatically resume available working changes stored in the cloud for the current workspace.
    //  - onReload: Automatically resume available working changes from the cloud on window reload.
    //  - off: Never attempt to resume working changes from the cloud.
    "workbench.cloudChanges.autoResume": "onReload",
  
    // Controls whether to prompt the user to store working changes in the cloud when using Continue Working On.
    //  - prompt: Prompt the user to sign in to store working changes in the cloud with Continue Working On.
    //  - off: Do not store working changes in the cloud with Continue Working On unless the user has already turned on Cloud Changes.
    "workbench.cloudChanges.continueOn": "prompt",
  
    // Overrides colors from the currently selected color theme.
    "workbench.colorCustomizations": {},
  
    // Specifies the color theme used in the workbench when `window.autoDetectColorScheme` is not enabled.
    "workbench.colorTheme": "Default Dark Modern",
  
    // Controls where the command palette should ask chat questions.
    //  - chatView: Ask chat questions in the Chat view.
    //  - quickChat: Ask chat questions in Quick Chat.
    "workbench.commandPalette.experimental.askChatLocation": "chatView",
  
    // Controls whether the command palette should include similar commands. You must have an extension installed that provides Natural Language support.
    "workbench.commandPalette.experimental.enableNaturalLanguageSearch": true,
  
    // Controls whether the command palette should have a list of commonly used commands.
    "workbench.commandPalette.experimental.suggestCommands": true,
  
    // Controls the number of recently used commands to keep in history for the command palette. Set to 0 to disable command history.
    "workbench.commandPalette.history": 5,
  
    // Controls whether the last typed input to the command palette should be restored when opening it the next time.
    "workbench.commandPalette.preserveInput": false,
  
    // Controls whether to always show the editor actions, even when the editor group is not active.
    "workbench.editor.alwaysShowEditorActions": false,
  
    // If an editor matching one of the listed types is opened as the first in an editor group and more than one group is open, the group is automatically locked. Locked groups will only be used for opening editors when explicitly chosen by a user gesture (for example drag and drop), but not by default. Consequently, the active editor in a locked group is less likely to be replaced accidentally with a different editor.
    "workbench.editor.autoLockGroups": {
      "default": false,
      "workbench.editorinputs.sidebysideEditorInput": false,
      "workbench.editor.chatSession": false,
      "workbench.editorinputs.searchEditorInput": false,
      "repl": false,
      "workbench.editors.gettingStartedInput": false,
      "terminalEditor": true,
      "jupyter-notebook": false,
      "imagePreview.previewEditor": false,
      "vscode.audioPreview": false,
      "vscode.videoPreview": false,
      "jsProfileVisualizer.cpuprofile.table": false,
      "jsProfileVisualizer.heapprofile.table": false,
      "jsProfileVisualizer.heapsnapshot.table": false,
      "docxViewer.DocxEdit": false,
      "gc-excelviewer-csv-editor": false,
      "gc-excelviewer-excel-editor": false,
      "hediet.vscode-drawio": false,
      "hediet.vscode-drawio-text": false,
      "decompiled.javaClass": false,
      "markdown-preview-enhanced": false,
      "pdf.preview": false,
      "java.formatterSettingsEditor": false,
      "workbench.input.interactive": false,
      "mainThreadWebview-markdown.preview": false,
      "mainThreadWebview-simpleBrowser.view": true,
      "mainThreadWebview-browserPreview": true
    },
  
    // Controls if the centered layout should automatically resize to maximum width when more than one group is open. Once only one group is open it will resize back to the original centered width.
    "workbench.editor.centeredLayoutAutoResize": true,
  
    // Controls whether the centered layout tries to maintain constant width when the window is resized.
    "workbench.editor.centeredLayoutFixedWidth": false,
  
    // Controls the behavior of empty editor groups when the last tab in the group is closed. When enabled, empty groups will automatically close. When disabled, empty groups will remain part of the grid.
    "workbench.editor.closeEmptyGroups": true,
  
    // Controls whether editors showing a file that was opened during the session should close automatically when getting deleted or renamed by some other process. Disabling this will keep the editor open  on such an event. Note that deleting from within the application will always close the editor and that editors with unsaved changes will never close to preserve your data.
    "workbench.editor.closeOnFileDelete": false,
  
    // Controls whether the custom workbench editor labels should be applied.
    "workbench.editor.customLabels.enabled": true,
  
    // Controls the rendering of the editor label. Each __Item__ is a pattern that matches a file path. Both relative and absolute file paths are supported. The relative path must include the WORKSPACE_FOLDER (e.g `WORKSPACE_FOLDER/src/**.tsx` or `*/src/**.tsx`). Absolute patterns must start with a `/`. In case multiple patterns match, the longest matching path will be picked. Each __Value__ is the template for the rendered editor when the __Item__ matches. Variables are substituted based on the context:
    // - `${dirname}`: name of the folder in which the file is located (e.g. `WORKSPACE_FOLDER/folder/file.txt -> folder`).
    // - `${dirname(N)}`: name of the nth parent folder in which the file is located (e.g. `N=2: WORKSPACE_FOLDER/static/folder/file.txt -> WORKSPACE_FOLDER`). Folders can be picked from the start of the path by using negative numbers (e.g. `N=-1: WORKSPACE_FOLDER/folder/file.txt -> WORKSPACE_FOLDER`). If the __Item__ is an absolute pattern path, the first folder (`N=-1`) refers to the first folder in the absolute path, otherwise it corresponds to the workspace folder.
    // - `${filename}`: name of the file without the file extension (e.g. `WORKSPACE_FOLDER/folder/file.txt -> file`).
    // - `${extname}`: the file extension (e.g. `WORKSPACE_FOLDER/folder/file.txt -> txt`).
    // - `${extname(N)}`: the nth extension of the file separated by '.' (e.g. `N=2: WORKSPACE_FOLDER/folder/file.ext1.ext2.ext3 -> ext1`). Extension can be picked from the start of the extension by using negative numbers (e.g. `N=-1: WORKSPACE_FOLDER/folder/file.ext1.ext2.ext3 -> ext2`).
    // 
    // Example: `"**/static/**/*.html": "${filename} - ${dirname} (${extname})"` will render a file `WORKSPACE_FOLDER/static/folder/file.html` as `file - folder (html)`.
    "workbench.editor.customLabels.patterns": {},
  
    // Controls whether editor file decorations should use badges.
    "workbench.editor.decorations.badges": true,
  
    // Controls whether editor file decorations should use colors.
    "workbench.editor.decorations.colors": true,
  
    // The default editor for files detected as binary. If undefined, the user will be presented with a picker.
    "workbench.editor.defaultBinaryEditor": "",
  
    // Controls how the editor group is resized when double clicking on a tab. This value is ignored when `workbench.editor.showTabs` is not set to `multiple`.
    //  - maximize: All other editor groups are hidden and the current editor group is maximized to take up the entire editor area.
    //  - expand: The editor group takes as much space as possible by making all other editor groups as small as possible.
    //  - off: No editor group is resized when double clicking on a tab.
    "workbench.editor.doubleClickTabToToggleEditorGroupSizes": "expand",
  
    // Controls if editors can be dragged out of the window to open them in a new window. Press and hold the `Alt` key while dragging to toggle this dynamically.
    "workbench.editor.dragToOpenWindow": true,
  
    // Controls where the editor actions are shown.
    //  - default: Show editor actions in the window title bar when `workbench.editor.showTabs` is set to `none`. Otherwise, editor actions are shown in the editor tab bar.
    //  - titleBar: Show editor actions in the window title bar. If `window.customTitleBarVisibility` is set to `never`, editor actions are hidden.
    //  - hidden: Editor actions are not shown.
    "workbench.editor.editorActionsLocation": "default",
  
    // Controls if the empty editor text hint should be visible in the editor.
    "workbench.editor.empty.hint": "text",
  
    // Controls whether preview mode is used when editors open. There is a maximum of one preview mode editor per editor group. This editor displays its filename in italics on its tab or title label and in the Open Editors view. Its contents will be replaced by the next editor opened in preview mode. Making a change in a preview mode editor will persist it, as will a double-click on its label, or the 'Keep Open' option in its label context menu. Opening a file from Explorer with a double-click persists its editor immediately.
    "workbench.editor.enablePreview": true,
  
    // Controls whether editors remain in preview when a code navigation is started from them. Preview editors do not stay open, and are reused until explicitly set to be kept open (via double-click or editing). This value is ignored when `workbench.editor.showTabs` is not set to `multiple`.
    "workbench.editor.enablePreviewFromCodeNavigation": false,
  
    // Controls whether editors opened from Quick Open show as preview editors. Preview editors do not stay open, and are reused until explicitly set to be kept open (via double-click or editing). When enabled, hold Ctrl before selection to open an editor as a non-preview. This value is ignored when `workbench.editor.showTabs` is not set to `multiple`.
    "workbench.editor.enablePreviewFromQuickOpen": false,
  
    // Controls whether editors are closed in most recently used order or from left to right.
    "workbench.editor.focusRecentEditorAfterClose": true,
  
    // Controls whether a top border is drawn on tabs for editors that have unsaved changes. This value is ignored when `workbench.editor.showTabs` is not set to multiple.
    "workbench.editor.highlightModifiedTabs": false,
  
    // Enables use of editor history in language detection. This causes automatic language detection to favor languages that have been recently opened and allows for automatic language detection to operate with smaller inputs.
    "workbench.editor.historyBasedLanguageDetection": true,
  
    // Controls the format of the label for an editor.
    //  - default: Show the name of the file. When tabs are enabled and two files have the same name in one group the distinguishing sections of each file's path are added. When tabs are disabled, the path relative to the workspace folder is shown if the editor is active.
    //  - short: Show the name of the file followed by its directory name.
    //  - medium: Show the name of the file followed by its path relative to the workspace folder.
    //  - long: Show the name of the file followed by its absolute path.
    "workbench.editor.labelFormat": "default",
  
    // Controls whether the language in a text editor is automatically detected unless the language has been explicitly set by the language picker. This can also be scoped by language so you can specify which languages you do not want to be switched off of. This is useful for languages like Markdown that often contain other languages that might trick language detection into thinking it's the embedded language and not Markdown.
    "workbench.editor.languageDetection": true,
  
    // When enabled, shows a Status bar Quick Fix when the editor language doesn't match detected content language.
    "workbench.editor.languageDetectionHints": {
      "untitledEditors": true,
      "notebookEditors": true
    },
  
    // Controls if the number of opened editors should be limited or not. When enabled, less recently used editors will close to make space for newly opening editors.
    "workbench.editor.limit.enabled": false,
  
    // Controls if the maximum number of opened editors should exclude dirty editors for counting towards the configured limit.
    "workbench.editor.limit.excludeDirty": false,
  
    // Controls if the limit of maximum opened editors should apply per editor group or across all editor groups.
    "workbench.editor.limit.perEditorGroup": false,
  
    // Controls the maximum number of opened editors. Use the `workbench.editor.limit.perEditorGroup` setting to control this limit per editor group or across all groups.
    "workbench.editor.limit.value": 10,
  
    // Enables the use of mouse buttons four and five for commands 'Go Back' and 'Go Forward'.
    "workbench.editor.mouseBackForwardToNavigate": true,
  
    // Controls the scope of history navigation in editors for commands such as 'Go Back' and 'Go Forward'.
    //  - default: Navigate across all opened editors and editor groups.
    //  - editorGroup: Navigate only in editors of the active editor group.
    //  - editor: Navigate only in the active editor.
    "workbench.editor.navigationScope": "default",
  
    // Controls where editors open. Select `left` or `right` to open editors to the left or right of the currently active one. Select `first` or `last` to open editors independently from the currently active one.
    "workbench.editor.openPositioning": "right",
  
    // Controls the default direction of editors that are opened side by side (for example, from the Explorer). By default, editors will open on the right hand side of the currently active one. If changed to `down`, the editors will open below the currently active one.
    "workbench.editor.openSideBySideDirection": "right",
  
    // Controls the size of pinned editor tabs. Pinned tabs are sorted to the beginning of all opened tabs and typically do not close until unpinned. This value is ignored when `workbench.editor.showTabs` is not set to `multiple`.
    //  - normal: A pinned tab inherits the look of non pinned tabs.
    //  - compact: A pinned tab will show in a compact form with only icon or first letter of the editor name.
    //  - shrink: A pinned tab shrinks to a compact fixed size showing parts of the editor name.
    "workbench.editor.pinnedTabSizing": "normal",
  
    // When enabled, displays pinned tabs in a separate row above all other tabs. This value is ignored when `workbench.editor.showTabs` is not set to `multiple`.
    "workbench.editor.pinnedTabsOnSeparateRow": false,
  
    // When enabled, a language detection model that takes into account editor history will be given higher precedence.
    "workbench.editor.preferHistoryBasedLanguageDetection": false,
  
    // Controls whether pinned editors should close when keyboard or middle mouse click is used for closing.
    //  - keyboardAndMouse: Always prevent closing the pinned editor when using mouse middle click or keyboard.
    //  - keyboard: Prevent closing the pinned editor when using the keyboard.
    //  - mouse: Prevent closing the pinned editor when using mouse middle click.
    //  - never: Never prevent closing a pinned editor.
    "workbench.editor.preventPinnedEditorClose": "keyboardAndMouse",
  
    // Restores the last editor view state (such as scroll position) when re-opening editors after they have been closed. Editor view state is stored per editor group and discarded when a group closes. Use the `workbench.editor.sharedViewState` setting to use the last known view state across all editor groups in case no previous view state was found for a editor group.
    "workbench.editor.restoreViewState": true,
  
    // Controls whether an editor is revealed in any of the visible groups if opened. If disabled, an editor will prefer to open in the currently active editor group. If enabled, an already opened editor will be revealed instead of opened again in the currently active editor group. Note that there are some cases where this setting is ignored, such as when forcing an editor to open in a specific group or to the side of the currently active group.
    "workbench.editor.revealIfOpen": false,
  
    // Controls whether scrolling over tabs will open them or not. By default tabs will only reveal upon scrolling, but not open. You can press and hold the Shift-key while scrolling to change this behavior for that duration. This value is ignored when `workbench.editor.showTabs` is not set to `multiple`.
    "workbench.editor.scrollToSwitchTabs": false,
  
    // Preserves the most recent editor view state (such as scroll position) across all editor groups and restores that if no specific editor view state is found for the editor group.
    "workbench.editor.sharedViewState": false,
  
    // Controls whether opened editors should show with an icon or not. This requires a file icon theme to be enabled as well.
    "workbench.editor.showIcons": true,
  
    // Controls whether opened editors should show as individual tabs, one single large tab or if the title area should not be shown.
    //  - multiple: Each editor is displayed as a tab in the editor title area.
    //  - single: The active editor is displayed as a single large tab in the editor title area.
    //  - none: The editor title area is not displayed.
    "workbench.editor.showTabs": "multiple",
  
    // Controls the layout for when an editor is split in an editor group to be either vertical or horizontal.
    //  - vertical: Editors are positioned from top to bottom.
    //  - horizontal: Editors are positioned from left to right.
    "workbench.editor.splitInGroupLayout": "horizontal",
  
    // Controls if editor groups can be split from drag and drop operations by dropping an editor or file on the edges of the editor area.
    "workbench.editor.splitOnDragAndDrop": true,
  
    // Controls the size of editor groups when splitting them.
    //  - auto: Splits the active editor group to equal parts, unless all editor groups are already in equal parts. In that case, splits all the editor groups to equal parts.
    //  - distribute: Splits all the editor groups to equal parts.
    //  - split: Splits the active editor group to equal parts.
    "workbench.editor.splitSizing": "auto",
  
    // Controls the visibility of the tab close action button.
    "workbench.editor.tabActionCloseVisibility": true,
  
    // Controls the position of the editor's tabs action buttons (close, unpin). This value is ignored when `workbench.editor.showTabs` is not set to `multiple`.
    "workbench.editor.tabActionLocation": "right",
  
    // Controls the visibility of the tab unpin action button.
    "workbench.editor.tabActionUnpinVisibility": true,
  
    // Controls the size of editor tabs. This value is ignored when `workbench.editor.showTabs` is not set to `multiple`.
    //  - fit: Always keep tabs large enough to show the full editor label.
    //  - shrink: Allow tabs to get smaller when the available space is not enough to show all tabs at once.
    //  - fixed: Make all tabs the same size, while allowing them to get smaller when the available space is not enough to show all tabs at once.
    "workbench.editor.tabSizing": "fit",
  
    // Controls the maximum width of tabs when `workbench.editor.tabSizing` size is set to `fixed`.
    "workbench.editor.tabSizingFixedMaxWidth": 160,
  
    // Controls the minimum width of tabs when `workbench.editor.tabSizing` size is set to `fixed`.
    "workbench.editor.tabSizingFixedMinWidth": 50,
  
    // Controls the height of the scrollbars used for tabs and breadcrumbs in the editor title area.
    //  - default: The default size.
    //  - large: Increases the size, so it can be grabbed more easily with the mouse.
    "workbench.editor.titleScrollbarSizing": "default",
  
    // Controls the format of the label for an untitled editor.
    //  - content: The name of the untitled file is derived from the contents of its first line unless it has an associated file path. It will fallback to the name in case the line is empty or contains no word characters.
    //  - name: The name of the untitled file is not derived from the contents of the file.
    "workbench.editor.untitled.labelFormat": "content",
  
    // Controls whether tabs should be wrapped over multiple lines when exceeding available space or whether a scrollbar should appear instead. This value is ignored when `workbench.editor.showTabs` is not set to '`multiple`'.
    "workbench.editor.wrapTabs": false,
  
    // Configure [glob patterns](https://aka.ms/vscode-glob-patterns) to editors (for example `"*.hex": "hexEditor.hexedit"`). These have precedence over the default behavior.
    "workbench.editorAssociations": {},
  
    // Controls the minimum size of a file in MB before asking for confirmation when opening in the editor. Note that this setting may not apply to all editor types and environments.
    "workbench.editorLargeFileConfirmation": 1024,
  
    // Fetches experiments to run from a Microsoft online service.
    "workbench.enableExperiments": true,
  
    // Controls whether to automatically store available working changes in the cloud for the current workspace. This setting has no effect in the web.
    //  - onShutdown: Automatically store current working changes in the cloud on window close.
    //  - off: Never attempt to automatically store working changes in the cloud.
    "workbench.experimental.cloudChanges.autoStore": "off",
  
    // Controls whether to surface cloud changes which partially match the current session.
    "workbench.experimental.cloudChanges.partialMatches.enabled": false,
  
    // Controls whether to render the Share action next to the command center when `window.commandCenter` is `true`.
    "workbench.experimental.share.enabled": false,
  
    // Configure the browser to use for opening http or https links externally. This can either be the name of the browser (`edge`, `chrome`, `firefox`) or an absolute path to the browser's executable. Will use the system default if not set.
    "workbench.externalBrowser": "",
  
    // Configure the opener to use for external URIs (http, https).
    "workbench.externalUriOpeners": {},
  
    // Controls the delay in milliseconds after which the hover is shown for workbench items (ex. some extension provided tree view items). Already visible items may require a refresh before reflecting this setting change.
    "workbench.hover.delay": 300,
  
    // Specifies the file icon theme used in the workbench or 'null' to not show any file icons.
    //  - null: No file icons
    //  - vs-minimal
    //  - vs-seti
    //  - symbols
    //  - atom-font-icons
    //  - material-icon-theme
    "workbench.iconTheme": "symbols",
  
    // Controls whether the layout control is shown in the custom title bar. This setting only has an effect when `window.customTitleBarVisibility` is not set to `never`.
    "workbench.layoutControl.enabled": true,
  
    // Controls whether the layout control in the custom title bar is displayed as a single menu button or with multiple UI toggles.
    //  - menu: Shows a single button with a dropdown of layout options.
    //  - toggles: Shows several buttons for toggling the visibility of the panels and side bar.
    //  - both: Shows both the dropdown and toggle buttons.
    "workbench.layoutControl.type": "both",
  
    // Controls the type of matching used when searching lists and trees in the workbench.
    //  - fuzzy: Use fuzzy matching when searching.
    //  - contiguous: Use contiguous matching when searching.
    "workbench.list.defaultFindMatchType": "fuzzy",
  
    // Controls the default find mode for lists and trees in the workbench.
    //  - highlight: Highlight elements when searching. Further up and down navigation will traverse only the highlighted elements.
    //  - filter: Filter elements when searching.
    "workbench.list.defaultFindMode": "highlight",
  
    // Scrolling speed multiplier when pressing `Alt`.
    "workbench.list.fastScrollSensitivity": 5,
  
    // Controls whether lists and trees support horizontal scrolling in the workbench. Warning: turning on this setting has a performance implication.
    "workbench.list.horizontalScrolling": false,
  
    // Please use 'workbench.list.defaultFindMode' and	'workbench.list.typeNavigationMode' instead.
    // Controls the keyboard navigation style for lists and trees in the workbench. Can be simple, highlight and filter.
    //  - simple: Simple keyboard navigation focuses elements which match the keyboard input. Matching is done only on prefixes.
    //  - highlight: Highlight keyboard navigation highlights elements which match the keyboard input. Further up and down navigation will traverse only the highlighted elements.
    //  - filter: Filter keyboard navigation will filter out and hide all the elements which do not match the keyboard input.
    "workbench.list.keyboardNavigation": "highlight",
  
    // A multiplier to be used on the `deltaX` and `deltaY` of mouse wheel scroll events.
    "workbench.list.mouseWheelScrollSensitivity": 1,
  
    // The modifier to be used to add an item in trees and lists to a multi-selection with the mouse (for example in the explorer, open editors and scm view). The 'Open to Side' mouse gestures - if supported - will adapt such that they do not conflict with the multiselect modifier.
    //  - ctrlCmd: Maps to `Control` on Windows and Linux and to `Command` on macOS.
    //  - alt: Maps to `Alt` on Windows and Linux and to `Option` on macOS.
    "workbench.list.multiSelectModifier": "ctrlCmd",
  
    // Controls how to open items in trees and lists using the mouse (if supported). Note that some trees and lists might choose to ignore this setting if it is not applicable.
    "workbench.list.openMode": "singleClick",
  
    // Controls whether clicks in the scrollbar scroll page by page.
    "workbench.list.scrollByPage": false,
  
    // Controls whether lists and trees have smooth scrolling.
    "workbench.list.smoothScrolling": false,
  
    // Controls how type navigation works in lists and trees in the workbench. When set to `trigger`, type navigation begins once the `list.triggerTypeNavigation` command is run.
    "workbench.list.typeNavigationMode": "automatic",
  
    // Controls whether local file history is enabled. When enabled, the file contents of an editor that is saved will be stored to a backup location to be able to restore or review the contents later. Changing this setting has no effect on existing local file history entries.
    "workbench.localHistory.enabled": true,
  
    // Configure paths or [glob patterns](https://aka.ms/vscode-glob-patterns) for excluding files from the local file history. Glob patterns are always evaluated relative to the path of the workspace folder unless they are absolute paths. Changing this setting has no effect on existing local file history entries.
    "workbench.localHistory.exclude": {},
  
    // Controls the maximum number of local file history entries per file. When the number of local file history entries exceeds this number for a file, the oldest entries will be discarded.
    "workbench.localHistory.maxFileEntries": 50,
  
    // Controls the maximum size of a file (in KB) to be considered for local file history. Files that are larger will not be added to the local file history. Changing this setting has no effect on existing local file history entries.
    "workbench.localHistory.maxFileSize": 256,
  
    // Configure an interval in seconds during which the last entry in local file history is replaced with the entry that is being added. This helps reduce the overall number of entries that are added, for example when auto save is enabled. This setting is only applied to entries that have the same source of origin. Changing this setting has no effect on existing local file history entries.
    "workbench.localHistory.mergeWindow": 10,
  
    // Controls whether the navigation control is shown in the custom title bar. This setting only has an effect when `window.customTitleBarVisibility` is not set to `never`.
    "workbench.navigationControl.enabled": true,
  
    // Controls the default location of the panel (Terminal, Debug Console, Output, Problems) in a new workspace. It can either show at the bottom, top, right, or left of the editor area.
    "workbench.panel.defaultLocation": "bottom",
  
    // Controls whether the panel opens maximized. It can either always open maximized, never open maximized, or open to the last state it was in before being closed.
    //  - always: Always maximize the panel when opening it.
    //  - never: Never maximize the panel when opening it. The panel will open un-maximized.
    //  - preserve: Open the panel to the state that it was in, before it was closed.
    "workbench.panel.opensMaximized": "preserve",
  
    // Controls whether activity items in the panel title are shown as label or icon.
    "workbench.panel.showLabels": true,
  
    // Specifies the color theme when system color mode is dark and `window.autoDetectColorScheme` is enabled.
    "workbench.preferredDarkColorTheme": "Default Dark Modern",
  
    // Specifies the color theme when in high contrast dark mode and `window.autoDetectHighContrast` is enabled.
    "workbench.preferredHighContrastColorTheme": "Default High Contrast",
  
    // Specifies the color theme when in high contrast light mode and `window.autoDetectHighContrast` is enabled.
    "workbench.preferredHighContrastLightColorTheme": "Default High Contrast Light",
  
    // Specifies the color theme when system color mode is light and `window.autoDetectColorScheme` is enabled.
    "workbench.preferredLightColorTheme": "Default Light Modern",
  
    // Specifies the product icon theme used.
    //  - Default: Default
    "workbench.productIconTheme": "Default",
  
    // Controls whether Quick Open should close automatically once it loses focus.
    "workbench.quickOpen.closeOnFocusLost": true,
  
    // Controls whether the last typed input to Quick Open should be restored when opening it the next time.
    "workbench.quickOpen.preserveInput": false,
  
    // Controls whether the workbench should render with fewer animations.
    //  - on: Always render with reduced motion.
    //  - off: Do not render with reduced motion
    //  - auto: Render with reduced motion based on OS configuration.
    "workbench.reduceMotion": "auto",
  
    // When enabled, remote extensions recommendations will be shown in the Remote Indicator menu.
    "workbench.remoteIndicator.showExtensionRecommendations": true,
  
    // Controls the hover feedback delay in milliseconds of the dragging area in between views/editors.
    "workbench.sash.hoverDelay": 300,
  
    // Controls the feedback area size in pixels of the dragging area in between views/editors. Set it to a larger value if you feel it's hard to resize views using the mouse.
    "workbench.sash.size": 4,
  
    // Configure settings to be applied for all profiles.
    "workbench.settings.applyToAllProfiles": [],
  
    // Determines which settings editor to use by default.
    //  - ui: Use the settings UI editor.
    //  - json: Use the JSON file editor.
    "workbench.settings.editor": "ui",
  
    // Controls whether to enable the natural language search mode for settings. The natural language search is provided by a Microsoft online service.
    "workbench.settings.enableNaturalLanguageSearch": true,
  
    // Controls whether opening keybinding settings also opens an editor showing all default keybindings.
    "workbench.settings.openDefaultKeybindings": false,
  
    // Controls whether opening settings also opens an editor showing all default settings.
    "workbench.settings.openDefaultSettings": false,
  
    // Controls the behavior of the Settings editor Table of Contents while searching. If this setting is being changed in the Settings editor, the setting will take effect after the search query is modified.
    //  - hide: Hide the Table of Contents while searching.
    //  - filter: Filter the Table of Contents to just categories that have matching settings. Clicking on a category will filter the results to that category.
    "workbench.settings.settingsSearchTocBehavior": "filter",
  
    // Controls whether to use the split JSON editor when editing settings as JSON.
    "workbench.settings.useSplitJSON": false,
  
    // Controls whether to use an experimental ranking algorithm for search results in the Settings editor. The newer algorithm is still in development and aims to show fewer and more relevant results.
    "workbench.settings.useWeightedKeySearch": false,
  
    // Controls the location of the primary side bar and activity bar. They can either show on the left or right of the workbench. The secondary side bar will show on the opposite side of the workbench.
    "workbench.sideBar.location": "left",
  
    // Controls which editor is shown at startup, if none are restored from the previous session.
    //  - none: Start without an editor.
    //  - welcomePage: Open the Welcome page, with content to aid in getting started with Windsurf and extensions.
    //  - readme: Open the README when opening a folder that contains one, fallback to 'welcomePage' otherwise. Note: This is only observed as a global configuration, it will be ignored if set in a workspace or folder configuration.
    //  - newUntitledFile: Open a new untitled text file (only applies when opening an empty window).
    //  - welcomePageInEmptyWorkbench: Open the Welcome page when opening an empty workbench.
    //  - terminal: Open a new terminal in the editor area.
    "workbench.startupEditor": "welcomePage",
  
    // Controls the visibility of the status bar at the bottom of the workbench.
    "workbench.statusBar.visible": true,
  
    // When enabled, will show the watermark tips when no editor is open.
    "workbench.tips.enabled": true,
  
    // Controls whether sticky scrolling is enabled in trees.
    "workbench.tree.enableStickyScroll": true,
  
    // Controls how tree folders are expanded when clicking the folder names. Note that some trees and lists might choose to ignore this setting if it is not applicable.
    "workbench.tree.expandMode": "singleClick",
  
    // Controls tree indentation in pixels.
    "workbench.tree.indent": 8,
  
    // Controls whether the tree should render indent guides.
    "workbench.tree.renderIndentGuides": "onHover",
  
    // Controls the number of sticky elements displayed in the tree when `workbench.tree.enableStickyScroll` is enabled.
    "workbench.tree.stickyScrollMaxItemCount": 7,
  
    // When enabled, trusted domain prompts will appear when opening links in trusted workspaces.
    "workbench.trustedDomains.promptInTrustedWorkspace": false,
  
    // Controls the visibility of view header actions. View header actions may either be always visible, or only visible when that view is focused or hovered over.
    "workbench.view.alwaysShowHeaderActions": false,
  
    // If an extension requests a hidden view to be shown, display a clickable status bar indicator instead.
    "workbench.view.showQuietly": {},
  
    // Deprecated, use the global `workbench.reduceMotion`.
    // When enabled, reduce motion in welcome page.
    "workbench.welcomePage.preferReducedMotion": false,
  
    // When enabled, an extension's walkthrough will open upon install of the extension.
    "workbench.welcomePage.walkthroughs.openOnInstall": true
  
  },
  {
    // If enabled, will automatically select a color theme based on the system color mode. If the system color mode is dark, `workbench.preferredDarkColorTheme#` is used, else `#workbench.preferredLightColorTheme`.
    "window.autoDetectColorScheme": false,
  
    // If enabled, will automatically change to high contrast theme if the OS is using a high contrast theme. The high contrast theme to use is specified by `workbench.preferredHighContrastColorTheme#` and `#workbench.preferredHighContrastLightColorTheme`.
    "window.autoDetectHighContrast": true,
  
    // Controls whether closing the last editor should also close the window. This setting only applies for windows that do not show folders.
    "window.closeWhenEmpty": false,
  
    // Controls whether to show a confirmation dialog before closing a window or quitting the application.
    //  - always: Always ask for confirmation.
    //  - keyboardOnly: Only ask for confirmation if a keybinding was used.
    //  - never: Never explicitly ask for confirmation.
    "window.confirmBeforeClose": "never",
  
    // Controls whether a confirmation dialog shows asking to save or discard an opened untitled workspace in the window when switching to another workspace. Disabling the confirmation dialog will always discard the untitled workspace.
    "window.confirmSaveUntitledWorkspace": true,
  
    // Controls whether the menu bar will be focused by pressing the Alt-key. This setting has no effect on toggling the menu bar with the Alt-key.
    "window.customMenuBarAltFocus": true,
  
    // Adjust when the custom title bar should be shown. The custom title bar can be hidden when in full screen mode with `windowed`. The custom title bar can only be hidden in non full screen mode with `never` when `window.titleBarStyle` is set to `native`.
    //  - auto: Automatically changes custom title bar visibility.
    //  - windowed: Hide custom titlebar in full screen. When not in full screen, automatically change custom title bar visibility.
    //  - never: Hide custom titlebar when `window.titleBarStyle` is set to `native`.
    "window.customTitleBarVisibility": "auto",
  
    // Adjust the appearance of dialog windows.
    "window.dialogStyle": "native",
  
    // If enabled, this setting will close the window when the application icon in the title bar is double-clicked. The window will not be able to be dragged by the icon. This setting is effective only if `window.titleBarStyle` is set to `custom`.
    "window.doubleClickIconToClose": false,
  
    // Controls whether the main menus can be opened via Alt-key shortcuts. Disabling mnemonics allows to bind these Alt-key shortcuts to editor commands instead.
    "window.enableMenuBarMnemonics": true,
  
    // Control the visibility of the menu bar. A setting of 'toggle' means that the menu bar is hidden and a single press of the Alt key will show it. A setting of 'compact' will move the menu into the side bar.
    //  - classic: Menu is displayed at the top of the window and only hidden in full screen mode.
    //  - visible: Menu is always visible at the top of the window even in full screen mode.
    //  - toggle: Menu is hidden but can be displayed at the top of the window via the Alt key.
    //  - hidden: Menu is always hidden.
    //  - compact: Menu is displayed as a compact button in the side bar. This value is ignored when `window.titleBarStyle` is `native`.
    "window.menuBarVisibility": "classic",
  
    // Controls the dimensions of opening a new window when at least one window is already opened. Note that this setting does not have an impact on the first window that is opened. The first window will always restore the size and location as you left it before closing.
    //  - default: Open new windows in the center of the screen.
    //  - inherit: Open new windows with same dimension as last active one.
    //  - offset: Open new windows with same dimension as last active one with an offset position.
    //  - maximized: Open new windows maximized.
    //  - fullscreen: Open new windows in full screen mode.
    "window.newWindowDimensions": "default",
  
    // Specifies the profile to use when opening a new window. If a profile name is provided, the new window will use that profile. If no profile name is provided, the new window will use the profile of the active window or the Default profile if no active window exists.
    "window.newWindowProfile": null,
  
    // Controls whether files should open in a new window when using a command line or file dialog.
    // Note that there can still be cases where this setting is ignored (e.g. when using the `--new-window` or `--reuse-window` command line option).
    //  - on: Files will open in a new window.
    //  - off: Files will open in the window with the files' folder open or the last active window.
    //  - default: Files will open in a new window unless picked from within the application (e.g. via the File menu).
    "window.openFilesInNewWindow": "off",
  
    // Controls whether folders should open in a new window or replace the last active window.
    // Note that there can still be cases where this setting is ignored (e.g. when using the `--new-window` or `--reuse-window` command line option).
    //  - on: Folders will open in a new window.
    //  - off: Folders will replace the last active window.
    //  - default: Folders will open in a new window unless a folder is picked from within the application (e.g. via the File menu).
    "window.openFoldersInNewWindow": "default",
  
    // Controls whether a new empty window should open when starting a second instance without arguments or if the last running instance should get focus.
    // Note that there can still be cases where this setting is ignored (e.g. when using the `--new-window` or `--reuse-window` command line option).
    //  - on: Open a new empty window.
    //  - off: Focus the last active running instance.
    "window.openWithoutArgumentsInNewWindow": "on",
  
    // Controls whether a window should restore to full screen mode if it was exited in full screen mode.
    "window.restoreFullscreen": false,
  
    // Controls how windows and editors within are being restored when opening.
    //  - preserve: Always reopen all windows. If a folder or workspace is opened (e.g. from the command line) it opens as a new window unless it was opened before. If files are opened they will open in one of the restored windows together with editors that were previously opened.
    //  - all: Reopen all windows unless a folder, workspace or file is opened (e.g. from the command line). If a file is opened, it will replace any of the editors that were previously opened in a window.
    //  - folders: Reopen all windows that had folders or workspaces opened unless a folder, workspace or file is opened (e.g. from the command line). If a file is opened, it will replace any of the editors that were previously opened in a window.
    //  - one: Reopen the last active window unless a folder, workspace or file is opened (e.g. from the command line). If a file is opened, it will replace any of the editors that were previously opened in a window.
    //  - none: Never reopen a window. Unless a folder or workspace is opened (e.g. from the command line), an empty window will appear.
    "window.restoreWindows": "all",
  
    // Controls the window title based on the current context such as the opened workspace or active editor. Variables are substituted based on the context:
    // - `${activeEditorShort}`: the file name (e.g. myFile.txt).
    // - `${activeEditorMedium}`: the path of the file relative to the workspace folder (e.g. myFolder/myFileFolder/myFile.txt).
    // - `${activeEditorLong}`: the full path of the file (e.g. /Users/Development/myFolder/myFileFolder/myFile.txt).
    // - `${activeFolderShort}`: the name of the folder the file is contained in (e.g. myFileFolder).
    // - `${activeFolderMedium}`: the path of the folder the file is contained in, relative to the workspace folder (e.g. myFolder/myFileFolder).
    // - `${activeFolderLong}`: the full path of the folder the file is contained in (e.g. /Users/Development/myFolder/myFileFolder).
    // - `${folderName}`: name of the workspace folder the file is contained in (e.g. myFolder).
    // - `${folderPath}`: file path of the workspace folder the file is contained in (e.g. /Users/Development/myFolder).
    // - `${rootName}`: name of the workspace with optional remote name and workspace indicator if applicable (e.g. myFolder, myRemoteFolder [SSH] or myWorkspace (Workspace)).
    // - `${rootNameShort}`: shortened name of the workspace without suffixes (e.g. myFolder, myRemoteFolder or myWorkspace).
    // - `${rootPath}`: file path of the opened workspace or folder (e.g. /Users/Development/myWorkspace).
    // - `${profileName}`: name of the profile in which the workspace is opened (e.g. Data Science (Profile)). Ignored if default profile is used.
    // - `${appName}`: e.g. Windsurf.
    // - `${remoteName}`: e.g. SSH
    // - `${dirty}`: an indicator for when the active editor has unsaved changes.
    // - `${focusedView}`: the name of the view that is currently focused.
    // - `${activeRepositoryName}`: the name of the active repository (e.g. vscode).
    // - `${activeRepositoryBranchName}`: the name of the active branch in the active repository (e.g. main).
    // - `${separator}`: a conditional separator (" - ") that only shows when surrounded by variables with values or static text.
    "window.title": "${rootName}${separator}${profileName}${separator}${appName}${separator}${activeEditorShort}${dirty}",
  
    // Adjust the appearance of the window title bar to be native by the OS or custom. On Linux and Windows, this setting also affects the application and context menu appearances. Changes require a full restart to apply.
    "window.titleBarStyle": "custom",
  
    // Separator used by `window.title`.
    "window.titleSeparator": " - ",
  
    // Adjust the default zoom level for all windows. Each increment above `0` (e.g. `1`) or below (e.g. `-1`) represents zooming `20%` larger or smaller. You can also enter decimals to adjust the zoom level with a finer granularity. See `window.zoomPerWindow` for configuring if the 'Zoom In' and 'Zoom Out' commands apply the zoom level to all windows or only the active window.
    "window.zoomLevel": 0,
  
    // Controls if the 'Zoom In' and 'Zoom Out' commands apply the zoom level to all windows or only the active window. See `window.zoomLevel` for configuring a default zoom level for all windows.
    "window.zoomPerWindow": true
  
  },
  {
    // Configure [glob patterns](https://aka.ms/vscode-glob-patterns) of file associations to languages (for example `"*.extension": "html"`). Patterns will match on the absolute path of a file if they contain a path separator and will match on the name of the file otherwise. These have precedence over the default associations of the languages installed.
    "files.associations": {},
  
    // When enabled, the editor will attempt to guess the character set encoding when opening files. This setting can also be configured per language. Note, this setting is not respected by text search. Only `files.encoding` is respected.
    "files.autoGuessEncoding": false,
  
    // Controls [auto save](https://code.visualstudio.com/docs/editor/codebasics#_save-auto-save) of editors that have unsaved changes.
    //  - off: An editor with changes is never automatically saved.
    //  - afterDelay: An editor with changes is automatically saved after the configured `files.autoSaveDelay`.
    //  - onFocusChange: An editor with changes is automatically saved when the editor loses focus.
    //  - onWindowChange: An editor with changes is automatically saved when the window loses focus.
    "files.autoSave": "off",
  
    // Controls the delay in milliseconds after which an editor with unsaved changes is saved automatically. Only applies when `files.autoSave` is set to `afterDelay`.
    "files.autoSaveDelay": 1000,
  
    // When enabled, will limit [auto save](https://code.visualstudio.com/docs/editor/codebasics#_save-auto-save) of editors to files that have no errors reported in them at the time the auto save is triggered. Only applies when `files.autoSave` is enabled.
    "files.autoSaveWhenNoErrors": false,
  
    // When enabled, will limit [auto save](https://code.visualstudio.com/docs/editor/codebasics#_save-auto-save) of editors to files that are inside the opened workspace. Only applies when `files.autoSave` is enabled.
    "files.autoSaveWorkspaceFilesOnly": false,
  
    // List of character set encodings that the editor should attempt to guess in the order they are listed. In case it cannot be determined, `files.encoding` is respected
    //  - utf8: UTF-8
    //  - utf16le: UTF-16 LE
    //  - utf16be: UTF-16 BE
    //  - windows1252: Western (Windows 1252)
    //  - windows1250: Central European (Windows 1250)
    //  - iso88592: Central European (ISO 8859-2)
    //  - windows1251: Cyrillic (Windows 1251)
    //  - cp866: Cyrillic (CP 866)
    //  - cp1125: Cyrillic (CP 1125)
    //  - iso88595: Cyrillic (ISO 8859-5)
    //  - koi8r: Cyrillic (KOI8-R)
    //  - windows1253: Greek (Windows 1253)
    //  - iso88597: Greek (ISO 8859-7)
    //  - windows1255: Hebrew (Windows 1255)
    //  - iso88598: Hebrew (ISO 8859-8)
    //  - cp950: Traditional Chinese (Big5)
    //  - shiftjis: Japanese (Shift JIS)
    //  - eucjp: Japanese (EUC-JP)
    //  - euckr: Korean (EUC-KR)
    //  - gb2312: Simplified Chinese (GB 2312)
    "files.candidateGuessEncodings": [],
  
    // The default language identifier that is assigned to new files. If configured to `${activeEditorLanguage}`, will use the language identifier of the currently active text editor if any.
    "files.defaultLanguage": "",
  
    // Default path for file dialogs, overriding user's home path. Only used in the absence of a context-specific path, such as most recently opened file or folder.
    "files.dialog.defaultPath": "",
  
    // Moves files/folders to the OS trash (recycle bin on Windows) when deleting. Disabling this will delete files/folders permanently.
    "files.enableTrash": true,
  
    // The default character set encoding to use when reading and writing files. This setting can also be configured per language.
    //  - utf8: UTF-8
    //  - utf8bom: UTF-8 with BOM
    //  - utf16le: UTF-16 LE
    //  - utf16be: UTF-16 BE
    //  - windows1252: Western (Windows 1252)
    //  - iso88591: Western (ISO 8859-1)
    //  - iso88593: Western (ISO 8859-3)
    //  - iso885915: Western (ISO 8859-15)
    //  - macroman: Western (Mac Roman)
    //  - cp437: DOS (CP 437)
    //  - windows1256: Arabic (Windows 1256)
    //  - iso88596: Arabic (ISO 8859-6)
    //  - windows1257: Baltic (Windows 1257)
    //  - iso88594: Baltic (ISO 8859-4)
    //  - iso885914: Celtic (ISO 8859-14)
    //  - windows1250: Central European (Windows 1250)
    //  - iso88592: Central European (ISO 8859-2)
    //  - cp852: Central European (CP 852)
    //  - windows1251: Cyrillic (Windows 1251)
    //  - cp866: Cyrillic (CP 866)
    //  - cp1125: Cyrillic (CP 1125)
    //  - iso88595: Cyrillic (ISO 8859-5)
    //  - koi8r: Cyrillic (KOI8-R)
    //  - koi8u: Cyrillic (KOI8-U)
    //  - iso885913: Estonian (ISO 8859-13)
    //  - windows1253: Greek (Windows 1253)
    //  - iso88597: Greek (ISO 8859-7)
    //  - windows1255: Hebrew (Windows 1255)
    //  - iso88598: Hebrew (ISO 8859-8)
    //  - iso885910: Nordic (ISO 8859-10)
    //  - iso885916: Romanian (ISO 8859-16)
    //  - windows1254: Turkish (Windows 1254)
    //  - iso88599: Turkish (ISO 8859-9)
    //  - windows1258: Vietnamese (Windows 1258)
    //  - gbk: Simplified Chinese (GBK)
    //  - gb18030: Simplified Chinese (GB18030)
    //  - cp950: Traditional Chinese (Big5)
    //  - big5hkscs: Traditional Chinese (Big5-HKSCS)
    //  - shiftjis: Japanese (Shift JIS)
    //  - eucjp: Japanese (EUC-JP)
    //  - euckr: Korean (EUC-KR)
    //  - windows874: Thai (Windows 874)
    //  - iso885911: Latin/Thai (ISO 8859-11)
    //  - koi8ru: Cyrillic (KOI8-RU)
    //  - koi8t: Tajik (KOI8-T)
    //  - gb2312: Simplified Chinese (GB 2312)
    //  - cp865: Nordic DOS (CP 865)
    //  - cp850: Western European DOS (CP 850)
    "files.encoding": "utf8",
  
    // The default end of line character.
    //  - \n: LF
    //  - \r\n: CRLF
    //  - auto: Uses operating system specific end of line character.
    "files.eol": "auto",
  
    // Configure [glob patterns](https://aka.ms/vscode-glob-patterns) for excluding files and folders. For example, the File Explorer decides which files and folders to show or hide based on this setting. Refer to the `search.exclude#` setting to define search-specific excludes. Refer to the `#explorer.excludeGitIgnore` setting for ignoring files based on your `.gitignore`.
    "files.exclude": {
      "**/.git": true,
      "**/.svn": true,
      "**/.hg": true,
      "**/CVS": true,
      "**/.DS_Store": true,
      "**/Thumbs.db": true
    },
  
    // [Hot Exit](https://aka.ms/vscode-hot-exit) controls whether unsaved files are remembered between sessions, allowing the save prompt when exiting the editor to be skipped.
    //  - off: Disable hot exit. A prompt will show when attempting to close a window with editors that have unsaved changes.
    //  - onExit: Hot exit will be triggered when the last window is closed on Windows/Linux or when the `workbench.action.quit` command is triggered (command palette, keybinding, menu). All windows without folders opened will be restored upon next launch. A list of previously opened windows with unsaved files can be accessed via `File > Open Recent > More...`
    //  - onExitAndWindowClose: Hot exit will be triggered when the last window is closed on Windows/Linux or when the `workbench.action.quit` command is triggered (command palette, keybinding, menu), and also for any window with a folder opened regardless of whether it's the last window. All windows without folders opened will be restored upon next launch. A list of previously opened windows with unsaved files can be accessed via `File > Open Recent > More...`
    "files.hotExit": "onExit",
  
    // When enabled, insert a final new line at the end of the file when saving it.
    "files.insertFinalNewline": false,
  
    // Timeout in milliseconds after which file participants for create, rename, and delete are cancelled. Use `0` to disable participants.
    "files.participants.timeout": 60000,
  
    // Configure paths or [glob patterns](https://aka.ms/vscode-glob-patterns) to exclude from being marked as read-only if they match as a result of the `files.readonlyInclude` setting. Glob patterns are always evaluated relative to the path of the workspace folder unless they are absolute paths. Files from readonly file system providers will always be read-only independent of this setting.
    "files.readonlyExclude": {},
  
    // Marks files as read-only when their file permissions indicate as such. This can be overridden via `files.readonlyInclude#` and `#files.readonlyExclude` settings.
    "files.readonlyFromPermissions": false,
  
    // Configure paths or [glob patterns](https://aka.ms/vscode-glob-patterns) to mark as read-only. Glob patterns are always evaluated relative to the path of the workspace folder unless they are absolute paths. You can exclude matching paths via the `files.readonlyExclude` setting. Files from readonly file system providers will always be read-only independent of this setting.
    "files.readonlyInclude": {},
  
    // Controls if files that were part of a refactoring are saved automatically
    "files.refactoring.autoSave": true,
  
    // Restore the undo stack when a file is reopened.
    "files.restoreUndoStack": true,
  
    // A save conflict can occur when a file is saved to disk that was changed by another program in the meantime. To prevent data loss, the user is asked to compare the changes in the editor with the version on disk. This setting should only be changed if you frequently encounter save conflict errors and may result in data loss if used without caution.
    //  - askUser: Will refuse to save and ask for resolving the save conflict manually.
    //  - overwriteFileOnDisk: Will resolve the save conflict by overwriting the file on disk with the changes in the editor.
    "files.saveConflictResolution": "askUser",
  
    // Enables the simple file dialog for opening and saving files and folders. The simple file dialog replaces the system file dialog when enabled.
    "files.simpleDialog.enable": false,
  
    // When enabled, will trim all new lines after the final new line at the end of the file when saving it.
    "files.trimFinalNewlines": false,
  
    // When enabled, will trim trailing whitespace when saving a file.
    "files.trimTrailingWhitespace": false,
  
    // When enabled, trailing whitespace will be removed from multiline strings and regexes will be removed on save or when executing 'editor.action.trimTrailingWhitespace'. This can cause whitespace to not be trimmed from lines when there isn't up-to-date token information.
    "files.trimTrailingWhitespaceInRegexAndStrings": true,
  
    // Configure paths or [glob patterns](https://aka.ms/vscode-glob-patterns) to exclude from file watching. Paths can either be relative to the watched folder or absolute. Glob patterns are matched relative from the watched folder. When you experience the file watcher process consuming a lot of CPU, make sure to exclude large folders that are of less interest (such as build output folders).
    "files.watcherExclude": {
      "**/.git/objects/**": true,
      "**/.git/subtree-cache/**": true,
      "**/.hg/store/**": true
    },
  
    // Configure extra paths to watch for changes inside the workspace. By default, all workspace folders will be watched recursively, except for folders that are symbolic links. You can explicitly add absolute or relative paths to support watching folders that are symbolic links. Relative paths will be resolved to an absolute path using the currently opened workspace.
    "files.watcherInclude": []
  
  },
  {
    // Controls the font size (in pixels) of the screencast mode keyboard.
    "screencastMode.fontSize": 56,
  
    // Options for customizing the keyboard overlay in screencast mode.
    "screencastMode.keyboardOptions": {
      "showKeys": true,
      "showKeybindings": true,
      "showCommands": true,
      "showCommandGroups": false,
      "showSingleEditorCursorMoves": true
    },
  
    // Controls how long (in milliseconds) the keyboard overlay is shown in screencast mode.
    "screencastMode.keyboardOverlayTimeout": 800,
  
    // Controls the color in hex (#RGB, #RGBA, #RRGGBB or #RRGGBBAA) of the mouse indicator in screencast mode.
    "screencastMode.mouseIndicatorColor": "#FF0000",
  
    // Controls the size (in pixels) of the mouse indicator in screencast mode.
    "screencastMode.mouseIndicatorSize": 20,
  
    // Controls the vertical offset of the screencast mode overlay from the bottom as a percentage of the workbench height.
    "screencastMode.verticalOffset": 20
  
  },
  {
    // Controls whether turning on Zen Mode also centers the layout.
    "zenMode.centerLayout": true,
  
    // Controls whether turning on Zen Mode also puts the workbench into full screen mode.
    "zenMode.fullScreen": true,
  
    // Controls whether turning on Zen Mode also hides the activity bar either at the left or right of the workbench.
    "zenMode.hideActivityBar": true,
  
    // Controls whether turning on Zen Mode also hides the editor line numbers.
    "zenMode.hideLineNumbers": true,
  
    // Controls whether turning on Zen Mode also hides the status bar at the bottom of the workbench.
    "zenMode.hideStatusBar": true,
  
    // Controls whether a window should restore to Zen Mode if it was exited in Zen Mode.
    "zenMode.restore": true,
  
    // Controls whether turning on Zen Mode should show multiple editor tabs, a single editor tab, or hide the editor title area completely.
    //  - multiple: Each editor is displayed as a tab in the editor title area.
    //  - single: The active editor is displayed as a single large tab in the editor title area.
    //  - none: The editor title area is not displayed.
    "zenMode.showTabs": "multiple",
  
    // Controls whether notifications do not disturb mode should be enabled while in Zen Mode. If true, only error notifications will pop out.
    "zenMode.silentNotifications": true
  
  },
  {
    // Controls whether the Explorer should automatically open a file when it is dropped into the explorer
    "explorer.autoOpenDroppedFile": true,
  
    // Controls whether the Explorer should automatically reveal and select files when opening them.
    //  - true: Files will be revealed and selected.
    //  - false: Files will not be revealed and selected.
    //  - focusNoScroll: Files will not be scrolled into view, but will still be focused.
    "explorer.autoReveal": true,
  
    // Configure paths or [glob patterns](https://aka.ms/vscode-glob-patterns) for excluding files and folders from being revealed and selected in the Explorer when they are opened. Glob patterns are always evaluated relative to the path of the workspace folder unless they are absolute paths.
    "explorer.autoRevealExclude": {
      "**/node_modules": true,
      "**/bower_components": true
    },
  
    // Controls whether the Explorer should render folders in a compact form. In such a form, single child folders will be compressed in a combined tree element. Useful for Java package structures, for example.
    "explorer.compactFolders": true,
  
    // Controls whether the Explorer should ask for confirmation when deleting a file via the trash.
    "explorer.confirmDelete": true,
  
    // Controls whether the Explorer should ask for confirmation to move files and folders via drag and drop.
    "explorer.confirmDragAndDrop": true,
  
    // Controls whether the Explorer should ask for confirmation when pasting native files and folders.
    "explorer.confirmPasteNative": true,
  
    // Controls whether the Explorer should ask for confirmation when undoing.
    //  - verbose: Explorer will prompt before all undo operations.
    //  - default: Explorer will prompt before destructive undo operations.
    //  - light: Explorer will not prompt before undo operations when focused.
    "explorer.confirmUndo": "default",
  
    // The path separation character used when copying relative file paths.
    //  - /: Use slash as path separation character.
    //  - \: Use backslash as path separation character.
    //  - auto: Uses operating system specific path separation character.
    "explorer.copyRelativePathSeparator": "auto",
  
    // Controls whether file decorations should use badges.
    "explorer.decorations.badges": true,
  
    // Controls whether file decorations should use colors.
    "explorer.decorations.colors": true,
  
    // Controls whether the Explorer should allow to move files and folders via drag and drop. This setting only effects drag and drop from inside the Explorer.
    "explorer.enableDragAndDrop": true,
  
    // Controls whether the Explorer should support undoing file and folder operations.
    "explorer.enableUndo": true,
  
    // Controls whether entries in .gitignore should be parsed and excluded from the Explorer. Similar to `files.exclude`.
    "explorer.excludeGitIgnore": false,
  
    // Controls whether the Explorer should expand multi-root workspaces containing only one folder during initialization
    "explorer.expandSingleFolderWorkspaces": true,
  
    // Controls whether file nesting is enabled in the Explorer. File nesting allows for related files in a directory to be visually grouped together under a single parent file.
    "explorer.fileNesting.enabled": false,
  
    // Controls whether file nests are automatically expanded. `explorer.fileNesting.enabled` must be set for this to take effect.
    "explorer.fileNesting.expand": true,
  
    // Controls nesting of files in the Explorer. `explorer.fileNesting.enabled` must be set for this to take effect. Each __Item__ represents a parent pattern and may contain a single `*` character that matches any string. Each __Value__ represents a comma separated list of the child patterns that should be shown nested under a given parent. Child patterns may contain several special tokens:
    // - `${capture}`: Matches the resolved value of the `*` from the parent pattern
    // - `${basename}`: Matches the parent file's basename, the `file` in `file.ts`
    // - `${extname}`: Matches the parent file's extension, the `ts` in `file.ts`
    // - `${dirname}`: Matches the parent file's directory name, the `src` in `src/file.ts`
    // - `*`:  Matches any string, may only be used once per child pattern
    "explorer.fileNesting.patterns": {
      "*.ts": "${capture}.js",
      "*.js": "${capture}.js.map, ${capture}.min.js, ${capture}.d.ts",
      "*.jsx": "${capture}.js",
      "*.tsx": "${capture}.ts",
      "tsconfig.json": "tsconfig.*.json",
      "package.json": "package-lock.json, yarn.lock, pnpm-lock.yaml, bun.lockb, bun.lock"
    },
  
    // Controls which naming strategy to use when giving a new name to a duplicated Explorer item on paste.
    //  - simple: Appends the word "copy" at the end of the duplicated name potentially followed by a number.
    //  - smart: Adds a number at the end of the duplicated name. If some number is already part of the name, tries to increase that number.
    //  - disabled: Disables incremental naming. If two files with the same name exist you will be prompted to overwrite the existing file.
    "explorer.incrementalNaming": "simple",
  
    // The minimum number of editor slots pre-allocated in the Open Editors pane. If set to 0 the Open Editors pane will dynamically resize based on the number of editors.
    "explorer.openEditors.minVisible": 0,
  
    // Controls the sorting order of editors in the Open Editors pane.
    //  - editorOrder: Editors are ordered in the same order editor tabs are shown.
    //  - alphabetical: Editors are ordered alphabetically by tab name inside each editor group.
    //  - fullPath: Editors are ordered alphabetically by full path inside each editor group.
    "explorer.openEditors.sortOrder": "editorOrder",
  
    // The initial maximum number of editors shown in the Open Editors pane. Exceeding this limit will show a scroll bar and allow resizing the pane to display more items.
    "explorer.openEditors.visible": 9,
  
    // Controls the property-based sorting of files and folders in the Explorer. When `explorer.fileNesting.enabled` is enabled, also controls sorting of nested files.
    //  - default: Files and folders are sorted by their names. Folders are displayed before files.
    //  - mixed: Files and folders are sorted by their names. Files are interwoven with folders.
    //  - filesFirst: Files and folders are sorted by their names. Files are displayed before folders.
    //  - type: Files and folders are grouped by extension type then sorted by their names. Folders are displayed before files.
    //  - modified: Files and folders are sorted by last modified date in descending order. Folders are displayed before files.
    //  - foldersNestsFiles: Files and folders are sorted by their names. Folders are displayed before files. Files with nested children are displayed before other files.
    "explorer.sortOrder": "default",
  
    // Controls the lexicographic sorting of file and folder names in the Explorer.
    //  - default: Uppercase and lowercase names are mixed together.
    //  - upper: Uppercase names are grouped together before lowercase names.
    //  - lower: Lowercase names are grouped together before uppercase names.
    //  - unicode: Names are sorted in Unicode order.
    "explorer.sortOrderLexicographicOptions": "default",
  
    // Controls whether the file and folder sort order, should be reversed.
    "explorer.sortOrderReverse": false
  
  },
  {
    // The number of days (if enabled) to keep unused workspace cache data. Beyond this limit, cached workspace data may be removed.
    "java.configuration.workspaceCacheLimit": 90,
  
    // This setting is deprecated, please use 'java.jdt.ls.java.home' instead.
    // Specifies the folder path to the JDK (21 or more recent) used to launch the Java Language Server.
    // On Windows, backslashes must be escaped, i.e.
    // "java.home":"C:\\Program Files\\Java\\jdk-21.0_5"
    "java.home": null,
  
    // [Experimental] Specify whether to enable Android project importing. When set to `auto`, the Android support will be enabled in Visual Studio Code - Insiders.
    // 
    // **Note:** Only works for Android Gradle Plugin `3.2.0` or higher.
    "java.jdt.ls.androidSupport.enabled": "auto",
  
    // Specifies the folder path to the JDK (21 or more recent) used to launch the Java Language Server. This setting will replace the Java extension's embedded JRE to start the Java Language Server. 
    // 
    // On Windows, backslashes must be escaped, i.e.
    // "java.jdt.ls.java.home":"C:\\Program Files\\Java\\jdk-21.0_5"
    "java.jdt.ls.java.home": null,
  
    // [Experimental] Specify whether to enable Javac-based compilation in the language server. Requires running this extension with Java 23
    "java.jdt.ls.javac.enabled": "off",
  
    // Whether to load lombok processors from project classpath
    "java.jdt.ls.lombokSupport.enabled": true,
  
    // Specify whether to automatically add Protobuf output source directories to the classpath.
    // 
    // **Note:** Only works for Gradle `com.google.protobuf` plugin `0.8.4` or higher.
    "java.jdt.ls.protobufSupport.enabled": true,
  
    // Specifies extra VM arguments used to launch the Java Language Server. Eg. use `-XX:+UseParallelGC -XX:GCTimeRatio=4 -XX:AdaptiveSizePolicyWeight=90 -Dsun.zip.disableMemoryMapping=true -Xmx1G -Xms100m -Xlog:disable` to optimize memory usage with the parallel garbage collector
    "java.jdt.ls.vmargs": "-XX:+UseParallelGC -XX:GCTimeRatio=4 -XX:AdaptiveSizePolicyWeight=90 -Dsun.zip.disableMemoryMapping=true -Xmx1G -Xms100m -Xlog:disable",
  
    // The launch mode for the Java extension
    //  - Standard: Provides full features such as intellisense, refactoring, building, Maven/Gradle support etc.
    //  - LightWeight: Starts a syntax server with lower start-up cost. Only provides syntax features such as outline, navigation, javadoc, syntax errors.
    //  - Hybrid: Provides full features with better responsiveness. It starts a standard language server and a secondary syntax server. The syntax server provides syntax features until the standard server is ready.
    "java.server.launchMode": "Hybrid",
  
    // [Experimental] Specify whether to share indexes between different workspaces. When set to `auto`, shared indexes will be enabled in Visual Studio Code - Insiders.
    "java.sharedIndexes.enabled": "auto",
  
    // Specifies a common index location for all workspaces. See default values as follows:
    //  
    // Windows: First use `"$APPDATA\\.jdt\\index"`, or `"~\\.jdt\\index"` if it does not exist
    //  
    // macOS: `"~/Library/Caches/.jdt/index"`
    //  
    // Linux: First use `"$XDG_CACHE_HOME/.jdt/index"`, or `"~/.cache/.jdt/index"` if it does not exist
    "java.sharedIndexes.location": "",
  
    // Traces the communication between VS Code and the Java language server.
    "java.trace.server": "off",
  
    // Enable usage data and errors to be sent to Red Hat servers. Read our [privacy statement](https://developers.redhat.com/article/tool-data-collection).
    "redhat.telemetry.enabled": null
  
  },
  {
    // Controls the positioning of the actionbar on rows in the search view.
    //  - auto: Position the actionbar to the right when the search view is narrow, and immediately after the content when the search view is wide.
    //  - right: Always position the actionbar to the right.
    "search.actionsPosition": "right",
  
    // Controls whether the search results will be collapsed or expanded.
    //  - auto: Files with less than 10 results are expanded. Others are collapsed.
    //  - alwaysCollapse
    //  - alwaysExpand
    "search.collapseResults": "alwaysExpand",
  
    // Controls whether search file decorations should use badges.
    "search.decorations.badges": true,
  
    // Controls whether search file decorations should use colors.
    "search.decorations.colors": true,
  
    // Controls the default search result view mode.
    //  - tree: Shows search results as a tree.
    //  - list: Shows search results as a list.
    "search.defaultViewMode": "list",
  
    // Configure [glob patterns](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options) for excluding files and folders in fulltext searches and file search in quick open. To exclude files from the recently opened list in quick open, patterns must be absolute (for example `**/node_modules/**`). Inherits all glob patterns from the `files.exclude` setting.
    "search.exclude": {
      "**/node_modules": true,
      "**/bower_components": true,
      "**/*.code-search": true
    },
  
    // Show notebook editor rich content results for closed notebooks. Please refresh your search results after changing this setting.
    "search.experimental.closedNotebookRichContentResults": false,
  
    // Controls whether to follow symlinks while searching.
    "search.followSymlinks": true,
  
    // This setting is deprecated. You can drag the search icon to a new location instead.
    // Controls whether the search will be shown as a view in the sidebar or as a panel in the panel area for more horizontal space.
    "search.location": "sidebar",
  
    // The search cache is kept in the extension host which never shuts down, so this setting is no longer needed.
    // When enabled, the searchService process will be kept alive instead of being shut down after an hour of inactivity. This will keep the file search cache in memory.
    "search.maintainFileSearchCache": false,
  
    // Controls the maximum number of search results, this can be set to `null` (empty) to return unlimited results.
    "search.maxResults": 20000,
  
    // Controls where new `Search: Find in Files` and `Find in Folder` operations occur: either in the search view, or in a search editor.
    //  - view: Search in the search view, either in the panel or side bars.
    //  - reuseEditor: Search in an existing search editor if present, otherwise in a new search editor.
    //  - newEditor: Search in a new search editor.
    "search.mode": "view",
  
    // Controls whether the last typed input to Quick Search should be restored when opening it the next time.
    "search.quickAccess.preserveInput": false,
  
    // Controls sorting order of editor history in quick open when filtering.
    //  - default: History entries are sorted by relevance based on the filter value used. More relevant entries appear first.
    //  - recency: History entries are sorted by recency. More recently opened entries appear first.
    "search.quickOpen.history.filterSortOrder": "default",
  
    // Whether to include results from recently opened files in the file results for Quick Open.
    "search.quickOpen.includeHistory": true,
  
    // Whether to include results from a global symbol search in the file results for Quick Open.
    "search.quickOpen.includeSymbols": false,
  
    // Number of threads to use for searching. When set to 0, the engine automatically determines this value.
    "search.ripgrep.maxThreads": 0,
  
    // The default number of surrounding context lines to use when creating new Search Editors. If using `search.searchEditor.reusePriorSearchConfiguration`, this can be set to `null` (empty) to use the prior Search Editor's configuration.
    "search.searchEditor.defaultNumberOfContextLines": 1,
  
    // Configure effect of double-clicking a result in a search editor.
    //  - selectWord: Double-clicking selects the word under the cursor.
    //  - goToLocation: Double-clicking opens the result in the active editor group.
    //  - openLocationToSide: Double-clicking opens the result in the editor group to the side, creating one if it does not yet exist.
    "search.searchEditor.doubleClickBehaviour": "goToLocation",
  
    // When a search is triggered, focus the Search Editor results instead of the Search Editor input.
    "search.searchEditor.focusResultsOnSearch": false,
  
    // When enabled, new Search Editors will reuse the includes, excludes, and flags of the previously opened Search Editor.
    "search.searchEditor.reusePriorSearchConfiguration": false,
  
    // Configure effect of single-clicking a result in a search editor.
    //  - default: Single-clicking does nothing.
    //  - peekDefinition: Single-clicking opens a Peek Definition window.
    "search.searchEditor.singleClickBehaviour": "default",
  
    // Search all files as you type.
    "search.searchOnType": true,
  
    // When `search.searchOnType#` is enabled, controls the timeout in milliseconds between a character being typed and the search starting. Has no effect when `#search.searchOnType` is disabled.
    "search.searchOnTypeDebouncePeriod": 300,
  
    // Update the search query to the editor's selected text when focusing the search view. This happens either on click or when triggering the `workbench.views.search.focus` command.
    "search.seedOnFocus": false,
  
    // Enable seeding search from the word nearest the cursor when the active editor has no selection.
    "search.seedWithNearestWord": false,
  
    // Controls whether to show line numbers for search results.
    "search.showLineNumbers": false,
  
    // Search case-insensitively if the pattern is all lowercase, otherwise, search case-sensitively.
    "search.smartCase": false,
  
    // Controls sorting order of search results.
    //  - default: Results are sorted by folder and file names, in alphabetical order.
    //  - fileNames: Results are sorted by file names ignoring folder order, in alphabetical order.
    //  - type: Results are sorted by file extensions, in alphabetical order.
    //  - modified: Results are sorted by file last modified date, in descending order.
    //  - countDescending: Results are sorted by count per file, in descending order.
    //  - countAscending: Results are sorted by count per file, in ascending order.
    "search.sortOrder": "default",
  
    // Controls whether to use your global gitignore file (for example, from `$HOME/.config/git/ignore`) when searching for files. Requires `search.useIgnoreFiles` to be enabled.
    "search.useGlobalIgnoreFiles": false,
  
    // Controls whether to use `.gitignore` and `.ignore` files when searching for files.
    "search.useIgnoreFiles": true,
  
    // Controls whether to use `.gitignore` and `.ignore` files in parent directories when searching for files. Requires `search.useIgnoreFiles` to be enabled.
    "search.useParentIgnoreFiles": false,
  
    // Deprecated. PCRE2 will be used automatically when using regex features that are only supported by PCRE2.
    // Whether to use the PCRE2 regex engine in text search. This enables using some advanced regex features like lookahead and backreferences. However, not all PCRE2 features are supported - only features that are also supported by JavaScript.
    "search.usePCRE2": false,
  
    // Controls whether to open Replace Preview when selecting or replacing a match.
    "search.useReplacePreview": true,
  
    // Deprecated. Consider "search.usePCRE2" for advanced regex feature support.
    // This setting is deprecated and now falls back on "search.usePCRE2".
    "search.useRipgrep": true
  
  },
  {
    // Controls whether use of Electron's fetch implementation instead of Node.js' should be enabled. All local extensions will get Electron's fetch implementation for the global fetch API.
    "http.electronFetch": false,
  
    // Controls whether experimental loading of CA certificates from the OS should be enabled. This uses a more general approach than the default implementation. When during [remote development](https://aka.ms/vscode-remote) the `http.useLocalProxyConfiguration` setting is disabled this setting can be configured in the local and the remote settings separately.
    "http.experimental.systemCertificatesV2": false,
  
    // Controls whether Node.js' fetch implementation should be extended with additional support. Currently proxy support (`http.proxySupport#`) and system certificates (`#http.systemCertificates#`) are added when the corresponding settings are enabled. When during [remote development](https://aka.ms/vscode-remote) the `#http.useLocalProxyConfiguration` setting is disabled this setting can be configured in the local and the remote settings separately.
    "http.fetchAdditionalSupport": true,
  
    // Specifies domain names for which proxy settings should be ignored for HTTP/HTTPS requests. When during [remote development](https://aka.ms/vscode-remote) the `http.useLocalProxyConfiguration` setting is disabled this setting can be configured in the local and the remote settings separately.
    "http.noProxy": [],
  
    // The proxy setting to use. If not set, will be inherited from the `http_proxy` and `https_proxy` environment variables. When during [remote development](https://aka.ms/vscode-remote) the `http.useLocalProxyConfiguration` setting is disabled this setting can be configured in the local and the remote settings separately.
    "http.proxy": "",
  
    // The value to send as the `Proxy-Authorization` header for every network request. When during [remote development](https://aka.ms/vscode-remote) the `http.useLocalProxyConfiguration` setting is disabled this setting can be configured in the local and the remote settings separately.
    "http.proxyAuthorization": null,
  
    // Overrides the principal service name for Kerberos authentication with the HTTP proxy. A default based on the proxy hostname is used when this is not set. When during [remote development](https://aka.ms/vscode-remote) the `http.useLocalProxyConfiguration` setting is disabled this setting can be configured in the local and the remote settings separately.
    "http.proxyKerberosServicePrincipal": "",
  
    // Controls whether the proxy server certificate should be verified against the list of supplied CAs. When during [remote development](https://aka.ms/vscode-remote) the `http.useLocalProxyConfiguration` setting is disabled this setting can be configured in the local and the remote settings separately.
    "http.proxyStrictSSL": true,
  
    // Use the proxy support for extensions. When during [remote development](https://aka.ms/vscode-remote) the `http.useLocalProxyConfiguration` setting is disabled this setting can be configured in the local and the remote settings separately.
    //  - off: Disable proxy support for extensions.
    //  - on: Enable proxy support for extensions.
    //  - fallback: Enable proxy support for extensions, fall back to request options, when no proxy found.
    //  - override: Enable proxy support for extensions, override request options.
    "http.proxySupport": "override",
  
    // Controls whether CA certificates should be loaded from the OS. On Windows and macOS, a reload of the window is required after turning this off. When during [remote development](https://aka.ms/vscode-remote) the `http.useLocalProxyConfiguration` setting is disabled this setting can be configured in the local and the remote settings separately.
    "http.systemCertificates": true,
  
    // Controls whether in the remote extension host the local proxy configuration should be used. This setting only applies as a remote setting during [remote development](https://aka.ms/vscode-remote).
    "http.useLocalProxyConfiguration": true
  
  },
  {
    // Controls if the AltGraph+ modifier should be treated as Ctrl+Alt+.
    "keyboard.mapAltGrToCtrlAlt": false
  
  },
  {
    // This setting is deprecated, please use 'update.mode' instead.
    // Configure whether you receive automatic updates. Requires a restart after change. The updates are fetched from a Microsoft online service.
    "update.channel": "default",
  
    // Enable to download and install new Windsurf versions in the background on Windows.
    "update.enableWindowsBackgroundUpdates": true,
  
    // Configure whether you receive automatic updates. Requires a restart after change. The updates are fetched from a Microsoft online service.
    //  - none: Disable updates.
    //  - manual: Disable automatic background update checks. Updates will be available if you manually check for updates.
    //  - start: Check for updates only on startup. Disable automatic background update checks.
    //  - default: Enable automatic update checks. Code will check for updates automatically and periodically.
    "update.mode": "default",
  
    // Show Release Notes after an update. The Release Notes are fetched from a Microsoft online service.
    "update.showReleaseNotes": true
  
  },
  {
    // Controls whether the comment thread should collapse when the thread is resolved.
    "comments.collapseOnResolve": true,
  
    // Controls whether the comments widget scrolls or expands.
    "comments.maxHeight": true,
  
    // This setting is deprecated in favor of `comments.openView`.
    // Controls when the comments panel should open.
    "comments.openPanel": "openOnSessionStartWithComments",
  
    // Controls when the comments view should open.
    //  - never: The comments view will never be opened.
    //  - file: The comments view will open when a file with comments is active.
    //  - firstFile: If the comments view has not been opened yet during this session it will open the first time during a session that a file with comments is active.
    //  - firstFileUnresolved: If the comments view has not been opened yet during this session and the comment is not resolved, it will open the first time during a session that a file with comments is active.
    "comments.openView": "firstFile",
  
    // Controls whether a confirmation dialog is shown when collapsing a comment thread.
    //  - whenHasUnsubmittedComments: Show a confirmation dialog when collapsing a comment thread with unsubmitted comments.
    //  - never: Never show a confirmation dialog when collapsing a comment thread.
    "comments.thread.confirmOnCollapse": "whenHasUnsubmittedComments",
  
    // Determines if relative time will be used in comment timestamps (ex. '1 day ago').
    "comments.useRelativeTime": true,
  
    // Controls the visibility of the comments bar and comment threads in editors that have commenting ranges and comments. Comments are still accessible via the Comments view and will cause commenting to be toggled on in the same way running the command "Comments: Toggle Editor Commenting" toggles comments.
    "comments.visible": true
  
  },
  {
    // Allow setting breakpoints in any file.
    "debug.allowBreakpointsEverywhere": false,
  
    // Controls whether variables that are lazily resolved, such as getters, are automatically resolved and expanded by the debugger.
    //  - auto: When in screen reader optimized mode, automatically expand lazy variables.
    //  - on: Always automatically expand lazy variables.
    //  - off: Never automatically expand lazy variables.
    "debug.autoExpandLazyVariables": "auto",
  
    // At the end of a debug session, all the read-only tabs associated with that session will be closed
    "debug.closeReadonlyTabsOnEnd": false,
  
    // Controls whether to confirm when the window closes if there are active debug sessions.
    //  - never: Never confirm.
    //  - always: Always confirm if there are debug sessions.
    "debug.confirmOnExit": "never",
  
    // Controls whether suggestions should be accepted on Enter in the Debug Console. Enter is also used to evaluate whatever is typed in the Debug Console.
    "debug.console.acceptSuggestionOnEnter": "off",
  
    // Controls if the Debug Console should be automatically closed when the debug session ends.
    "debug.console.closeOnEnd": false,
  
    // Controls if the Debug Console should collapse identical lines and show a number of occurrences with a badge.
    "debug.console.collapseIdenticalLines": true,
  
    // Controls the font family in the Debug Console.
    "debug.console.fontFamily": "default",
  
    // Controls the font size in pixels in the Debug Console.
    "debug.console.fontSize": 14,
  
    // Controls if the Debug Console should suggest previously typed input.
    "debug.console.historySuggestions": true,
  
    // Controls the line height in pixels in the Debug Console. Use 0 to compute the line height from the font size.
    "debug.console.lineHeight": 0,
  
    // Controls if the lines should wrap in the Debug Console.
    "debug.console.wordWrap": true,
  
    // Show Source Code in Disassembly View.
    "debug.disassemblyView.showSourceCode": true,
  
    // Color of the Status bar when debugger is active.
    "debug.enableStatusBarColor": true,
  
    // Controls whether the editor should be focused when the debugger breaks.
    "debug.focusEditorOnBreak": true,
  
    // Controls whether the workbench window should be focused when the debugger breaks.
    "debug.focusWindowOnBreak": true,
  
    // Controls the action to perform when clicking the editor gutter with the middle mouse button.
    //  - logpoint: Add Logpoint.
    //  - conditionalBreakpoint: Add Conditional Breakpoint.
    //  - triggeredBreakpoint: Add Triggered Breakpoint.
    //  - none: Don't perform any action.
    "debug.gutterMiddleClickAction": "logpoint",
  
    // Hide 'Start Debugging' control in title bar of 'Run and Debug' view while debugging is active. Only relevant when `debug.toolBarLocation` is not `docked`.
    "debug.hideLauncherWhileDebugging": false,
  
    // Hide the warning shown when a `preLaunchTask` has been running for a while.
    "debug.hideSlowPreLaunchWarning": false,
  
    // Show variable values inline in editor while debugging.
    //  - on: Always show variable values inline in editor while debugging.
    //  - off: Never show variable values inline in editor while debugging.
    //  - auto: Show variable values inline in editor while debugging when the language supports inline value locations.
    "debug.inlineValues": "auto",
  
    // Controls when the internal Debug Console should open.
    "debug.internalConsoleOptions": "openOnFirstSessionStart",
  
    // Controls what to do when errors are encountered after running a preLaunchTask.
    //  - debugAnyway: Ignore task errors and start debugging.
    //  - showErrors: Show the Problems view and do not start debugging.
    //  - prompt: Prompt user.
    //  - abort: Cancel debugging.
    "debug.onTaskErrors": "prompt",
  
    // Controls when the debug view should open.
    "debug.openDebug": "openOnDebugBreak",
  
    // Automatically open the explorer view at the end of a debug session.
    "debug.openExplorerOnEnd": false,
  
    // Controls what editors to save before starting a debug session.
    //  - allEditorsInActiveGroup: Save all editors in the active group before starting a debug session.
    //  - nonUntitledEditorsInActiveGroup: Save all editors in the active group except untitled ones before starting a debug session.
    //  - none: Don't save any editors before starting a debug session.
    "debug.saveBeforeStart": "allEditorsInActiveGroup",
  
    // Controls whether breakpoints should be shown in the overview ruler.
    "debug.showBreakpointsInOverviewRuler": false,
  
    // Controls whether inline breakpoints candidate decorations should be shown in the editor while debugging.
    "debug.showInlineBreakpointCandidates": true,
  
    // Controls when the debug Status bar should be visible.
    //  - never: Never show debug in Status bar
    //  - always: Always show debug in Status bar
    //  - onFirstSessionStart: Show debug in Status bar only after debug was started for the first time
    "debug.showInStatusBar": "onFirstSessionStart",
  
    // Controls whether the debug sub-sessions are shown in the debug tool bar. When this setting is false the stop command on a sub-session will also stop the parent session.
    "debug.showSubSessionsInToolBar": false,
  
    // Show variable type in variable pane during debug session
    "debug.showVariableTypes": false,
  
    // Before starting a new debug session in an integrated or external terminal, clear the terminal.
    "debug.terminal.clearBeforeReusing": false,
  
    // Controls the location of the debug toolbar. Either `floating` in all views, `docked` in the debug view, `commandCenter` (requires `window.commandCenter`), or `hidden`.
    //  - floating: Show debug toolbar in all views.
    //  - docked: Show debug toolbar only in debug views.
    //  - commandCenter: `(Experimental)` Show debug toolbar in the command center.
    //  - hidden: Do not show debug toolbar.
    "debug.toolBarLocation": "floating",
  
    // Global debug launch configuration. Should be used as an alternative to 'launch.json' that is shared across workspaces.
    "launch": {
      "configurations": [],
      "compounds": []
    }
  
  },
  {
    // Enable/disable autoclosing of HTML tags.
    "html.autoClosingTags": true,
  
    // Enable/disable auto creation of quotes for HTML attribute assignment. The type of quotes can be configured by `html.completion.attributeDefaultValue`.
    "html.autoCreateQuotes": true,
  
    // Controls the default value for attributes when completion is accepted.
    //  - doublequotes: Attribute value is set to "".
    //  - singlequotes: Attribute value is set to ''.
    //  - empty: Attribute value is not set.
    "html.completion.attributeDefaultValue": "doublequotes",
  
    // A list of relative file paths pointing to JSON files following the [custom data format](https://github.com/microsoft/vscode-html-languageservice/blob/master/docs/customData.md).
    // 
    // Windsurf loads custom data on startup to enhance its HTML support for the custom HTML tags, attributes and attribute values you specify in the JSON files.
    // 
    // The file paths are relative to workspace and only workspace folder settings are considered.
    "html.customData": [],
  
    // List of tags, comma separated, where the content shouldn't be reformatted. `null` defaults to the `pre` tag.
    "html.format.contentUnformatted": "pre,code,textarea",
  
    // Enable/disable default HTML formatter.
    "html.format.enable": true,
  
    // List of tags, comma separated, that should have an extra newline before them. `null` defaults to `"head, body, /html"`.
    "html.format.extraLiners": "head, body, /html",
  
    // Format and indent `{{#foo}}` and `{{/foo}}`.
    "html.format.indentHandlebars": false,
  
    // Indent `<head>` and `<body>` sections.
    "html.format.indentInnerHtml": false,
  
    // Maximum number of line breaks to be preserved in one chunk. Use `null` for unlimited.
    "html.format.maxPreserveNewLines": null,
  
    // Controls whether existing line breaks before elements should be preserved. Only works before elements, not inside tags or for text.
    "html.format.preserveNewLines": true,
  
    // Honor django, erb, handlebars and php templating language tags.
    "html.format.templating": false,
  
    // List of tags, comma separated, that shouldn't be reformatted. `null` defaults to all tags listed at https://www.w3.org/TR/html5/dom.html#phrasing-content.
    "html.format.unformatted": "wbr",
  
    // Keep text content together between this string.
    "html.format.unformattedContentDelimiter": "",
  
    // Wrap attributes.
    //  - auto: Wrap attributes only when line length is exceeded.
    //  - force: Wrap each attribute except first.
    //  - force-aligned: Wrap each attribute except first and keep aligned.
    //  - force-expand-multiline: Wrap each attribute.
    //  - aligned-multiple: Wrap when line length is exceeded, align attributes vertically.
    //  - preserve: Preserve wrapping of attributes.
    //  - preserve-aligned: Preserve wrapping of attributes but align.
    "html.format.wrapAttributes": "auto",
  
    // Indent wrapped attributes to after N characters. Use `null` to use the default indent size. Ignored if `html.format.wrapAttributes` is set to `aligned`.
    "html.format.wrapAttributesIndentSize": null,
  
    // Maximum amount of characters per line (0 = disable).
    "html.format.wrapLineLength": 120,
  
    // Show tag and attribute documentation in hover.
    "html.hover.documentation": true,
  
    // Show references to MDN in hover.
    "html.hover.references": true,
  
    // Deprecated in favor of `editor.linkedEditing`
    // Enable/disable mirroring cursor on matching HTML tag.
    "html.mirrorCursorOnMatchingTag": false,
  
    // Controls whether the built-in HTML language support suggests HTML5 tags, properties and values.
    "html.suggest.html5": true,
  
    // Traces the communication between Windsurf and the HTML language server.
    "html.trace.server": "off",
  
    // Controls whether the built-in HTML language support validates embedded scripts.
    "html.validate.scripts": true,
  
    // Controls whether the built-in HTML language support validates embedded styles.
    "html.validate.styles": true
  
  },
  {
    // The setting `json.colorDecorators.enable` has been deprecated in favor of `editor.colorDecorators`.
    // Enables or disables color decorators
    "json.colorDecorators.enable": true,
  
    // Enable/disable default JSON formatter
    "json.format.enable": true,
  
    // Keep all existing new lines when formatting.
    "json.format.keepLines": false,
  
    // The maximum number of outline symbols and folding regions computed (limited for performance reasons).
    "json.maxItemsComputed": 5000,
  
    // When enabled, JSON schemas can be fetched from http and https locations.
    "json.schemaDownload.enable": true,
  
    // Associate schemas to JSON files in the current project.
    "json.schemas": [],
  
    // Traces the communication between Windsurf and the JSON language server.
    "json.trace.server": "off",
  
    // Enable/disable JSON validation.
    "json.validate.enable": true
  
  },
  {
    // Configures the path and file name of files created by copy/paste or drag and drop. This is a map of globs that match against a Markdown document path to the destination path where the new file should be created.
    // 
    // The destination path may use the following variables:
    // 
    // - `${documentDirName}` — Absolute parent directory path of the Markdown document, e.g. `/Users/me/myProject/docs`.
    // - `${documentRelativeDirName}` — Relative parent directory path of the Markdown document, e.g. `docs`. This is the same as `${documentDirName}` if the file is not part of a workspace.
    // - `${documentFileName}` — The full filename of the Markdown document, e.g. `README.md`.
    // - `${documentBaseName}` — The basename of the Markdown document, e.g. `README`.
    // - `${documentExtName}` — The extension of the Markdown document, e.g. `md`.
    // - `${documentFilePath}` — Absolute path of the Markdown document, e.g. `/Users/me/myProject/docs/README.md`.
    // - `${documentRelativeFilePath}` — Relative path of the Markdown document, e.g. `docs/README.md`. This is the same as `${documentFilePath}` if the file is not part of a workspace.
    // - `${documentWorkspaceFolder}` — The workspace folder for the Markdown document, e.g. `/Users/me/myProject`. This is the same as `${documentDirName}` if the file is not part of a workspace.
    // - `${fileName}` — The file name of the dropped file, e.g. `image.png`.
    // - `${fileExtName}` — The extension of the dropped file, e.g. `png`.
    // - `${unixTime}` — The current Unix timestamp in milliseconds.
    "markdown.copyFiles.destination": {},
  
    // Controls if files created by drop or paste should overwrite existing files.
    //  - nameIncrementally: If a file with the same name already exists, append a number to the file name, for example: `image.png` becomes `image-1.png`.
    //  - overwrite: If a file with the same name already exists, overwrite it.
    "markdown.copyFiles.overwriteBehavior": "nameIncrementally",
  
    // Controls if files outside of the workspace that are dropped into a Markdown editor should be copied into the workspace.
    // 
    // Use `markdown.copyFiles.destination` to configure where copied dropped files should be created
    //  - mediaFiles: Try to copy external image and video files into the workspace.
    //  - never: Do not copy external files into the workspace.
    "markdown.editor.drop.copyIntoWorkspace": "mediaFiles",
  
    // Enable dropping files into a Markdown editor while holding Shift. Requires enabling `editor.dropIntoEditor.enabled`.
    //  - always: Always insert Markdown links.
    //  - smart: Smartly create Markdown links by default when not dropping into a code block or other special element. Use the drop widget to switch between pasting as plain text or as Markdown links.
    //  - never: Never create Markdown links.
    "markdown.editor.drop.enabled": "smart",
  
    // Snippet used when adding audio to Markdown. This snippet can use the following variables:
    // - `${src}` — The resolved path of the audio  file.
    // - `${title}` — The title used for the audio. A snippet placeholder will automatically be created for this variable.
    "markdown.editor.filePaste.audioSnippet": "<audio controls src=\"${src}\" title=\"${title}\"></audio>",
  
    // Controls if files outside of the workspace that are pasted into a Markdown editor should be copied into the workspace.
    // 
    // Use `markdown.copyFiles.destination` to configure where copied files should be created.
    //  - mediaFiles: Try to copy external image and video files into the workspace.
    //  - never: Do not copy external files into the workspace.
    "markdown.editor.filePaste.copyIntoWorkspace": "mediaFiles",
  
    // Enable pasting files into a Markdown editor to create Markdown links. Requires enabling `editor.pasteAs.enabled`.
    //  - always: Always insert Markdown links.
    //  - smart: Smartly create Markdown links by default when not pasting into a code block or other special element. Use the paste widget to switch between pasting as plain text or as Markdown links.
    //  - never: Never create Markdown links.
    "markdown.editor.filePaste.enabled": "smart",
  
    // Snippet used when adding videos to Markdown. This snippet can use the following variables:
    // - `${src}` — The resolved path of the video file.
    // - `${title}` — The title used for the video. A snippet placeholder will automatically be created for this variable.
    "markdown.editor.filePaste.videoSnippet": "<video controls src=\"${src}\" title=\"${title}\"></video>",
  
    // Controls if Markdown links are created when URLs are pasted into a Markdown editor. Requires enabling `editor.pasteAs.enabled`.
    //  - always: Always insert Markdown links.
    //  - smart: Smartly create Markdown links by default when not pasting into a code block or other special element. Use the paste widget to switch between pasting as plain text or as Markdown links.
    //  - smartWithSelection: Smartly create Markdown links by default when you have selected text and are not pasting into a code block or other special element. Use the paste widget to switch between pasting as plain text or as Markdown links.
    //  - never: Never create Markdown links.
    "markdown.editor.pasteUrlAsFormattedLink.enabled": "smartWithSelection",
  
    // Enable/disable a paste option that updates links and reference in text that is copied and pasted between Markdown editors.
    // 
    // To use this feature, after pasting text that contains updatable links, just click on the Paste Widget and select `Paste and update pasted links`.
    "markdown.editor.updateLinksOnPaste.enabled": true,
  
    // Controls where links in Markdown files should be opened.
    //  - currentGroup: Open links in the active editor group.
    //  - beside: Open links beside the active editor.
    "markdown.links.openLocation": "currentGroup",
  
    // Enable highlighting link occurrences in the current document.
    "markdown.occurrencesHighlight.enabled": false,
  
    // Controls if file extensions (for example `.md`) are added or not for links to Markdown files. This setting is used when file paths are added by tooling such as path completions or file renames.
    //  - auto: For existing paths, try to maintain the file extension style. For new paths, add file extensions.
    //  - includeExtension: Prefer including the file extension. For example, path completions to a file named `file.md` will insert `file.md`.
    //  - removeExtension: Prefer removing the file extension. For example, path completions to a file named `file.md` will insert `file` without the `.md`.
    "markdown.preferredMdPathExtensionStyle": "auto",
  
    // Sets how line-breaks are rendered in the Markdown preview. Setting it to `true` creates a `<br>` for newlines inside paragraphs.
    "markdown.preview.breaks": false,
  
    // Double-click in the Markdown preview to switch to the editor.
    "markdown.preview.doubleClickToSwitchToEditor": true,
  
    // Controls the font family used in the Markdown preview.
    "markdown.preview.fontFamily": "-apple-system, BlinkMacSystemFont, 'Segoe WPC', 'Segoe UI', system-ui, 'Ubuntu', 'Droid Sans', sans-serif",
  
    // Controls the font size in pixels used in the Markdown preview.
    "markdown.preview.fontSize": 14,
  
    // Controls the line height used in the Markdown preview. This number is relative to the font size.
    "markdown.preview.lineHeight": 1.6,
  
    // Convert URL-like text to links in the Markdown preview.
    "markdown.preview.linkify": true,
  
    // Mark the current editor selection in the Markdown preview.
    "markdown.preview.markEditorSelection": true,
  
    // Controls how links to other Markdown files in the Markdown preview should be opened.
    //  - inPreview: Try to open links in the Markdown preview.
    //  - inEditor: Try to open links in the editor.
    "markdown.preview.openMarkdownLinks": "inPreview",
  
    // When a Markdown preview is scrolled, update the view of the editor.
    "markdown.preview.scrollEditorWithPreview": true,
  
    // When a Markdown editor is scrolled, update the view of the preview.
    "markdown.preview.scrollPreviewWithEditor": true,
  
    // Enable some language-neutral replacement and quotes beautification in the Markdown preview.
    "markdown.preview.typographer": false,
  
    // Controls the logging level of the Markdown language server.
    "markdown.server.log": "off",
  
    // A list of URLs or local paths to CSS style sheets to use from the Markdown preview. Relative paths are interpreted relative to the folder open in the Explorer. If there is no open folder, they are interpreted relative to the location of the Markdown file. All '\' need to be written as '\\'.
    "markdown.styles": [],
  
    // Enable path suggestions while writing links in Markdown files.
    "markdown.suggest.paths.enabled": true,
  
    // Enable suggestions for headers in other Markdown files in the current workspace. Accepting one of these suggestions inserts the full path to header in that file, for example: `[link text](/path/to/file.md#header)`.
    //  - never: Disable workspace header suggestions.
    //  - onDoubleHash: Enable workspace header suggestions after typing `#` in a path, for example: `[link text](#`.
    //  - onSingleOrDoubleHash: Enable workspace header suggestions after typing either `#` or `#` in a path, for example: `[link text](#` or `[link text](#`.
    "markdown.suggest.paths.includeWorkspaceHeaderCompletions": "onDoubleHash",
  
    // Enable debug logging for the Markdown extension.
    "markdown.trace.extension": "off",
  
    // Traces the communication between Windsurf and the Markdown language server.
    "markdown.trace.server": "off",
  
    // Try to update links in Markdown files when a file is renamed/moved in the workspace. Use `markdown.updateLinksOnFileMove.include` to configure which files trigger link updates.
    //  - prompt: Prompt on each file move.
    //  - always: Always update links automatically.
    //  - never: Never try to update link and don't prompt.
    "markdown.updateLinksOnFileMove.enabled": "never",
  
    // Enable updating links when a directory is moved or renamed in the workspace.
    "markdown.updateLinksOnFileMove.enableForDirectories": true,
  
    // Glob patterns that specifies files that trigger automatic link updates. See `markdown.updateLinksOnFileMove.enabled` for details about this feature.
    "markdown.updateLinksOnFileMove.include": [
      "**/*.{md,mkd,mdwn,mdown,markdown,markdn,mdtxt,mdtext,workbook}",
      "**/*.{jpg,jpe,jpeg,png,bmp,gif,ico,webp,avif,tiff,svg,mp4}"
    ],
  
    // Validate duplicated definitions in the current file.
    "markdown.validate.duplicateLinkDefinitions.enabled": "warning",
  
    // Enable all error reporting in Markdown files.
    "markdown.validate.enabled": false,
  
    // Validate links to other files in Markdown files, for example `[link](/path/to/file.md)`. This checks that the target files exists. Requires enabling `markdown.validate.enabled`.
    "markdown.validate.fileLinks.enabled": "warning",
  
    // Validate the fragment part of links to headers in other files in Markdown files, for example: `[link](/path/to/file.md#header)`. Inherits the setting value from `markdown.validate.fragmentLinks.enabled` by default.
    "markdown.validate.fileLinks.markdownFragmentLinks": "inherit",
  
    // Validate fragment links to headers in the current Markdown file, for example: `[link](#header)`. Requires enabling `markdown.validate.enabled`.
    "markdown.validate.fragmentLinks.enabled": "warning",
  
    // Configure links that should not be validated. For example adding `/about` would not validate the link `[about](/about)`, while the glob `/assets/**/*.svg` would let you skip validation for any link to `.svg` files under the `assets` directory.
    "markdown.validate.ignoredLinks": [],
  
    // Validate reference links in Markdown files, for example: `[link][ref]`. Requires enabling `markdown.validate.enabled`.
    "markdown.validate.referenceLinks.enabled": "warning",
  
    // Validate link definitions that are unused in the current file.
    "markdown.validate.unusedLinkDefinitions.enabled": "hint"
  
  },
  {
    // Controls whether the built-in PHP language suggestions are enabled. The support suggests PHP globals and variables.
    "php.suggest.basic": true,
  
    // Enable/disable built-in PHP validation.
    "php.validate.enable": true,
  
    // Points to the PHP executable.
    "php.validate.executablePath": null,
  
    // Whether the linter is run on save or on type.
    "php.validate.run": "onSave"
  
  },
  {
    // Please use 'java.import.generatesMetadataFilesAtProjectRoot' to control whether to generate the project metadata files at the project root. And use 'files.exclude' to control whether to hide the project metadata files from the file explorer.
    // Controls whether to exclude extension-generated project settings files (.project, .classpath, .factorypath, .settings/) from the file explorer.
    "java.configuration.checkProjectSettingsExclusions": false,
  
    // Specifies how modifications on build files update the Java classpath/configuration
    "java.configuration.updateBuildConfiguration": "interactive",
  
    // Configure glob patterns for excluding folders. Use `!` to negate patterns to allow subfolders imports. You have to include a parent directory. The order is important.
    "java.import.exclusions": [
      "**/node_modules/**",
      "**/.metadata/**",
      "**/archetype-resources/**",
      "**/META-INF/maven/**"
    ],
  
    // Specify whether the project metadata files(.project, .classpath, .factorypath, .settings/) will be generated at the project root. Click [HERE](command:_java.metadataFilesGeneration) to learn how to change the setting to make it take effect.
    "java.import.generatesMetadataFilesAtProjectRoot": false,
  
    // [Experimental] Specifies how to select build configuration files to import. 
    // Note: Currently, `Gradle` projects cannot be partially imported.
    //  - manual: Manually select the build configuration files.
    //  - automatic: Let extension automatically scan and select the build configuration files.
    "java.import.projectSelection": "automatic",
  
    // Project encoding settings
    //  - ignore: Ignore project encoding settings
    //  - warning: Show warning if a project has no explicit encoding set
    //  - setDefault: Set the default workspace encoding settings
    "java.project.encoding": "ignore",
  
    // Enable/disable the server-mode switch information, when Java projects import is skipped on startup.
    "java.project.importHint": true,
  
    // Specifies whether to import the Java projects, when opening the folder in Hybrid mode for the first time.
    "java.project.importOnFirstTimeStartup": "automatic",
  
    // Excludes files and folders from being refreshed by the Java Language Server, which can improve the overall performance. For example, ["node_modules","\.git"] will exclude all files and folders named `node_modules` or `.git`. Pattern expressions must be compatible with `java.util.regex.Pattern`. Defaults to ["node_modules","\.git"].
    "java.project.resourceFilters": [
      "node_modules",
      "\\.git"
    ],
  
    // Automatically show build status on startup.
    "java.showBuildStatusOnStart.enabled": "notification"
  
  },
  {
    // Enable/disable automatic closing of JSX tags.
    "javascript.autoClosingTags": true,
  
    // Enable/disable default JavaScript formatter.
    "javascript.format.enable": true,
  
    // Indent case clauses in switch statements. Requires using TypeScript 5.1+ in the workspace.
    "javascript.format.indentSwitchCase": true,
  
    // Defines space handling after a comma delimiter.
    "javascript.format.insertSpaceAfterCommaDelimiter": true,
  
    // Defines space handling after the constructor keyword.
    "javascript.format.insertSpaceAfterConstructor": false,
  
    // Defines space handling after function keyword for anonymous functions.
    "javascript.format.insertSpaceAfterFunctionKeywordForAnonymousFunctions": true,
  
    // Defines space handling after keywords in a control flow statement.
    "javascript.format.insertSpaceAfterKeywordsInControlFlowStatements": true,
  
    // Defines space handling after opening and before closing empty braces.
    "javascript.format.insertSpaceAfterOpeningAndBeforeClosingEmptyBraces": true,
  
    // Defines space handling after opening and before closing JSX expression braces.
    "javascript.format.insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces": false,
  
    // Defines space handling after opening and before closing non-empty braces.
    "javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces": true,
  
    // Defines space handling after opening and before closing non-empty brackets.
    "javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets": false,
  
    // Defines space handling after opening and before closing non-empty parenthesis.
    "javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis": false,
  
    // Defines space handling after opening and before closing template string braces.
    "javascript.format.insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces": false,
  
    // Defines space handling after a semicolon in a for statement.
    "javascript.format.insertSpaceAfterSemicolonInForStatements": true,
  
    // Defines space handling after a binary operator.
    "javascript.format.insertSpaceBeforeAndAfterBinaryOperators": true,
  
    // Defines space handling before function argument parentheses.
    "javascript.format.insertSpaceBeforeFunctionParenthesis": false,
  
    // Defines whether an open brace is put onto a new line for control blocks or not.
    "javascript.format.placeOpenBraceOnNewLineForControlBlocks": false,
  
    // Defines whether an open brace is put onto a new line for functions or not.
    "javascript.format.placeOpenBraceOnNewLineForFunctions": false,
  
    // Defines handling of optional semicolons.
    //  - ignore: Don't insert or remove any semicolons.
    //  - insert: Insert semicolons at statement ends.
    //  - remove: Remove unnecessary semicolons.
    "javascript.format.semicolons": "ignore",
  
    // This setting has been deprecated in favor of `js/ts.implicitProjectConfig.checkJs`.
    // Enable/disable semantic checking of JavaScript files. Existing `jsconfig.json` or `tsconfig.json` files override this setting.
    "javascript.implicitProjectConfig.checkJs": false,
  
    // This setting has been deprecated in favor of `js/ts.implicitProjectConfig.experimentalDecorators`.
    // Enable/disable `experimentalDecorators` in JavaScript files that are not part of a project. Existing `jsconfig.json` or `tsconfig.json` files override this setting.
    "javascript.implicitProjectConfig.experimentalDecorators": false,
  
    // Enable/disable inlay hints for implicit return types on function signatures:
    // ```typescript
    // 
    // function foo() /* :number */ {
    // 	return Date.now();
    // } 
    //  
    // ```
    "javascript.inlayHints.functionLikeReturnTypes.enabled": false,
  
    // Enable/disable inlay hints for parameter names:
    // ```typescript
    // 
    // parseInt(/* str: */ '123', /* radix: */ 8)
    //  
    // ```
    //  - none: Disable parameter name hints.
    //  - literals: Enable parameter name hints only for literal arguments.
    //  - all: Enable parameter name hints for literal and non-literal arguments.
    "javascript.inlayHints.parameterNames.enabled": "none",
  
    // Suppress parameter name hints on arguments whose text is identical to the parameter name.
    "javascript.inlayHints.parameterNames.suppressWhenArgumentMatchesName": true,
  
    // Enable/disable inlay hints for implicit parameter types:
    // ```typescript
    // 
    // el.addEventListener('click', e /* :MouseEvent */ => ...)
    //  
    // ```
    "javascript.inlayHints.parameterTypes.enabled": false,
  
    // Enable/disable inlay hints for implicit types on property declarations:
    // ```typescript
    // 
    // class Foo {
    // 	prop /* :number */ = Date.now();
    // }
    //  
    // ```
    "javascript.inlayHints.propertyDeclarationTypes.enabled": false,
  
    // Enable/disable inlay hints for implicit variable types:
    // ```typescript
    // 
    // const foo /* :number */ = Date.now();
    //  
    // ```
    "javascript.inlayHints.variableTypes.enabled": false,
  
    // Suppress type hints on variables whose name is identical to the type name.
    "javascript.inlayHints.variableTypes.suppressWhenTypeMatchesName": true,
  
    // Specify glob patterns of files to exclude from auto imports. Relative paths are resolved relative to the workspace root. Patterns are evaluated using tsconfig.json [`exclude`](https://www.typescriptlang.org/tsconfig#exclude) semantics.
    "javascript.preferences.autoImportFileExcludePatterns": [],
  
    // Specify regular expressions to exclude auto imports with matching import specifiers. Examples:
    // 
    // - `^node:`
    // - `lib/internal` (slashes don't need to be escaped...)
    // - `/lib\/internal/i` (...unless including surrounding slashes for `i` or `u` flags)
    // - `^lodash$` (only allow subpath imports from lodash)
    "javascript.preferences.autoImportSpecifierExcludeRegexes": [],
  
    // Preferred path style for auto imports.
    //  - shortest: Prefers a non-relative import only if one is available that has fewer path segments than a relative import.
    //  - relative: Prefers a relative path to the imported file location.
    //  - non-relative: Prefers a non-relative import based on the `baseUrl` or `paths` configured in your `jsconfig.json` / `tsconfig.json`.
    //  - project-relative: Prefers a non-relative import only if the relative import path would leave the package or project directory.
    "javascript.preferences.importModuleSpecifier": "shortest",
  
    // Preferred path ending for auto imports.
    //  - auto: Use project settings to select a default.
    //  - minimal: Shorten `./component/index.js` to `./component`.
    //  - index: Shorten `./component/index.js` to `./component/index`.
    //  - js: Do not shorten path endings; include the `.js` or `.ts` extension.
    "javascript.preferences.importModuleSpecifierEnding": "auto",
  
    // Preferred style for JSX attribute completions.
    //  - auto: Insert `={}` or `=""` after attribute names based on the prop type. See `javascript.preferences.quoteStyle` to control the type of quotes used for string attributes.
    //  - braces: Insert `={}` after attribute names.
    //  - none: Only insert attribute names.
    "javascript.preferences.jsxAttributeCompletionStyle": "auto",
  
    // Advanced preferences that control how imports are ordered.
    "javascript.preferences.organizeImports": {},
  
    // Preferred quote style to use for Quick Fixes.
    //  - auto: Infer quote type from existing code
    //  - single: Always use single quotes: `'`
    //  - double: Always use double quotes: `"`
    "javascript.preferences.quoteStyle": "auto",
  
    // When on a JSX tag, try to rename the matching tag instead of renaming the symbol. Requires using TypeScript 5.1+ in the workspace.
    "javascript.preferences.renameMatchingJsxTags": true,
  
    // The setting 'typescript.preferences.renameShorthandProperties' has been deprecated in favor of 'typescript.preferences.useAliasesForRenames'
    // Enable/disable introducing aliases for object shorthand properties during renames.
    "javascript.preferences.renameShorthandProperties": true,
  
    // Enable/disable introducing aliases for object shorthand properties during renames.
    "javascript.preferences.useAliasesForRenames": true,
  
    // Makes `Go to Definition` avoid type declaration files when possible by triggering `Go to Source Definition` instead. This allows `Go to Source Definition` to be triggered with the mouse gesture.
    "javascript.preferGoToSourceDefinition": false,
  
    // Enable/disable references CodeLens in JavaScript files.
    "javascript.referencesCodeLens.enabled": false,
  
    // Enable/disable references CodeLens on all functions in JavaScript files.
    "javascript.referencesCodeLens.showOnAllFunctions": false,
  
    // Enable/disable auto import suggestions.
    "javascript.suggest.autoImports": true,
  
    // Enable/disable snippet completions for class members.
    "javascript.suggest.classMemberSnippets.enabled": true,
  
    // Complete functions with their parameter signature.
    "javascript.suggest.completeFunctionCalls": false,
  
    // Enable/disable suggestion to complete JSDoc comments.
    "javascript.suggest.completeJSDocs": true,
  
    // Enabled/disable autocomplete suggestions.
    "javascript.suggest.enabled": true,
  
    // Enable/disable showing completions on potentially undefined values that insert an optional chain call. Requires strict null checks to be enabled.
    "javascript.suggest.includeAutomaticOptionalChainCompletions": true,
  
    // Enable/disable auto-import-style completions on partially-typed import statements.
    "javascript.suggest.includeCompletionsForImportStatements": true,
  
    // Enable/disable generating `@returns` annotations for JSDoc templates.
    "javascript.suggest.jsdoc.generateReturns": true,
  
    // Enable/disable including unique names from the file in JavaScript suggestions. Note that name suggestions are always disabled in JavaScript code that is semantically checked using `@ts-check` or `checkJs`.
    "javascript.suggest.names": true,
  
    // Enable/disable suggestions for paths in import statements and require calls.
    "javascript.suggest.paths": true,
  
    // Enable/disable suggestion diagnostics for JavaScript files in the editor.
    "javascript.suggestionActions.enabled": true,
  
    // Enable/disable automatic updating of import paths when you rename or move a file in Windsurf.
    //  - prompt: Prompt on each rename.
    //  - always: Always update paths automatically.
    //  - never: Never rename paths and don't prompt.
    "javascript.updateImportsOnFileMove.enabled": "prompt",
  
    // Enable updating imports when pasting code. Requires TypeScript 5.7+.
    // 
    // By default this shows a option to update imports after pasting. You can use the `editor.pasteAs.preferences` setting to update imports automatically when pasting: `"editor.pasteAs.preferences": [ "text.updateImports.jsts" ]`.
    "javascript.updateImportsOnPaste.enabled": true,
  
    // Enable/disable JavaScript validation.
    "javascript.validate.enable": true,
  
    // Enable/disable semantic checking of JavaScript files. Existing `jsconfig.json` or `tsconfig.json` files override this setting.
    "js/ts.implicitProjectConfig.checkJs": false,
  
    // Enable/disable `experimentalDecorators` in JavaScript files that are not part of a project. Existing `jsconfig.json` or `tsconfig.json` files override this setting.
    "js/ts.implicitProjectConfig.experimentalDecorators": false,
  
    // Sets the module system for the program. See more: https://www.typescriptlang.org/tsconfig#module.
    "js/ts.implicitProjectConfig.module": "ESNext",
  
    // Enable/disable [strict function types](https://www.typescriptlang.org/tsconfig#strictFunctionTypes) in JavaScript and TypeScript files that are not part of a project. Existing `jsconfig.json` or `tsconfig.json` files override this setting.
    "js/ts.implicitProjectConfig.strictFunctionTypes": true,
  
    // Enable/disable [strict null checks](https://www.typescriptlang.org/tsconfig#strictNullChecks) in JavaScript and TypeScript files that are not part of a project. Existing `jsconfig.json` or `tsconfig.json` files override this setting.
    "js/ts.implicitProjectConfig.strictNullChecks": true,
  
    // Set target JavaScript language version for emitted JavaScript and include library declarations. See more: https://www.typescriptlang.org/tsconfig#target.
    "js/ts.implicitProjectConfig.target": "ES2022",
  
    // Enable/disable automatic closing of JSX tags.
    "typescript.autoClosingTags": true,
  
    // Check if npm is installed for [Automatic Type Acquisition](https://code.visualstudio.com/docs/nodejs/working-with-javascript#_typings-and-automatic-type-acquisition).
    "typescript.check.npmIsInstalled": true,
  
    // Disables [automatic type acquisition](https://code.visualstudio.com/docs/nodejs/working-with-javascript#_typings-and-automatic-type-acquisition). Automatic type acquisition fetches `@types` packages from npm to improve IntelliSense for external libraries.
    "typescript.disableAutomaticTypeAcquisition": false,
  
    // Enables prompting of users to use the TypeScript version configured in the workspace for Intellisense.
    "typescript.enablePromptUseWorkspaceTsdk": false,
  
    // Enable expanding/contracting the hover to reveal more/less information from the TS server.
    "typescript.experimental.expandableHover": false,
  
    // Enable/disable default TypeScript formatter.
    "typescript.format.enable": true,
  
    // Indent case clauses in switch statements. Requires using TypeScript 5.1+ in the workspace.
    "typescript.format.indentSwitchCase": true,
  
    // Defines space handling after a comma delimiter.
    "typescript.format.insertSpaceAfterCommaDelimiter": true,
  
    // Defines space handling after the constructor keyword.
    "typescript.format.insertSpaceAfterConstructor": false,
  
    // Defines space handling after function keyword for anonymous functions.
    "typescript.format.insertSpaceAfterFunctionKeywordForAnonymousFunctions": true,
  
    // Defines space handling after keywords in a control flow statement.
    "typescript.format.insertSpaceAfterKeywordsInControlFlowStatements": true,
  
    // Defines space handling after opening and before closing empty braces.
    "typescript.format.insertSpaceAfterOpeningAndBeforeClosingEmptyBraces": true,
  
    // Defines space handling after opening and before closing JSX expression braces.
    "typescript.format.insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces": false,
  
    // Defines space handling after opening and before closing non-empty braces.
    "typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces": true,
  
    // Defines space handling after opening and before closing non-empty brackets.
    "typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets": false,
  
    // Defines space handling after opening and before closing non-empty parenthesis.
    "typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis": false,
  
    // Defines space handling after opening and before closing template string braces.
    "typescript.format.insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces": false,
  
    // Defines space handling after a semicolon in a for statement.
    "typescript.format.insertSpaceAfterSemicolonInForStatements": true,
  
    // Defines space handling after type assertions in TypeScript.
    "typescript.format.insertSpaceAfterTypeAssertion": false,
  
    // Defines space handling after a binary operator.
    "typescript.format.insertSpaceBeforeAndAfterBinaryOperators": true,
  
    // Defines space handling before function argument parentheses.
    "typescript.format.insertSpaceBeforeFunctionParenthesis": false,
  
    // Defines whether an open brace is put onto a new line for control blocks or not.
    "typescript.format.placeOpenBraceOnNewLineForControlBlocks": false,
  
    // Defines whether an open brace is put onto a new line for functions or not.
    "typescript.format.placeOpenBraceOnNewLineForFunctions": false,
  
    // Defines handling of optional semicolons.
    //  - ignore: Don't insert or remove any semicolons.
    //  - insert: Insert semicolons at statement ends.
    //  - remove: Remove unnecessary semicolons.
    "typescript.format.semicolons": "ignore",
  
    // Enable/disable implementations CodeLens. This CodeLens shows the implementers of an interface.
    "typescript.implementationsCodeLens.enabled": false,
  
    // Enable/disable implementations CodeLens on interface methods.
    "typescript.implementationsCodeLens.showOnInterfaceMethods": false,
  
    // Enable/disable inlay hints for member values in enum declarations:
    // ```typescript
    // 
    // enum MyValue {
    // 	A /* = 0 */;
    // 	B /* = 1 */;
    // }
    //  
    // ```
    "typescript.inlayHints.enumMemberValues.enabled": false,
  
    // Enable/disable inlay hints for implicit return types on function signatures:
    // ```typescript
    // 
    // function foo() /* :number */ {
    // 	return Date.now();
    // } 
    //  
    // ```
    "typescript.inlayHints.functionLikeReturnTypes.enabled": false,
  
    // Enable/disable inlay hints for parameter names:
    // ```typescript
    // 
    // parseInt(/* str: */ '123', /* radix: */ 8)
    //  
    // ```
    //  - none: Disable parameter name hints.
    //  - literals: Enable parameter name hints only for literal arguments.
    //  - all: Enable parameter name hints for literal and non-literal arguments.
    "typescript.inlayHints.parameterNames.enabled": "none",
  
    // Suppress parameter name hints on arguments whose text is identical to the parameter name.
    "typescript.inlayHints.parameterNames.suppressWhenArgumentMatchesName": true,
  
    // Enable/disable inlay hints for implicit parameter types:
    // ```typescript
    // 
    // el.addEventListener('click', e /* :MouseEvent */ => ...)
    //  
    // ```
    "typescript.inlayHints.parameterTypes.enabled": false,
  
    // Enable/disable inlay hints for implicit types on property declarations:
    // ```typescript
    // 
    // class Foo {
    // 	prop /* :number */ = Date.now();
    // }
    //  
    // ```
    "typescript.inlayHints.propertyDeclarationTypes.enabled": false,
  
    // Enable/disable inlay hints for implicit variable types:
    // ```typescript
    // 
    // const foo /* :number */ = Date.now();
    //  
    // ```
    "typescript.inlayHints.variableTypes.enabled": false,
  
    // Suppress type hints on variables whose name is identical to the type name.
    "typescript.inlayHints.variableTypes.suppressWhenTypeMatchesName": true,
  
    // Sets the locale used to report JavaScript and TypeScript errors. Defaults to use Windsurf's locale.
    //  - auto: Use Windsurf's configured display language
    //  - de: Deutsch
    //  - es: español
    //  - en: English
    //  - fr: français
    //  - it: italiano
    //  - ja: 日本語
    //  - ko: 한국어
    //  - ru: русский
    //  - zh-CN: 中文(简体)
    //  - zh-TW: 中文(繁體)
    "typescript.locale": "auto",
  
    // Specifies the path to the npm executable used for [Automatic Type Acquisition](https://code.visualstudio.com/docs/nodejs/working-with-javascript#_typings-and-automatic-type-acquisition).
    "typescript.npm": "",
  
    // Specify glob patterns of files to exclude from auto imports. Relative paths are resolved relative to the workspace root. Patterns are evaluated using tsconfig.json [`exclude`](https://www.typescriptlang.org/tsconfig#exclude) semantics.
    "typescript.preferences.autoImportFileExcludePatterns": [],
  
    // Specify regular expressions to exclude auto imports with matching import specifiers. Examples:
    // 
    // - `^node:`
    // - `lib/internal` (slashes don't need to be escaped...)
    // - `/lib\/internal/i` (...unless including surrounding slashes for `i` or `u` flags)
    // - `^lodash$` (only allow subpath imports from lodash)
    "typescript.preferences.autoImportSpecifierExcludeRegexes": [],
  
    // Preferred path style for auto imports.
    //  - shortest: Prefers a non-relative import only if one is available that has fewer path segments than a relative import.
    //  - relative: Prefers a relative path to the imported file location.
    //  - non-relative: Prefers a non-relative import based on the `baseUrl` or `paths` configured in your `jsconfig.json` / `tsconfig.json`.
    //  - project-relative: Prefers a non-relative import only if the relative import path would leave the package or project directory.
    "typescript.preferences.importModuleSpecifier": "shortest",
  
    // Preferred path ending for auto imports.
    //  - auto: Use project settings to select a default.
    //  - minimal: Shorten `./component/index.js` to `./component`.
    //  - index: Shorten `./component/index.js` to `./component/index`.
    //  - js: Do not shorten path endings; include the `.js` or `.ts` extension.
    "typescript.preferences.importModuleSpecifierEnding": "auto",
  
    // Enable/disable searching `package.json` dependencies for available auto imports.
    //  - auto: Search dependencies based on estimated performance impact.
    //  - on: Always search dependencies.
    //  - off: Never search dependencies.
    "typescript.preferences.includePackageJsonAutoImports": "auto",
  
    // Preferred style for JSX attribute completions.
    //  - auto: Insert `={}` or `=""` after attribute names based on the prop type. See `typescript.preferences.quoteStyle` to control the type of quotes used for string attributes.
    //  - braces: Insert `={}` after attribute names.
    //  - none: Only insert attribute names.
    "typescript.preferences.jsxAttributeCompletionStyle": "auto",
  
    // Advanced preferences that control how imports are ordered.
    "typescript.preferences.organizeImports": {},
  
    // Include the `type` keyword in auto-imports whenever possible. Requires using TypeScript 5.3+ in the workspace.
    "typescript.preferences.preferTypeOnlyAutoImports": false,
  
    // Preferred quote style to use for Quick Fixes.
    //  - auto: Infer quote type from existing code
    //  - single: Always use single quotes: `'`
    //  - double: Always use double quotes: `"`
    "typescript.preferences.quoteStyle": "auto",
  
    // When on a JSX tag, try to rename the matching tag instead of renaming the symbol. Requires using TypeScript 5.1+ in the workspace.
    "typescript.preferences.renameMatchingJsxTags": true,
  
    // The setting 'typescript.preferences.renameShorthandProperties' has been deprecated in favor of 'typescript.preferences.useAliasesForRenames'
    // Enable/disable introducing aliases for object shorthand properties during renames.
    "typescript.preferences.renameShorthandProperties": true,
  
    // Enable/disable introducing aliases for object shorthand properties during renames.
    "typescript.preferences.useAliasesForRenames": true,
  
    // Makes `Go to Definition` avoid type declaration files when possible by triggering `Go to Source Definition` instead. This allows `Go to Source Definition` to be triggered with the mouse gesture.
    "typescript.preferGoToSourceDefinition": false,
  
    // Enable/disable references CodeLens in TypeScript files.
    "typescript.referencesCodeLens.enabled": false,
  
    // Enable/disable references CodeLens on all functions in TypeScript files.
    "typescript.referencesCodeLens.showOnAllFunctions": false,
  
    // Report style checks as warnings.
    "typescript.reportStyleChecksAsWarnings": true,
  
    // Enable/disable auto import suggestions.
    "typescript.suggest.autoImports": true,
  
    // Enable/disable snippet completions for class members.
    "typescript.suggest.classMemberSnippets.enabled": true,
  
    // Complete functions with their parameter signature.
    "typescript.suggest.completeFunctionCalls": false,
  
    // Enable/disable suggestion to complete JSDoc comments.
    "typescript.suggest.completeJSDocs": true,
  
    // Enabled/disable autocomplete suggestions.
    "typescript.suggest.enabled": true,
  
    // Enable/disable showing completions on potentially undefined values that insert an optional chain call. Requires strict null checks to be enabled.
    "typescript.suggest.includeAutomaticOptionalChainCompletions": true,
  
    // Enable/disable auto-import-style completions on partially-typed import statements.
    "typescript.suggest.includeCompletionsForImportStatements": true,
  
    // Enable/disable generating `@returns` annotations for JSDoc templates.
    "typescript.suggest.jsdoc.generateReturns": true,
  
    // Enable/disable snippet completions for methods in object literals.
    "typescript.suggest.objectLiteralMethodSnippets.enabled": true,
  
    // Enable/disable suggestions for paths in import statements and require calls.
    "typescript.suggest.paths": true,
  
    // Enable/disable suggestion diagnostics for TypeScript files in the editor.
    "typescript.suggestionActions.enabled": true,
  
    // Enabled/disable occasional surveys that help us improve Windsurf's JavaScript and TypeScript support.
    "typescript.surveys.enabled": true,
  
    // Controls auto detection of tsc tasks.
    //  - on: Create both build and watch tasks.
    //  - off: Disable this feature.
    //  - build: Only create single run compile tasks.
    //  - watch: Only create compile and watch tasks.
    "typescript.tsc.autoDetect": "on",
  
    // Specifies the folder path to the tsserver and `lib*.d.ts` files under a TypeScript install to use for IntelliSense, for example: `./node_modules/typescript/lib`.
    // 
    // - When specified as a user setting, the TypeScript version from `typescript.tsdk` automatically replaces the built-in TypeScript version.
    // - When specified as a workspace setting, `typescript.tsdk` allows you to switch to use that workspace version of TypeScript for IntelliSense with the `TypeScript: Select TypeScript version` command.
    // 
    // See the [TypeScript documentation](https://code.visualstudio.com/docs/typescript/typescript-compiling#_using-newer-typescript-versions) for more detail about managing TypeScript versions.
    "typescript.tsdk": "",
  
    // Enables region-based diagnostics in TypeScript. Requires using TypeScript 5.6+ in the workspace.
    "typescript.tsserver.enableRegionDiagnostics": true,
  
    // Enables tracing TS server performance to a directory. These trace files can be used to diagnose TS Server performance issues. The log may contain file paths, source code, and other potentially sensitive information from your project.
    "typescript.tsserver.enableTracing": false,
  
    // Enables project wide error reporting.
    "typescript.tsserver.experimental.enableProjectDiagnostics": false,
  
    // Please use the `typescript.tsserver.watchOptions` setting instead.
    // Use Windsurf's file watchers instead of TypeScript's. Requires using TypeScript 5.4+ in the workspace.
    "typescript.tsserver.experimental.useVsCodeWatcher": true,
  
    // Enables logging of the TS server to a file. This log can be used to diagnose TS Server issues. The log may contain file paths, source code, and other potentially sensitive information from your project.
    "typescript.tsserver.log": "off",
  
    // The maximum amount of memory (in MB) to allocate to the TypeScript server process. To use a memory limit greater than 4 GB, use `typescript.tsserver.nodePath` to run TS Server with a custom Node installation.
    "typescript.tsserver.maxTsServerMemory": 3072,
  
    // Run TS Server on a custom Node installation. This can be a path to a Node executable, or 'node' if you want Windsurf to detect a Node installation.
    "typescript.tsserver.nodePath": "",
  
    // Additional paths to discover TypeScript Language Service plugins.
    "typescript.tsserver.pluginPaths": [],
  
    // This setting has been deprecated in favor of `typescript.tsserver.useSyntaxServer`.
    // Enable/disable spawning a separate TypeScript server that can more quickly respond to syntax related operations, such as calculating folding or computing document symbols.
    "typescript.tsserver.useSeparateSyntaxServer": true,
  
    // Controls if TypeScript launches a dedicated server to more quickly handle syntax related operations, such as computing code folding.
    //  - always: Use a lighter weight syntax server to handle all IntelliSense operations. This syntax server can only provide IntelliSense for opened files.
    //  - never: Don't use a dedicated syntax server. Use a single server to handle all IntelliSense operations.
    //  - auto: Spawn both a full server and a lighter weight server dedicated to syntax operations. The syntax server is used to speed up syntax operations and provide IntelliSense while projects are loading.
    "typescript.tsserver.useSyntaxServer": "auto",
  
    // Configure which watching strategies should be used to keep track of files and directories.
    "typescript.tsserver.watchOptions": "vscode",
  
    // Enable/disable project-wide IntelliSense on web. Requires that Windsurf is running in a trusted context.
    "typescript.tsserver.web.projectWideIntellisense.enabled": true,
  
    // Suppresses semantic errors on web even when project wide IntelliSense is enabled. This is always on when project wide IntelliSense is not enabled or available. See `typescript.tsserver.web.projectWideIntellisense.enabled`
    "typescript.tsserver.web.projectWideIntellisense.suppressSemanticErrors": false,
  
    // Enable/disable package acquisition on the web. This enables IntelliSense for imported packages. Requires `typescript.tsserver.web.projectWideIntellisense.enabled`. Currently not supported for Safari.
    "typescript.tsserver.web.typeAcquisition.enabled": true,
  
    // Enable/disable automatic updating of import paths when you rename or move a file in Windsurf.
    //  - prompt: Prompt on each rename.
    //  - always: Always update paths automatically.
    //  - never: Never rename paths and don't prompt.
    "typescript.updateImportsOnFileMove.enabled": "prompt",
  
    // Enable updating imports when pasting code. Requires TypeScript 5.7+.
    // 
    // By default this shows a option to update imports after pasting. You can use the `editor.pasteAs.preferences` setting to update imports automatically when pasting: `"editor.pasteAs.preferences": [ "text.updateImports.jsts" ]`.
    "typescript.updateImportsOnPaste.enabled": true,
  
    // Enable/disable TypeScript validation.
    "typescript.validate.enable": true,
  
    // Exclude symbols that come from library files in Go to Symbol in Workspace results. Requires using TypeScript 5.3+ in the workspace.
    "typescript.workspaceSymbols.excludeLibrarySymbols": true,
  
    // Controls which files are searched by [Go to Symbol in Workspace](https://code.visualstudio.com/docs/editor/editingevolved#_open-symbol-by-name).
    //  - allOpenProjects: Search all open JavaScript or TypeScript projects for symbols.
    //  - currentProject: Only search for symbols in the current JavaScript or TypeScript project.
    "typescript.workspaceSymbols.scope": "allOpenProjects"
  
  },
  {
    // Always reveal the executed test when `testing.followRunningTest` is on. If this setting is turned off, only failed tests will be revealed.
    "testing.alwaysRevealTestOnStateChange": false,
  
    // Configures when the error Peek view is automatically opened.
    //  - failureAnywhere: Open automatically no matter where the failure is.
    //  - failureInVisibleDocument: Open automatically when a test fails in a visible document.
    //  - never: Never automatically open.
    "testing.automaticallyOpenPeekView": "never",
  
    // Controls whether to automatically open the Peek view during continuous run mode.
    "testing.automaticallyOpenPeekViewDuringAutoRun": false,
  
    // Controls when the testing view should open.
    //  - neverOpen: Never automatically open the testing views
    //  - openOnTestStart: Open the test results view when tests start
    //  - openOnTestFailure: Open the test result view on any test failure
    //  - openExplorerOnTestStart: Open the test explorer when tests start
    "testing.automaticallyOpenTestResults": "openOnTestStart",
  
    // Controls the count badge on the Testing icon on the Activity Bar.
    //  - failed: Show the number of failed tests
    //  - off: Disable the testing count badge
    //  - passed: Show the number of passed tests
    //  - skipped: Show the number of skipped tests
    "testing.countBadge": "failed",
  
    // Configures the colors used for percentages in test coverage bars.
    "testing.coverageBarThresholds": {
      "red": 0,
      "yellow": 60,
      "green": 90
    },
  
    // Controls whether the coverage toolbar is shown in the editor.
    "testing.coverageToolbarEnabled": false,
  
    // Controls the action to take when left-clicking on a test decoration in the gutter.
    //  - run: Run the test.
    //  - debug: Debug the test.
    //  - runWithCoverage: Run the test with coverage.
    //  - contextMenu: Open the context menu for more options.
    "testing.defaultGutterClickAction": "run",
  
    // Configures what percentage is displayed by default for test coverage.
    //  - totalCoverage: A calculation of the combined statement, function, and branch coverage.
    //  - statement: The statement coverage.
    //  - minimum: The minimum of statement, function, and branch coverage.
    "testing.displayedCoveragePercent": "totalCoverage",
  
    // Controls whether the running test should be followed in the Test Explorer view.
    "testing.followRunningTest": false,
  
    // Controls whether test decorations are shown in the editor gutter.
    "testing.gutterEnabled": true,
  
    // Control whether save all dirty editors before running a test.
    "testing.saveBeforeTest": true,
  
    // Controls whether to show messages from all test runs.
    "testing.showAllMessages": false,
  
    // Whether test coverage should be down in the File Explorer view.
    "testing.showCoverageInExplorer": true
  
  },
  {
    // Insert semicolon at end of line when completing CSS properties.
    "css.completion.completePropertyWithSemicolon": true,
  
    // By default, Windsurf triggers property value completion after selecting a CSS property. Use this setting to disable this behavior.
    "css.completion.triggerPropertyValueCompletion": true,
  
    // A list of relative file paths pointing to JSON files following the [custom data format](https://github.com/microsoft/vscode-css-languageservice/blob/master/docs/customData.md).
    // 
    // Windsurf loads custom data on startup to enhance its CSS support for CSS custom properties (variables), at-rules, pseudo-classes, and pseudo-elements you specify in the JSON files.
    // 
    // The file paths are relative to workspace and only workspace folder settings are considered.
    "css.customData": [],
  
    // Put braces on the same line as rules (`collapse`) or put braces on own line (`expand`).
    "css.format.braceStyle": "collapse",
  
    // Enable/disable default CSS formatter.
    "css.format.enable": true,
  
    // Maximum number of line breaks to be preserved in one chunk, when `css.format.preserveNewLines` is enabled.
    "css.format.maxPreserveNewLines": null,
  
    // Separate rulesets by a blank line.
    "css.format.newlineBetweenRules": true,
  
    // Separate selectors with a new line.
    "css.format.newlineBetweenSelectors": true,
  
    // Whether existing line breaks before rules and declarations should be preserved.
    "css.format.preserveNewLines": true,
  
    // Ensure a space character around selector separators '>', '+', '~' (e.g. `a > b`).
    "css.format.spaceAroundSelectorSeparator": false,
  
    // Show property and value documentation in CSS hovers.
    "css.hover.documentation": true,
  
    // Show references to MDN in CSS hovers.
    "css.hover.references": true,
  
    // Invalid number of parameters.
    "css.lint.argumentsInColorFunction": "error",
  
    // Do not use `width` or `height` when using `padding` or `border`.
    "css.lint.boxModel": "ignore",
  
    // When using a vendor-specific prefix make sure to also include all other vendor-specific properties.
    "css.lint.compatibleVendorPrefixes": "ignore",
  
    // Do not use duplicate style definitions.
    "css.lint.duplicateProperties": "ignore",
  
    // Do not use empty rulesets.
    "css.lint.emptyRules": "warning",
  
    // Avoid using `float`. Floats lead to fragile CSS that is easy to break if one aspect of the layout changes.
    "css.lint.float": "ignore",
  
    // `@font-face` rule must define `src` and `font-family` properties.
    "css.lint.fontFaceProperties": "warning",
  
    // Hex colors must consist of 3, 4, 6 or 8 hex numbers.
    "css.lint.hexColorLength": "error",
  
    // Selectors should not contain IDs because these rules are too tightly coupled with the HTML.
    "css.lint.idSelector": "ignore",
  
    // IE hacks are only necessary when supporting IE7 and older.
    "css.lint.ieHack": "ignore",
  
    // Avoid using `!important`. It is an indication that the specificity of the entire CSS has gotten out of control and needs to be refactored.
    "css.lint.important": "ignore",
  
    // Import statements do not load in parallel.
    "css.lint.importStatement": "ignore",
  
    // Property is ignored due to the display. E.g. with `display: inline`, the `width`, `height`, `margin-top`, `margin-bottom`, and `float` properties have no effect.
    "css.lint.propertyIgnoredDueToDisplay": "warning",
  
    // The universal selector (`*`) is known to be slow.
    "css.lint.universalSelector": "ignore",
  
    // Unknown at-rule.
    "css.lint.unknownAtRules": "warning",
  
    // Unknown property.
    "css.lint.unknownProperties": "warning",
  
    // Unknown vendor specific property.
    "css.lint.unknownVendorSpecificProperties": "ignore",
  
    // A list of properties that are not validated against the `unknownProperties` rule.
    "css.lint.validProperties": [],
  
    // When using a vendor-specific prefix, also include the standard property.
    "css.lint.vendorPrefix": "warning",
  
    // No unit for zero needed.
    "css.lint.zeroUnits": "ignore",
  
    // Traces the communication between Windsurf and the CSS language server.
    "css.trace.server": "off",
  
    // Enables or disables all validations.
    "css.validate": true
  
  },
  {
    // Insert semicolon at end of line when completing CSS properties.
    "less.completion.completePropertyWithSemicolon": true,
  
    // By default, Windsurf triggers property value completion after selecting a CSS property. Use this setting to disable this behavior.
    "less.completion.triggerPropertyValueCompletion": true,
  
    // Put braces on the same line as rules (`collapse`) or put braces on own line (`expand`).
    "less.format.braceStyle": "collapse",
  
    // Enable/disable default LESS formatter.
    "less.format.enable": true,
  
    // Maximum number of line breaks to be preserved in one chunk, when `less.format.preserveNewLines` is enabled.
    "less.format.maxPreserveNewLines": null,
  
    // Separate rulesets by a blank line.
    "less.format.newlineBetweenRules": true,
  
    // Separate selectors with a new line.
    "less.format.newlineBetweenSelectors": true,
  
    // Whether existing line breaks before rules and declarations should be preserved.
    "less.format.preserveNewLines": true,
  
    // Ensure a space character around selector separators '>', '+', '~' (e.g. `a > b`).
    "less.format.spaceAroundSelectorSeparator": false,
  
    // Show property and value documentation in LESS hovers.
    "less.hover.documentation": true,
  
    // Show references to MDN in LESS hovers.
    "less.hover.references": true,
  
    // Invalid number of parameters.
    "less.lint.argumentsInColorFunction": "error",
  
    // Do not use `width` or `height` when using `padding` or `border`.
    "less.lint.boxModel": "ignore",
  
    // When using a vendor-specific prefix make sure to also include all other vendor-specific properties.
    "less.lint.compatibleVendorPrefixes": "ignore",
  
    // Do not use duplicate style definitions.
    "less.lint.duplicateProperties": "ignore",
  
    // Do not use empty rulesets.
    "less.lint.emptyRules": "warning",
  
    // Avoid using `float`. Floats lead to fragile CSS that is easy to break if one aspect of the layout changes.
    "less.lint.float": "ignore",
  
    // `@font-face` rule must define `src` and `font-family` properties.
    "less.lint.fontFaceProperties": "warning",
  
    // Hex colors must consist of 3, 4, 6 or 8 hex numbers.
    "less.lint.hexColorLength": "error",
  
    // Selectors should not contain IDs because these rules are too tightly coupled with the HTML.
    "less.lint.idSelector": "ignore",
  
    // IE hacks are only necessary when supporting IE7 and older.
    "less.lint.ieHack": "ignore",
  
    // Avoid using `!important`. It is an indication that the specificity of the entire CSS has gotten out of control and needs to be refactored.
    "less.lint.important": "ignore",
  
    // Import statements do not load in parallel.
    "less.lint.importStatement": "ignore",
  
    // Property is ignored due to the display. E.g. with `display: inline`, the `width`, `height`, `margin-top`, `margin-bottom`, and `float` properties have no effect.
    "less.lint.propertyIgnoredDueToDisplay": "warning",
  
    // The universal selector (`*`) is known to be slow.
    "less.lint.universalSelector": "ignore",
  
    // Unknown at-rule.
    "less.lint.unknownAtRules": "warning",
  
    // Unknown property.
    "less.lint.unknownProperties": "warning",
  
    // Unknown vendor specific property.
    "less.lint.unknownVendorSpecificProperties": "ignore",
  
    // A list of properties that are not validated against the `unknownProperties` rule.
    "less.lint.validProperties": [],
  
    // When using a vendor-specific prefix, also include the standard property.
    "less.lint.vendorPrefix": "warning",
  
    // No unit for zero needed.
    "less.lint.zeroUnits": "ignore",
  
    // Enables or disables all validations.
    "less.validate": true
  
  },
  {
    // Insert semicolon at end of line when completing CSS properties.
    "scss.completion.completePropertyWithSemicolon": true,
  
    // By default, Windsurf triggers property value completion after selecting a CSS property. Use this setting to disable this behavior.
    "scss.completion.triggerPropertyValueCompletion": true,
  
    // Put braces on the same line as rules (`collapse`) or put braces on own line (`expand`).
    "scss.format.braceStyle": "collapse",
  
    // Enable/disable default SCSS formatter.
    "scss.format.enable": true,
  
    // Maximum number of line breaks to be preserved in one chunk, when `scss.format.preserveNewLines` is enabled.
    "scss.format.maxPreserveNewLines": null,
  
    // Separate rulesets by a blank line.
    "scss.format.newlineBetweenRules": true,
  
    // Separate selectors with a new line.
    "scss.format.newlineBetweenSelectors": true,
  
    // Whether existing line breaks before rules and declarations should be preserved.
    "scss.format.preserveNewLines": true,
  
    // Ensure a space character around selector separators '>', '+', '~' (e.g. `a > b`).
    "scss.format.spaceAroundSelectorSeparator": false,
  
    // Show property and value documentation in SCSS hovers.
    "scss.hover.documentation": true,
  
    // Show references to MDN in SCSS hovers.
    "scss.hover.references": true,
  
    // Invalid number of parameters.
    "scss.lint.argumentsInColorFunction": "error",
  
    // Do not use `width` or `height` when using `padding` or `border`.
    "scss.lint.boxModel": "ignore",
  
    // When using a vendor-specific prefix make sure to also include all other vendor-specific properties.
    "scss.lint.compatibleVendorPrefixes": "ignore",
  
    // Do not use duplicate style definitions.
    "scss.lint.duplicateProperties": "ignore",
  
    // Do not use empty rulesets.
    "scss.lint.emptyRules": "warning",
  
    // Avoid using `float`. Floats lead to fragile CSS that is easy to break if one aspect of the layout changes.
    "scss.lint.float": "ignore",
  
    // `@font-face` rule must define `src` and `font-family` properties.
    "scss.lint.fontFaceProperties": "warning",
  
    // Hex colors must consist of 3, 4, 6 or 8 hex numbers.
    "scss.lint.hexColorLength": "error",
  
    // Selectors should not contain IDs because these rules are too tightly coupled with the HTML.
    "scss.lint.idSelector": "ignore",
  
    // IE hacks are only necessary when supporting IE7 and older.
    "scss.lint.ieHack": "ignore",
  
    // Avoid using `!important`. It is an indication that the specificity of the entire CSS has gotten out of control and needs to be refactored.
    "scss.lint.important": "ignore",
  
    // Import statements do not load in parallel.
    "scss.lint.importStatement": "ignore",
  
    // Property is ignored due to the display. E.g. with `display: inline`, the `width`, `height`, `margin-top`, `margin-bottom`, and `float` properties have no effect.
    "scss.lint.propertyIgnoredDueToDisplay": "warning",
  
    // The universal selector (`*`) is known to be slow.
    "scss.lint.universalSelector": "ignore",
  
    // Unknown at-rule.
    "scss.lint.unknownAtRules": "warning",
  
    // Unknown property.
    "scss.lint.unknownProperties": "warning",
  
    // Unknown vendor specific property.
    "scss.lint.unknownVendorSpecificProperties": "ignore",
  
    // A list of properties that are not validated against the `unknownProperties` rule.
    "scss.lint.validProperties": [],
  
    // When using a vendor-specific prefix, also include the standard property.
    "scss.lint.vendorPrefix": "warning",
  
    // No unit for zero needed.
    "scss.lint.zeroUnits": "ignore",
  
    // Enables or disables all validations.
    "scss.validate": true
  
  },
  {
    // Specify a list of extensions that are allowed to use. This helps maintain a secure and consistent development environment by restricting the use of unauthorized extensions. For more information on how to configure this setting, please visit the [Configure Allowed Extensions](https://code.visualstudio.com/docs/setup/enterprise#_configure-allowed-extensions) section.
    "extensions.allowed": "*",
  
    // When enabled, automatically checks extensions for updates. If an extension has an update, it is marked as outdated in the Extensions view. The updates are fetched from a Microsoft online service.
    "extensions.autoCheckUpdates": true,
  
    // Controls the automatic update behavior of extensions. The updates are fetched from a Microsoft online service.
    //  - true: Download and install updates automatically for all extensions.
    //  - onlyEnabledExtensions: Download and install updates automatically only for enabled extensions.
    //  - false: Extensions are not automatically updated.
    "extensions.autoUpdate": true,
  
    // When enabled, editors with extension details will be automatically closed upon navigating away from the Extensions View.
    "extensions.closeExtensionDetailsOnViewChange": false,
  
    // When an extension is listed here, a confirmation prompt will not be shown when that extension handles a URI.
    "extensions.confirmedUriHandlerExtensionIds": [],
  
    // Configure an extension to execute in a different extension host process.
    "extensions.experimental.affinity": {},
  
    // When enabled, extensions which declare the `onStartupFinished` activation event will be activated after a timeout.
    "extensions.experimental.deferredStartupFinishedActivation": false,
  
    // When enabled, extensions can be searched for via Quick Access and report issues from there.
    "extensions.experimental.issueQuickAccess": true,
  
    // When enabled, extensions to update are fetched from Unpkg service.
    "extensions.gallery.useUnpkgResourceApi": true,
  
    // When enabled, the notifications for extension recommendations will not be shown.
    "extensions.ignoreRecommendations": false,
  
    // This setting is deprecated. Use extensions.ignoreRecommendations setting to control recommendation notifications. Use Extensions view's visibility actions to hide Recommended view by default.
    // 
    "extensions.showRecommendationsOnlyOnDemand": false,
  
    // Override the untrusted workspace support of an extension. Extensions using `true` will always be enabled. Extensions using `limited` will always be enabled, and the extension will hide functionality that requires trust. Extensions using `false` will only be enabled only when the workspace is trusted.
    "extensions.supportUntrustedWorkspaces": {},
  
    // Override the virtual workspaces support of an extension.
    "extensions.supportVirtualWorkspaces": {},
  
    // When enabled, extensions are verified to be signed before getting installed.
    "extensions.verifySignature": true,
  
    // Enable web worker extension host.
    //  - true: The Web Worker Extension Host will always be launched.
    //  - false: The Web Worker Extension Host will never be launched.
    //  - auto: The Web Worker Extension Host will be launched when a web extension needs it.
    "extensions.webWorker": "auto"
  
  },
  {
    // Enable/disable the ability of smart scrolling in the output view. Smart scrolling allows you to lock scrolling automatically when you click in the output view and unlocks when you click in the last line.
    "output.smartScroll.enabled": true
  
  },
  {
    // A relative path to the workspace where stores the compiled output. `Only` effective in the `WORKSPACE` scope. The setting will `NOT` affect Maven or Gradle project.
    "java.project.outputPath": "",
  
    // Configure glob patterns for referencing local libraries to a Java project.
    "java.project.referencedLibraries": [
      "lib/**/*.jar"
    ],
  
    // Relative paths to the workspace where stores the source files. `Only` effective in the `WORKSPACE` scope. The setting will `NOT` affect Maven or Gradle project.
    "java.project.sourcePaths": []
  
  },
  {
    // Specifies default mojo execution action when no associated metadata can be detected.
    "java.configuration.maven.defaultMojoExecutionAction": "ignore",
  
    // Path to Maven's global settings.xml
    "java.configuration.maven.globalSettings": null,
  
    // Path to Maven's lifecycle mappings xml
    "java.configuration.maven.lifecycleMappings": null,
  
    // Specifies severity if the plugin execution is not covered by Maven build lifecycle.
    "java.configuration.maven.notCoveredPluginExecutionSeverity": "warning",
  
    // Path to Maven's user settings.xml
    "java.configuration.maven.userSettings": null,
  
    // Enable/disable test classpath segregation. When enabled, this permits the usage of test resources within a Maven project as dependencies within the compile scope of other projects.
    "java.import.maven.disableTestClasspathFlag": false,
  
    // Enable/disable the Maven importer.
    "java.import.maven.enabled": true,
  
    // Enable/disable the Maven offline mode.
    "java.import.maven.offline.enabled": false,
  
    // Enable/disable download of Maven source artifacts as part of importing Maven projects.
    "java.maven.downloadSources": false,
  
    // Force update of Snapshots/Releases.
    "java.maven.updateSnapshots": false
  
  },
  {
    // Enable/disable the annotation processing on Gradle projects and delegate Annotation Processing to JDT APT. Only works for Gradle 5.2 or higher.
    "java.import.gradle.annotationProcessing.enabled": true,
  
    // Arguments to pass to Gradle.
    "java.import.gradle.arguments": null,
  
    // Enable/disable the Gradle importer.
    "java.import.gradle.enabled": true,
  
    // Use Gradle from the specified local installation directory or GRADLE_HOME if the Gradle wrapper is missing or disabled and no 'java.import.gradle.version' is specified.
    "java.import.gradle.home": null,
  
    // The location to the JVM used to run the Gradle daemon.
    "java.import.gradle.java.home": null,
  
    // JVM arguments to pass to Gradle.
    "java.import.gradle.jvmArguments": null,
  
    // Enable/disable the Gradle offline mode.
    "java.import.gradle.offline.enabled": false,
  
    // Setting for GRADLE_USER_HOME.
    "java.import.gradle.user.home": null,
  
    // Use Gradle from the specific version if the Gradle wrapper is missing or disabled.
    "java.import.gradle.version": null,
  
    // Use Gradle from the 'gradle-wrapper.properties' file.
    "java.import.gradle.wrapper.enabled": true,
  
    // Defines allowed/disallowed SHA-256 checksums of Gradle Wrappers
    "java.imports.gradle.wrapper.checksums": []
  
  },
  {
    // Enable/disable the 'auto build'
    "java.autobuild.enabled": true,
  
    // Specify how to enable the annotation-based null analysis.
    "java.compile.nullAnalysis.mode": "interactive",
  
    // Specify the Nonnull annotation types to be used for null analysis. If more than one annotation is specified, then the topmost annotation will be used first if it exists in project dependencies. This setting will be ignored if `java.compile.nullAnalysis.mode` is set to `disabled`
    "java.compile.nullAnalysis.nonnull": [
      "javax.annotation.Nonnull",
      "org.eclipse.jdt.annotation.NonNull",
      "org.springframework.lang.NonNull"
    ],
  
    // Specify the NonNullByDefault annotation types to be used for null analysis. If more than one annotation is specified, then the topmost annotation will be used first if it exists in project dependencies. This setting will be ignored if `java.compile.nullAnalysis.mode` is set to `disabled`
    "java.compile.nullAnalysis.nonnullbydefault": [
      "javax.annotation.ParametersAreNonnullByDefault",
      "org.eclipse.jdt.annotation.NonNullByDefault",
      "org.springframework.lang.NonNullApi"
    ],
  
    // Specify the Nullable annotation types to be used for null analysis. If more than one annotation is specified, then the topmost annotation will be used first if it exists in project dependencies. This setting will be ignored if `java.compile.nullAnalysis.mode` is set to `disabled`
    "java.compile.nullAnalysis.nullable": [
      "javax.annotation.Nullable",
      "org.eclipse.jdt.annotation.Nullable",
      "org.springframework.lang.Nullable"
    ],
  
    // Specifies the severity of the message when the classpath is incomplete for a Java file
    "java.errors.incompleteClasspath.severity": "warning",
  
    // Max simultaneous project builds
    "java.maxConcurrentBuilds": 1,
  
    // Specifies the url or file path to the workspace Java settings. See [Setting Global Preferences](https://github.com/redhat-developer/vscode-java/wiki/Settings-Global-Preferences)
    "java.settings.url": null
  
  },
  {
    // Automatically detect JDKs installed on local machine at startup. If you have specified the same JDK version in `java.configuration.runtimes`, the extension will use that version first.
    "java.configuration.detectJdksAtStart": true,
  
    // Map Java Execution Environments to local JDKs.
    "java.configuration.runtimes": []
  
  },
  {
    // Includes the comments during code formatting.
    "java.format.comments.enabled": true,
  
    // Enable/disable default Java formatter
    "java.format.enabled": true,
  
    // Enable/disable automatic block formatting when typing `;`, `<enter>` or `}`
    "java.format.onType.enabled": true,
  
    // Optional formatter profile name from the Eclipse formatter settings.
    "java.format.settings.profile": null,
  
    // Specifies the url or file path to the [Eclipse formatter xml settings](https://github.com/redhat-developer/vscode-java/wiki/Formatter-settings).
    "java.format.settings.url": null
  
  },
  {
    // Enable/disable chain completion support. Chain completions are only available when completions are invoked by the completions shortcut
    "java.completion.chain.enabled": false,
  
    // Enable/disable the collapse of overloaded methods in completion items. Overrides `java.completion.guessMethodArguments`.
    "java.completion.collapseCompletionItems": false,
  
    // Enable/disable code completion support
    "java.completion.enabled": true,
  
    // [Experimental] Select code completion engine
    //  - ecj: Use ECJ-based code completion engine (default)
    //  - dom: Use (highly experimental) JDT DOM-based code completion engine (requires `java.jdt.ls.javac.enabled` to be `on`)
    "java.completion.engine": "ecj",
  
    // Defines a list of static members or types with static members. Content assist will propose those static members even if the import is missing.
    "java.completion.favoriteStaticMembers": [
      "org.junit.Assert.*",
      "org.junit.Assume.*",
      "org.junit.jupiter.api.Assertions.*",
      "org.junit.jupiter.api.Assumptions.*",
      "org.junit.jupiter.api.DynamicContainer.*",
      "org.junit.jupiter.api.DynamicTest.*",
      "org.mockito.Mockito.*",
      "org.mockito.ArgumentMatchers.*",
      "org.mockito.Answers.*"
    ],
  
    // Defines the type filters. All types whose fully qualified name matches the selected filter strings will be ignored in content assist or quick fix proposals and when organizing imports. For example 'java.awt.*' will hide all types from the awt packages.
    "java.completion.filteredTypes": [
      "java.awt.*",
      "com.sun.*",
      "sun.*",
      "jdk.*",
      "org.graalvm.*",
      "io.micrometer.shaded.*"
    ],
  
    // Specify how the arguments will be filled during completion.
    //  - auto: Use 'off' only when using Visual Studio Code - Insiders, other platform will defaults to 'insertBestGuessedArguments'.
    //  - off: Method arguments will not be inserted during completion.
    //  - insertParameterNames: The parameter names will be inserted during completion.
    //  - insertBestGuessedArguments: The best guessed arguments will be inserted during completion according to the code context.
    "java.completion.guessMethodArguments": "auto",
  
    // Defines the sorting order of import statements. A package or type name prefix (e.g. 'org.eclipse') is a valid entry. An import is always added to the most specific group. As a result, the empty string (e.g. '') can be used to group all other imports. Static imports are prefixed with a '#'
    "java.completion.importOrder": [
      "#",
      "java",
      "javax",
      "org",
      "com",
      ""
    ],
  
    // [Experimental] Enable/disable lazily resolving text edits for code completion.
    "java.completion.lazyResolveTextEdit.enabled": true,
  
    // Specify whether to match case for code completion.
    //  - firstLetter: Match case for the first letter when doing completion.
    //  - off: Do not match case when doing completion.
    "java.completion.matchCase": "firstLetter",
  
    // Maximum number of completion results (not including snippets).
    // `0` (the default value) disables the limit, all results are returned. In case of performance problems, consider setting a sensible limit.
    "java.completion.maxResults": 0,
  
    // Enable/disable postfix completion support. `editor.snippetSuggestions` can be used to customize how postfix snippets are sorted.
    "java.completion.postfix.enabled": true,
  
    // Enable/disable to show the description in signature help.
    "java.signatureHelp.description.enabled": false,
  
    // Enable/disable the signature help.
    "java.signatureHelp.enabled": true
  
  },
  {
    // Controls whether code cells in the interactive window are collapsed by default.
    "interactiveWindow.collapseCellInputCode": "fromEditor",
  
    // The limit of notebook output size in kilobytes (KB) where notebook files will no longer be backed up for hot reload. Use 0 for unlimited.
    "notebook.backup.sizeLimit": 10000,
  
    // When enabled, notebook breadcrumbs contain code cells.
    "notebook.breadcrumbs.showCodeCells": true,
  
    // Controls the verbosity of the cell execution time in the cell status bar.
    //  - default: The cell execution duration is visible, with advanced information in the hover tooltip.
    //  - verbose: The cell last execution timestamp and duration are visible, with advanced information in the hover tooltip.
    "notebook.cellExecutionTimeVerbosity": "default",
  
    // Show available diagnostics for cell failures.
    "notebook.cellFailureDiagnostics": true,
  
    // Controls where the focus indicator is rendered, either along the cell borders or on the left gutter.
    "notebook.cellFocusIndicator": "gutter",
  
    // Where the cell toolbar should be shown, or whether it should be hidden.
    "notebook.cellToolbarLocation": {
      "default": "right"
    },
  
    // Whether the cell toolbar should appear on hover or click.
    "notebook.cellToolbarVisibility": "click",
  
    // Control whether the notebook editor should be rendered in a compact form. For example, when turned on, it will decrease the left margin width.
    "notebook.compactView": true,
  
    // Control whether a confirmation prompt is required to delete a running cell.
    "notebook.confirmDeleteRunningCell": true,
  
    // Control whether outputs action should be rendered in the output toolbar.
    "notebook.consolidatedOutputButton": true,
  
    // Control whether extra actions are shown in a dropdown next to the run button.
    "notebook.consolidatedRunButton": false,
  
    // Defines a default notebook formatter which takes precedence over all other formatter settings. Must be the identifier of an extension contributing a formatter.
    //  - null: None
    //  - Posit.air-vscode: R formatter and language server
    //  - ms-python.black-formatter: Formatting support for Python files using the Black formatter.
    //  - saoudrizwan.claude-dev: Autonomous coding agent right in your IDE, capable of creating/editing files, running commands, using the browser, and more with your permission every step of the way.
    //  - coddx.coddx-alpha: Coddx - a collection of tools that help developers program efficiently. Some useful features like: Kanban Board to manage project tasks in TODO.md, generating multiple files from templates quickly.
    //  - formulahendry.code-runner: Run C, C++, Java, JS, PHP, Python, Perl, Ruby, Go, Lua, Groovy, PowerShell, CMD, BASH, F#, C#, VBScript, TypeScript, CoffeeScript, Scala, Swift, Julia, Crystal, OCaml, R, AppleScript, Elixir, VB.NET, Clojure, Haxe, Obj-C, Rust, Racket, Scheme, AutoHotkey, AutoIt, Kotlin, Dart, Pascal, Haskell, Nim, D, Lisp, Kit, V, SCSS, Sass, CUDA, Less, Fortran, Ring, Standard ML, Zig, Mojo, Erlang, SPWN, Pkl, Gleam
    //  - ms-vscode.cpptools: C/C++ IntelliSense, debugging, and code browsing.
    //  - vscode.css-language-features: Provides rich language support for CSS, LESS and SCSS files.
    //  - tamasfe.even-better-toml: Fully-featured TOML support
    //  - j-brooke.fracturedjsonvsc: A JSON formatter that produces human-readable but fairly compact output.
    //  - ms-python.gather: Adds gather functionality in the Python language to the Jupyter Extension
    //  - codezombiech.gitignore: Lets you pull .gitignore templates from the https://github.com/github/gitignore repository. Language support for .gitignore files.
    //  - vscode.html-language-features: Provides rich language support for HTML and Handlebar files
    //  - ms-python.isort: Import Organization support for Python files using `isort`.
    //  - redhat.java: Java Linting, Intellisense, formatting, refactoring, Maven/Gradle support and more...
    //  - vscode.json-language-features: Provides rich language support for JSON files.
    //  - yzhang.markdown-all-in-one: All you need to write Markdown (keyboard shortcuts, table of contents, auto preview and more)
    //  - zaaack.markdown-editor: A full-featured WYSIWYG editor for markdown.
    //  - mervin.markdown-formatter:  A Markdown Plugin for code artist
    //  - vscode.markdown-language-features: Provides rich language support for Markdown.
    //  - vscode.markdown-math: Adds math support to Markdown in notebooks.
    //  - jithurjacob.nbpreviewer: An easy to use extension for previewing Jupyter Notebooks within VS Code
    //  - tomoki1207.pdf: Display pdf file in VSCode.
    //  - vscode.php-language-features: Provides rich language support for PHP files.
    //  - ms-vscode.powershell: Develop PowerShell modules, commands and scripts in Visual Studio Code!
    //  - esbenp.prettier-vscode: Code formatter using prettier
    //  - DiogoNolasco.pyinit: Automatic generation of python __init__.py files and import statements within folders
    //  - ms-python.pylint: Linting support for Python files using Pylint.
    //  - ms-python.python: Python language support with extension access points for IntelliSense (Pylance), Debugging (Python Debugger), linting, formatting, refactoring, unit tests, and more.
    //  - donjayamanne.python-environment-manager: View and manage Python environments & packages.
    //  - REditorSupport.r: R Extension for Visual Studio Code
    //  - mechatroner.rainbow-csv: Highlight CSV and TSV files, Run SQL-like queries
    //  - ms-vscode-remote.remote-ssh-edit: Edit SSH configuration files
    //  - RooVeterinaryInc.roo-cline: A whole dev team of AI agents in your editor.
    //  - charliermarsh.ruff: A Visual Studio Code extension with support for the Ruff linter and formatter.
    //  - vscode.typescript-language-features: Provides rich language support for JavaScript and TypeScript.
    //  - KevinRose.vsc-python-indent: Correct Python indentation
    //  - RandomFractalsInc.vscode-data-preview: Data Preview 🈸 extension for importing 📤 viewing 🔎 slicing 🔪 dicing 🎲 charting 📊 & exporting 📥 large JSON array/config, YAML, Apache Arrow, Avro, Parquet & Excel data files
    //  - RandomFractalsInc.vscode-data-table: Data Table 🈸, Flat Data Grid 中 & Data Summary 🈷️ Renderers for VSCode Notebook 📓 Cell ⌗ Data Outputs
    //  - batisteo.vscode-django: Beautiful syntax and scoped snippets for perfectionists with deadlines
    //  - ms-azuretools.vscode-docker: Makes it easy to create, manage, and debug containerized applications.
    //  - vscjava.vscode-gradle: Manage Gradle Projects, run Gradle tasks and provide better Gradle file authoring experience in VS Code
    //  - vscjava.vscode-java-debug: A lightweight Java debugger for Visual Studio Code
    //  - vscjava.vscode-java-pack: Popular extensions for Java development that provides Java IntelliSense, debugging, testing, Maven/Gradle support, project management and more
    //  - DavidAnson.vscode-markdownlint: Markdown linting and style checking for Visual Studio Code
    //  - vscjava.vscode-maven: Manage Maven projects, execute goals, generate project from archetype, improve user experience for Java developers.
    //  - franneck94.vscode-python-config: Creates config files for modern Python projects
    //  - njqdev.vscode-python-typehint: Type hint completion for Python.
    //  - vmware.vscode-spring-boot: Provides validation and content assist for Spring Boot `application.properties`, `application.yml` properties files. As well as Boot-specific support for `.java` files.
    //  - redhat.vscode-xml: XML Language Support by Red Hat
    //  - redhat.vscode-yaml: YAML Language Support by Red Hat, with built-in Kubernetes syntax support
    //  - Codeium.windsurfPyright: A language server for Python in Windsurf
    //  - DotJoshJohnson.xml: XML Formatting, XQuery, and XPath Tools for Visual Studio Code
    //  - almenon.arepl: real-time python scratchpad
    //  - dzhavat.bracket-pair-toggler: Quickly toggle 'Bracket Pair Colorization' setting with a simple command
    //  - vscode.configuration-editing: Provides capabilities (advanced IntelliSense, auto-fixing) in configuration files like settings, launch, and extension recommendation files.
    //  - phplasma.csv-to-table: Convert a CSV/TSV/PSV file to an ASCII formatted table
    //  - vscode.debug-auto-launch: Helper for auto-attach feature when node-debug extensions are not active.
    //  - vscode.debug-server-ready: Open URI in browser if server under debugging is ready.
    //  - ms-python.debugpy: Python Debugger extension using debugpy.
    //  - adamraichu.docx-viewer: An extension which provides a read-only renderer for docx files using the npm package docx-preview. Now with configuration!
    //  - vscode.emmet: Emmet support for Windsurf
    //  - vscode.extension-editing: Provides linting capabilities for authoring extensions.
    //  - atsyplenkov.formalist: Make R code properly formatted
    //  - GrapeCity.gc-excelviewer: Edit Excel spreadsheets and CSV files in Visual Studio Code and VS Code for the Web.
    //  - vscode.git: Git SCM Integration
    //  - vscode.git-base: Git static contributions and pickers.
    //  - mhutchie.git-graph: View a Git Graph of your repository, and perform Git actions from the graph.
    //  - donjayamanne.githistory: View git log, file history, compare branches or commits
    //  - vscode.github: GitHub features for Windsurf
    //  - vscode.github-authentication: GitHub Authentication Provider
    //  - vscode.grunt: Extension to add Grunt capabilities to VS Code.
    //  - vscode.gulp: Extension to add Gulp capabilities to VSCode.
    //  - VisualStudioExptTeam.intellicode-api-usage-examples: See relevant code examples from GitHub for over 100K different APIs right in your editor.
    //  - vscode.ipynb: Provides basic support for opening and reading Jupyter's .ipynb notebook files
    //  - vscode.jake: Extension to add Jake capabilities to Windsurf.
    //  - ms-vscode.js-debug: An extension for debugging Node.js programs and Chrome.
    //  - ms-vscode.js-debug-companion: Companion extension to js-debug that provides capability for remote debugging
    //  - ZainChen.json: Json for Visual Studio Code
    //  - ms-toolsai.jupyter: Jupyter notebook support, interactive programming and computing that supports Intellisense, debugging and more.
    //  - ms-toolsai.jupyter-hub: Support for connecting to Jupyter Hub in VS Code along with the Jupyter Extension
    //  - ms-toolsai.jupyter-renderers: Renderers for Jupyter Notebooks (with plotly, vega, gif, png, svg, jpeg and other such outputs)
    //  - fnando.linter: An extension for VSCode that provides linting for multiple languages in on package.
    //  - ms-vscode.live-server: Hosts a local server in your workspace for you to preview your webpages on.
    //  - xyz.local-history: Save files into local history
    //  - bierner.markdown-checkbox: Adds checkbox support to the built-in markdown preview
    //  - bierner.markdown-emoji: Adds emoji syntax support to VS Code's built-in markdown preview and markdown cells in notebook
    //  - bierner.markdown-footnotes: Adds [^footnote] syntax support to VS Code's built-in markdown preview
    //  - bierner.markdown-mermaid: Adds Mermaid diagram and flowchart support to VS Code's builtin markdown preview
    //  - shd101wyy.markdown-preview-enhanced: Markdown Preview Enhanced ported to vscode
    //  - bierner.markdown-preview-github-styles: Changes VS Code's built-in markdown preview to match Github's style
    //  - bierner.markdown-yaml-preamble: Renders yaml front matter as a table in the built-in markdown preview
    //  - PKief.material-icon-theme: Material Design Icons for Visual Studio Code
    //  - zhuangtongfa.material-theme: Atom's iconic One Dark theme for Visual Studio Code
    //  - vscode.media-preview: Provides Windsurf's built-in previews for images, audio, and video
    //  - vscode.merge-conflict: Highlighting and commands for inline merge conflicts.
    //  - vscode.microsoft-authentication: Microsoft authentication provider
    //  - vscode.npm: Extension to add task support for npm scripts.
    //  - jeanp413.open-remote-wsl: Open any folder in the Windows Subsystem for Linux (WSL).
    //  - kv9898.open-remote-wsl: Open any folder in the Windows Subsystem for Linux (WSL) for Positron.
    //  - christian-kohler.path-intellisense: Visual Studio Code plugin that autocompletes filenames
    //  - pnp.polacode: 📸  Polaroid for your code
    //  - mohsen1.prettify-json: Visual Studio Code Prettify JSON Extension
    //  - alefragnani.project-manager: Easily switch between projects
    //  - RDebugger.r-debugger: R Debugger for VS Code
    //  - vscode.references-view: Reference Search results as separate, stable view in the sidebar
    //  - ms-vscode.remote-explorer: View remote machines for SSH and Tunnels.
    //  - ms-vscode.remote-server: Connect to a remote machine through a Tunnel
    //  - vscode.search-result: Provides syntax highlighting and language features for tabbed search results.
    //  - vscode.simple-browser: A very basic built-in webview for displaying web content.
    //  - vscode.terminal-suggest: Extension to add terminal completions for zsh, bash, and fish terminals.
    //  - Gruntfuggly.todo-tree: Show TODO, FIXME, etc. comment tags in a tree view
    //  - vscode.tunnel-forwarding: Allows forwarding local ports to be accessible over the internet.
    //  - kamikillerto.vscode-colorize: A vscode extension to help visualize css colors in files.
    //  - ms-dotnettools.vscode-dotnet-runtime: This extension installs and manages different versions of the .NET SDK and Runtime.
    //  - hediet.vscode-drawio: This unofficial extension integrates Draw.io into VS Code.
    //  - vscjava.vscode-java-dependency: Manage Java projects in Visual Studio Code
    //  - vscjava.vscode-java-test: Run and debug JUnit or TestNG test cases.
    //  - ms-vscode.vscode-js-profile-table: Text visualizer for profiles taken from the JavaScript debugger
    //  - ms-toolsai.vscode-jupyter-cell-tags: Jupyter Cell Tags support for VS Code
    //  - ms-toolsai.vscode-jupyter-powertoys: Experimental features for Jupyter notebook support in VS Code.
    //  - ms-toolsai.vscode-jupyter-slideshow: Jupyter Slide Show support for VS Code
    //  - ziyasal.vscode-open-in-github: Jump to a source code line in GitHub, GitLab, Gitea, Bitbucket, VisualStudio.com !
    //  - ChrisChinchilla.vscode-pandoc: Renders markdown through pandoc
    //  - ms-vscode.vscode-speech: A VS Code extension to bring speech-to-text and other voice capabilities to VS Code.
    //  - vscjava.vscode-spring-boot-dashboard: Spring Boot Dashboard for VS Code
    //  - vscjava.vscode-spring-initializr: A lightweight extension based on Spring Initializr to generate quick start Spring Boot Java projects.
    //  - ms-windows-ai-studio.windows-ai-studio: AI Toolkit for VS Code streamlines generative AI app development by integrating tools and models from Azure AI Studio and Hugging Face. Browse and download public models, fine-tune, test, and use them in your Windows applications.
    //  - codeium.windsurf: The modern coding superpower: free AI code acceleration plugin for your favorite languages. Type less. Code more. Ship faster.
    //  - Codeium.windsurf-dev-containers: Use devcontainers within Windsurf
    //  - codeium.windsurf-remote-openssh: Connect to remote machines over SSH using Windsurf
    //  - codeium.windsurf-remote-wsl: Open any folder in the Windows Subsystem for Linux (WSL).
    "notebook.defaultFormatter": null,
  
    // Whether to use the enhanced text diff editor for notebook.
    "notebook.diff.enablePreview": true,
  
    // Hide Metadata Differences
    "notebook.diff.ignoreMetadata": false,
  
    // Hide Outputs Differences
    "notebook.diff.ignoreOutputs": false,
  
    // Whether to render the overview ruler in the diff editor for notebook.
    "notebook.diff.overviewRuler": false,
  
    // Priority list for output mime types
    "notebook.displayOrder": [],
  
    // Control whether the notebook editor should allow moving cells through drag and drop.
    "notebook.dragAndDropEnabled": true,
  
    // Settings for code editors used in notebooks. This can be used to customize most editor.* settings.
    "notebook.editorOptionsCustomizations": {},
  
    // Enable experimental generate action to create code cell with inline chat enabled.
    "notebook.experimental.generate": true,
  
    // Enables the incremental saving of notebooks between processes and across Remote connections. When enabled, only the changes to the notebook are sent to the extension host, improving performance for large notebooks and slow network connections.
    "notebook.experimental.remoteSave": false,
  
    // Customize the Find Widget behavior for searching within notebook cells. When both markup source and markup preview are enabled, the Find Widget will search either the source code or preview based on the current state of the cell.
    "notebook.find.filters": {
      "markupSource": true,
      "markupPreview": true,
      "codeSource": true,
      "codeOutput": true
    },
  
    // Format a notebook cell upon execution. A formatter must be available.
    "notebook.formatOnCellExecution": false,
  
    // Format a notebook on save. A formatter must be available and the editor must not be shutting down. When `files.autoSave` is set to `afterDelay`, the file will only be formatted when saved explicitly.
    "notebook.formatOnSave.enabled": false,
  
    // Control whether to render a global toolbar inside the notebook editor.
    "notebook.globalToolbar": true,
  
    // Control whether the actions on the notebook toolbar should render label or not.
    "notebook.globalToolbarShowLabel": "always",
  
    // When enabled, the Go to Symbol Quick Pick will display full code symbols from the notebook, as well as Markdown headers.
    "notebook.gotoSymbols.showAllSymbols": true,
  
    // Enable the showing of inline values within notebook code cells after cell execution. Values will remain until the cell is edited, re-executed, or explicitly cleared via the Clear All Outputs toolbar button or the `Notebook: Clear Inline Values` command. 
    "notebook.inlineValues": false,
  
    // When enabled, insert a final new line into the end of code cells when saving a notebook.
    "notebook.insertFinalNewline": false,
  
    // Control where the insert cell actions should appear.
    //  - betweenCells: A toolbar that appears on hover between cells.
    //  - notebookToolbar: The toolbar at the top of the notebook editor.
    //  - both: Both toolbars.
    //  - hidden: The insert actions don't appear anywhere.
    "notebook.insertToolbarLocation": "both",
  
    // Controls the display of line numbers in the cell editor.
    "notebook.lineNumbers": "off",
  
    // Controls the line height in pixels of markdown cells in notebooks. When set to `0`, `normal` will be used
    "notebook.markdown.lineHeight": 0,
  
    // Controls the font family of rendered markup in notebooks. When left blank, this will fall back to the default workbench font family.
    "notebook.markup.fontFamily": "",
  
    // Controls the font size in pixels of rendered markup in notebooks. When set to `0`, 120% of `editor.fontSize` is used.
    "notebook.markup.fontSize": 0,
  
    // Experimental. Enables a limited set of multi cursor controls across multiple cells in the notebook editor. Currently supported are core editor actions (typing/cut/copy/paste/composition) and a limited subset of editor commands.
    "notebook.multiCursor.enabled": false,
  
    // When enabled cursor can navigate to the next/previous cell when the current cursor in the cell editor is at the first/last line.
    "notebook.navigation.allowNavigateToSurroundingCells": true,
  
    // When enabled, notebook outline shows code cells.
    "notebook.outline.showCodeCells": false,
  
    // When enabled, notebook outline shows code cell symbols. Relies on `notebook.outline.showCodeCells` being enabled.
    "notebook.outline.showCodeCellSymbols": true,
  
    // When enabled, notebook outline will show only markdown cells containing a header.
    "notebook.outline.showMarkdownHeadersOnly": true,
  
    // The font family of the output text within notebook cells. When set to empty, the `editor.fontFamily` is used.
    "notebook.output.fontFamily": "",
  
    // Font size for the output text within notebook cells. When set to 0, `editor.fontSize` is used.
    "notebook.output.fontSize": 0,
  
    // Line height of the output text within notebook cells.
    //  - When set to 0, editor line height is used.
    //  - Values between 0 and 8 will be used as a multiplier with the font size.
    //  - Values greater than or equal to 8 will be used as effective values.
    "notebook.output.lineHeight": 0,
  
    // Control whether to disable filepath links in the output of notebook cells.
    "notebook.output.linkifyFilePaths": true,
  
    // Control whether to render error output in a minimal style.
    "notebook.output.minimalErrorRendering": false,
  
    // Initially render notebook outputs in a scrollable region when longer than the limit.
    "notebook.output.scrolling": false,
  
    // Controls how many lines of text are displayed in a text output. If `notebook.output.scrolling` is enabled, this setting is used to determine the scroll height of the output.
    "notebook.output.textLineLimit": 30,
  
    // Controls whether the lines in output should wrap.
    "notebook.output.wordWrap": false,
  
    // How far to scroll when revealing the next cell upon running notebook.cell.executeAndSelectBelow.
    //  - fullCell: Scroll to fully reveal the next cell.
    //  - firstLine: Scroll to reveal the first line of the next cell.
    //  - none: Do not scroll.
    "notebook.scrolling.revealNextCellOnExecute": "fullCell",
  
    // Whether the cell status bar should be shown.
    //  - hidden: The cell Status bar is always hidden.
    //  - visible: The cell Status bar is always visible.
    //  - visibleAfterExecute: The cell Status bar is hidden until the cell has executed. Then it becomes visible to show the execution status.
    "notebook.showCellStatusBar": "visible",
  
    // Controls when the Markdown header folding arrow is shown.
    //  - always: The folding controls are always visible.
    //  - never: Never show the folding controls and reduce the gutter size.
    //  - mouseover: The folding controls are visible only on mouseover.
    "notebook.showFoldingControls": "mouseover",
  
    // Experimental. Control whether to render notebook Sticky Scroll headers in the notebook editor.
    "notebook.stickyScroll.enabled": false,
  
    // Control whether nested sticky lines appear to stack flat or indented.
    //  - flat: Nested sticky lines appear flat.
    //  - indented: Nested sticky lines appear indented.
    "notebook.stickyScroll.mode": "indented",
  
    // Whether to use separate undo/redo stack for each cell.
    "notebook.undoRedoPerCell": true,
  
    // Enable the experimental notebook variables view within the debug panel.
    "notebook.variablesView": false
  
  },
  {
    // Automatically scroll the interactive window to show the output of the last statement executed. If this value is false, the window will only scroll if the last cell was already the one scrolled to.
    "interactiveWindow.alwaysScrollOnNewCell": true,
  
    // Execute the Interactive Window (REPL) input box with shift+enter, so that enter can be used to create a newline.
    "interactiveWindow.executeWithShiftEnter": false,
  
    // Prompt to save the interactive window when it is closed. Only new interactive windows will be affected by this setting change.
    "interactiveWindow.promptToSaveOnClose": false,
  
    // Display a hint in the Interactive Window (REPL) input box to indicate how to execute code.
    "interactiveWindow.showExecutionHint": true
  
  },
  {
    // When enabled, slow renderers are automatically profiled.
    "application.experimental.rendererProfiling": false
  
  },
  {
    // Whether to generate the 'final' modifer for code actions that create new declarations.
    //  - none: Do not generate final modifier.
    //  - fields: Generate 'final' modifier only for new field declarations.
    //  - variables: Generate 'final' modifier only for new variable declarations.
    //  - all: Generate 'final' modifier for all new declarations.
    "java.codeGeneration.addFinalForNewDeclaration": "none",
  
    // Generate method comments when generating the methods.
    "java.codeGeneration.generateComments": false,
  
    // Use 'instanceof' to compare types when generating the hashCode and equals methods.
    "java.codeGeneration.hashCodeEquals.useInstanceof": false,
  
    // Use Objects.hash and Objects.equals when generating the hashCode and equals methods. This setting only applies to Java 7 and higher.
    "java.codeGeneration.hashCodeEquals.useJava7Objects": false,
  
    // Specifies the insertion location of the code generated by source actions.
    //  - afterCursor: Insert the generated code after the member where the cursor is located.
    //  - beforeCursor: Insert the generated code before the member where the cursor is located.
    //  - lastMember: Insert the generated code as the last member of the target type.
    "java.codeGeneration.insertionLocation": "afterCursor",
  
    // The code style for generating the toString method.
    //  - STRING_CONCATENATION: String concatenation
    //  - STRING_BUILDER: StringBuilder/StringBuffer
    //  - STRING_BUILDER_CHAINED: StringBuilder/StringBuffer - chained call
    //  - STRING_FORMAT: String.format/MessageFormat
    "java.codeGeneration.toString.codeStyle": "STRING_CONCATENATION",
  
    // Limit number of items in arrays/collections/maps to list, if 0 then list all.
    "java.codeGeneration.toString.limitElements": 0,
  
    // List contents of arrays instead of using native toString().
    "java.codeGeneration.toString.listArrayContents": true,
  
    // Skip null values when generating the toString method.
    "java.codeGeneration.toString.skipNullValues": false,
  
    // The template for generating the toString method.
    "java.codeGeneration.toString.template": "${object.className} [${member.name()}=${member.value}, ${otherMembers}]",
  
    // Use blocks in 'if' statements when generating the methods.
    "java.codeGeneration.useBlocks": false,
  
    // Defines the `smart semicolon` detection. Defaults to `false`.
    "java.edit.smartSemicolonDetection.enabled": false,
  
    // Specifies the file header comment for new Java file. Supports configuring multi-line comments with an array of strings, and using ${variable} to reference the [predefined variables](command:_java.templateVariables).
    "java.templates.fileHeader": [],
  
    // Specifies the type comment for new Java type. Supports configuring multi-line comments with an array of strings, and using ${variable} to reference the [predefined variables](command:_java.templateVariables).
    "java.templates.typeComment": []
  
  },
  {
    // When opening a file from the Explorer in a terminal, determines what kind of terminal will be launched
    //  - integrated: Use Windsurf's integrated terminal.
    //  - external: Use the configured external terminal.
    //  - both: Use the other two together.
    "terminal.explorerKind": "integrated",
  
    // Customizes which terminal to run on Linux.
    "terminal.external.linuxExec": "xterm",
  
    // Customizes which terminal application to run on macOS.
    "terminal.external.osxExec": "Terminal.app",
  
    // Customizes which terminal to run on Windows.
    "terminal.external.windowsExec": "C:\\WINDOWS\\System32\\cmd.exe",
  
    // When opening a repository from the Source Control Repositories view in a terminal, determines what kind of terminal will be launched
    //  - integrated: Use Windsurf's integrated terminal.
    //  - external: Use the configured external terminal.
    //  - both: Use the other two together.
    "terminal.sourceControlRepositoriesKind": "integrated"
  
  },
  {
    // Enable/Disable Spring Boot TestJars launch environment variables
    "boot-java-vscode-only.test-jars": true,
  
    // Enable/Disable detecting changes of running Spring Boot applications
    "boot-java.change-detection.on": false,
  
    // The path to a shared properties metadata JSON file.
    "boot-java.common.properties-metadata": "",
  
    // Show CRON expressions inlay-hints
    "boot-java.cron.inlay-hints": true,
  
    // Syntax Hyghlighting for Languages embedded into Java source code
    "boot-java.embedded-syntax-highlighting": true,
  
    // Enable/Disable Spring running Boot application Code Lenses
    "boot-java.highlight-codelens.on": true,
  
    // Explain SpEL expressions, Spring Data queries, and AOP annotations using Copilot
    "boot-java.highlight-copilot-codelens.on": false,
  
    // Beans structure tree in the outline view
    "boot-java.java.beans-structure-tree": false,
  
    // Inject Bean completion proposals in Java editor
    "boot-java.java.completions.inject-bean": true,
  
    // Reconciling Java Sources
    "boot-java.java.reconcilers": true,
  
    // JPA Query language support
    "boot-java.jpql": true,
  
    // Show all local JVM processes when connecting to Live Spring Boot App processes
    "boot-java.live-information.all-local-java-processes": false,
  
    // Live Information - Automatic addition of JVM arguments enabling JMX and Process Connection via JMX Enabled
    "boot-java.live-information.automatic-connection.on": true,
  
    // Live Information - Max number of retries (before giving up)
    "boot-java.live-information.fetch-data.max-retries": 10,
  
    // Live Information - Delay between retries in seconds
    "boot-java.live-information.fetch-data.retry-delay-in-seconds": 3,
  
    // Spring Boot Modulith automatic project tracking and metadata update
    "boot-java.modulith-project-tracking": true,
  
    // Elide common prefix in property key auto completions
    "boot-java.properties.completions.elide-prefix": false,
  
    // Array of jmx urls pointing to remote spring boot applications to poll for live hover information. A typical url looks something like this: `service:jmx:rmi://localhost:9111/jndi/rmi://localhost:9111/jmxrmi`
    "boot-java.remote-apps": [],
  
    // Enable/Disable Java test sources files scanning
    "boot-java.scan-java-test-sources.on": false,
  
    // Enable/Disable Content Assist in Spring XML Config file editor
    "boot-java.support-spring-xml-config.content-assist": true,
  
    // Enable/Disable Hyperlinks in Spring XML Config file editor
    "boot-java.support-spring-xml-config.hyperlinks": true,
  
    // Enable/Disable Support for Spring XML Config files
    "boot-java.support-spring-xml-config.on": false,
  
    // Scan Spring XML in folders
    "boot-java.support-spring-xml-config.scan-folders": "src/main",
  
    // Defines which browser to use when opening Spring Boot apps web pages.
    //  - integrated: VS Code's integrated browser
    //  - external: External default browser
    "spring.tools.openWith": "integrated",
  
    // Replace converted properties file
    "spring.tools.properties.replace-converted-file": false
  
  },
  {
    // Focus the terminal accessible view when a command is executed.
    "terminal.integrated.accessibleViewFocusOnCommandExecution": false,
  
    // Preserve the cursor position on reopen of the terminal's accessible view rather than setting it to the bottom of the buffer.
    "terminal.integrated.accessibleViewPreserveCursorPosition": false,
  
    // Whether or not to allow chord keybindings in the terminal. Note that when this is true and the keystroke results in a chord it will bypass `terminal.integrated.commandsToSkipShell`, setting this to false is particularly useful when you want ctrl+k to go to your shell (not Windsurf).
    "terminal.integrated.allowChords": true,
  
    // An array of strings containing the URI schemes that the terminal is allowed to open links for. By default, only a small subset of possible schemes are allowed for security reasons.
    "terminal.integrated.allowedLinkSchemes": [
      "file",
      "http",
      "https",
      "mailto",
      "vscode",
      "vscode-insiders",
      "vscode-next"
    ],
  
    // Whether to allow menubar mnemonics (for example Alt+F) to trigger the open of the menubar. Note that this will cause all alt keystrokes to skip the shell when true. This does nothing on macOS.
    "terminal.integrated.allowMnemonics": false,
  
    // If enabled, alt/option + click will reposition the prompt cursor to underneath the mouse when `editor.multiCursorModifier` is set to `'alt'` (the default value). This may not work reliably depending on your shell.
    "terminal.integrated.altClickMovesCursor": true,
  
    // The terminal profile to use on Linux for automation-related terminal usage like tasks and debug.
    "terminal.integrated.automationProfile.linux": null,
  
    // The terminal profile to use on macOS for automation-related terminal usage like tasks and debug.
    "terminal.integrated.automationProfile.osx": null,
  
    // The terminal profile to use for automation-related terminal usage like tasks and debug. This setting will currently be ignored if `terminal.integrated.automationShell.windows` (now deprecated) is set.
    "terminal.integrated.automationProfile.windows": null,
  
    // A set of messages that, when encountered in the terminal, will be automatically responded to. Provided the message is specific enough, this can help automate away common responses.
    // 
    // Remarks:
    // 
    // - Use `"Terminate batch job (Y/N)": "Y\r"` to automatically respond to the terminate batch job prompt on Windows.
    // - The message includes escape sequences so the reply might not happen with styled text.
    // - Each reply can only happen once every second.
    // - Use `"\r"` in the reply to mean the enter key.
    // - To unset a default key, set the value to null.
    // - Restart VS Code if new don't apply.
    "terminal.integrated.autoReplies": {},
  
    // The number of milliseconds to show the bell within a terminal tab when triggered.
    "terminal.integrated.bellDuration": 1000,
  
    // A set of command IDs whose keybindings will not be sent to the shell but instead always be handled by Windsurf. This allows keybindings that would normally be consumed by the shell to act instead the same as when the terminal is not focused, for example `Ctrl+P` to launch Quick Open.
    // 
    // &nbsp;
    // 
    // Many commands are skipped by default. To override a default and pass that command's keybinding to the shell instead, add the command prefixed with the `-` character. For example add `-workbench.action.quickOpen` to allow `Ctrl+P` to reach the shell.
    // 
    // &nbsp;
    // 
    // The following list of default skipped commands is truncated when viewed in Settings Editor. To see the full list, [open the default settings JSON](command:workbench.action.openRawDefaultSettings 'Open Default Settings (JSON)') and search for the first command from the list below.
    // 
    // &nbsp;
    // 
    // Default Skipped Commands:
    // 
    // - editor.action.accessibilityHelp
    // - editor.action.toggleTabFocusMode
    // - notification.acceptPrimaryAction
    // - notifications.hideList
    // - notifications.hideToasts
    // - runCommands
    // - windsurf.prioritized.chat.open
    // - windsurf.prioritized.chat.openFromTerminal
    // - windsurf.prioritized.terminalCommand.open
    // - workbench.action.closeQuickOpen
    // - workbench.action.debug.continue
    // - workbench.action.debug.disconnect
    // - workbench.action.debug.pause
    // - workbench.action.debug.restart
    // - workbench.action.debug.run
    // - workbench.action.debug.start
    // - workbench.action.debug.stepInto
    // - workbench.action.debug.stepOut
    // - workbench.action.debug.stepOver
    // - workbench.action.debug.stop
    // - workbench.action.firstEditorInGroup
    // - workbench.action.focusActiveEditorGroup
    // - workbench.action.focusEighthEditorGroup
    // - workbench.action.focusFifthEditorGroup
    // - workbench.action.focusFirstEditorGroup
    // - workbench.action.focusFourthEditorGroup
    // - workbench.action.focusLastEditorGroup
    // - workbench.action.focusNextPart
    // - workbench.action.focusPreviousPart
    // - workbench.action.focusSecondEditorGroup
    // - workbench.action.focusSeventhEditorGroup
    // - workbench.action.focusSixthEditorGroup
    // - workbench.action.focusThirdEditorGroup
    // - workbench.action.lastEditorInGroup
    // - workbench.action.navigateDown
    // - workbench.action.navigateLeft
    // - workbench.action.navigateRight
    // - workbench.action.navigateUp
    // - workbench.action.nextEditor
    // - workbench.action.nextEditorInGroup
    // - workbench.action.nextPanelView
    // - workbench.action.nextSideBarView
    // - workbench.action.openNextRecentlyUsedEditor
    // - workbench.action.openNextRecentlyUsedEditorInGroup
    // - workbench.action.openPreviousRecentlyUsedEditor
    // - workbench.action.openPreviousRecentlyUsedEditorInGroup
    // - workbench.action.previousEditor
    // - workbench.action.previousEditorInGroup
    // - workbench.action.previousPanelView
    // - workbench.action.previousSideBarView
    // - workbench.action.quickOpen
    // - workbench.action.quickOpenLeastRecentlyUsedEditor
    // - workbench.action.quickOpenLeastRecentlyUsedEditorInGroup
    // - workbench.action.quickOpenPreviousEditor
    // - workbench.action.quickOpenPreviousRecentlyUsedEditor
    // - workbench.action.quickOpenPreviousRecentlyUsedEditorInGroup
    // - workbench.action.quickOpenView
    // - workbench.action.showCommands
    // - workbench.action.tasks.build
    // - workbench.action.tasks.reRunTask
    // - workbench.action.tasks.restartTask
    // - workbench.action.tasks.runTask
    // - workbench.action.tasks.showLog
    // - workbench.action.tasks.showTasks
    // - workbench.action.tasks.terminate
    // - workbench.action.tasks.test
    // - workbench.action.terminal.acceptSelectedSuggestion
    // - workbench.action.terminal.acceptSelectedSuggestionEnter
    // - workbench.action.terminal.chat.cancel
    // - workbench.action.terminal.chat.close
    // - workbench.action.terminal.chat.discard
    // - workbench.action.terminal.chat.feedbackHelpful
    // - workbench.action.terminal.chat.feedbackReportIssue
    // - workbench.action.terminal.chat.feedbackUnhelpful
    // - workbench.action.terminal.chat.insertCommand
    // - workbench.action.terminal.chat.makeRequest
    // - workbench.action.terminal.chat.runCommand
    // - workbench.action.terminal.chat.start
    // - workbench.action.terminal.chat.viewInChat
    // - workbench.action.terminal.clear
    // - workbench.action.terminal.clearSelection
    // - workbench.action.terminal.clearSuggestCache
    // - workbench.action.terminal.copyAndClearSelection
    // - workbench.action.terminal.copyLastCommand
    // - workbench.action.terminal.copyLastCommandAndLastCommandOutput
    // - workbench.action.terminal.copyLastCommandOutput
    // - workbench.action.terminal.copySelection
    // - workbench.action.terminal.copySelectionAsHtml
    // - workbench.action.terminal.deleteToLineStart
    // - workbench.action.terminal.deleteWordLeft
    // - workbench.action.terminal.deleteWordRight
    // - workbench.action.terminal.findNext
    // - workbench.action.terminal.findPrevious
    // - workbench.action.terminal.focus
    // - workbench.action.terminal.focusAccessibleBuffer
    // - workbench.action.terminal.focusAtIndex1
    // - workbench.action.terminal.focusAtIndex2
    // - workbench.action.terminal.focusAtIndex3
    // - workbench.action.terminal.focusAtIndex4
    // - workbench.action.terminal.focusAtIndex5
    // - workbench.action.terminal.focusAtIndex6
    // - workbench.action.terminal.focusAtIndex7
    // - workbench.action.terminal.focusAtIndex8
    // - workbench.action.terminal.focusAtIndex9
    // - workbench.action.terminal.focusFind
    // - workbench.action.terminal.focusHover
    // - workbench.action.terminal.focusNext
    // - workbench.action.terminal.focusNextPane
    // - workbench.action.terminal.focusPrevious
    // - workbench.action.terminal.focusPreviousPane
    // - workbench.action.terminal.goToRecentDirectory
    // - workbench.action.terminal.hideFind
    // - workbench.action.terminal.hideSuggestWidget
    // - workbench.action.terminal.kill
    // - workbench.action.terminal.killEditor
    // - workbench.action.terminal.maybeCopySelection
    // - workbench.action.terminal.moveToEditor
    // - workbench.action.terminal.moveToLineEnd
    // - workbench.action.terminal.moveToLineStart
    // - workbench.action.terminal.moveToTerminalPanel
    // - workbench.action.terminal.new
    // - workbench.action.terminal.newInActiveWorkspace
    // - workbench.action.terminal.paste
    // - workbench.action.terminal.pasteSelection
    // - workbench.action.terminal.requestCompletions
    // - workbench.action.terminal.resizePaneDown
    // - workbench.action.terminal.resizePaneLeft
    // - workbench.action.terminal.resizePaneRight
    // - workbench.action.terminal.resizePaneUp
    // - workbench.action.terminal.runActiveFile
    // - workbench.action.terminal.runRecentCommand
    // - workbench.action.terminal.runSelectedText
    // - workbench.action.terminal.scrollDown
    // - workbench.action.terminal.scrollDownPage
    // - workbench.action.terminal.scrollToBottom
    // - workbench.action.terminal.scrollToNextCommand
    // - workbench.action.terminal.scrollToPreviousCommand
    // - workbench.action.terminal.scrollToTop
    // - workbench.action.terminal.scrollUp
    // - workbench.action.terminal.scrollUpPage
    // - workbench.action.terminal.searchWorkspace
    // - workbench.action.terminal.selectAll
    // - workbench.action.terminal.selectNextPageSuggestion
    // - workbench.action.terminal.selectNextSuggestion
    // - workbench.action.terminal.selectPrevPageSuggestion
    // - workbench.action.terminal.selectPrevSuggestion
    // - workbench.action.terminal.selectToNextCommand
    // - workbench.action.terminal.selectToNextLine
    // - workbench.action.terminal.selectToPreviousCommand
    // - workbench.action.terminal.selectToPreviousLine
    // - workbench.action.terminal.sendSequence
    // - workbench.action.terminal.sizeToContentWidth
    // - workbench.action.terminal.split
    // - workbench.action.terminal.splitInActiveWorkspace
    // - workbench.action.terminal.suggestToggleDetails
    // - workbench.action.terminal.suggestToggleDetailsFocus
    // - workbench.action.terminal.toggleFindCaseSensitive
    // - workbench.action.terminal.toggleFindRegex
    // - workbench.action.terminal.toggleFindWholeWord
    // - workbench.action.terminal.toggleTerminal
    // - workbench.action.toggleFullScreen
    // - workbench.action.toggleMaximizedPanel
    // - workbench.action.togglePanel
    "terminal.integrated.commandsToSkipShell": [],
  
    // Controls whether to confirm when the window closes if there are active terminal sessions.
    //  - never: Never confirm.
    //  - always: Always confirm if there are terminals.
    //  - hasChildProcesses: Confirm if there are any terminals that have child processes.
    "terminal.integrated.confirmOnExit": "never",
  
    // Controls whether to confirm killing terminals when they have child processes. When set to editor, terminals in the editor area will be marked as changed when they have child processes. Note that child process detection may not work well for shells like Git Bash which don't run their processes as child processes of the shell. Background terminals like those launched by some extensions will not trigger the confirmation.
    //  - never: Never confirm.
    //  - editor: Confirm if the terminal is in the editor.
    //  - panel: Confirm if the terminal is in the panel.
    //  - always: Confirm if the terminal is either in the editor or panel.
    "terminal.integrated.confirmOnKill": "editor",
  
    // Controls whether text selected in the terminal will be copied to the clipboard.
    "terminal.integrated.copyOnSelection": false,
  
    // Controls whether the terminal cursor blinks.
    "terminal.integrated.cursorBlinking": false,
  
    // Controls the style of terminal cursor when the terminal is focused.
    "terminal.integrated.cursorStyle": "block",
  
    // Controls the style of terminal cursor when the terminal is not focused.
    "terminal.integrated.cursorStyleInactive": "outline",
  
    // Controls the width of the cursor when `terminal.integrated.cursorStyle` is set to `line`.
    "terminal.integrated.cursorWidth": 1,
  
    // Whether to draw custom glyphs for block element and box drawing characters instead of using the font, which typically yields better rendering with continuous lines. Note that this doesn't work when `terminal.integrated.gpuAcceleration` is disabled.
    "terminal.integrated.customGlyphs": true,
  
    // An explicit start path where the terminal will be launched, this is used as the current working directory (cwd) for the shell process. This may be particularly useful in workspace settings if the root directory is not a convenient cwd.
    "terminal.integrated.cwd": "",
  
    // Controls where newly created terminals will appear.
    //  - editor: Create terminals in the editor
    //  - view: Create terminals in the terminal view
    "terminal.integrated.defaultLocation": "view",
  
    // The default terminal profile on Linux.
    "terminal.integrated.defaultProfile.linux": null,
  
    // The default terminal profile on macOS.
    "terminal.integrated.defaultProfile.osx": null,
  
    // The default terminal profile on Windows.
    //  - null: Automatically detect the default
    //  - PowerShell: $(terminal-powershell) PowerShell
    // - path: C:\WINDOWS\System32\WindowsPowerShell\v1.0\powershell.exe
    //  - Windows PowerShell: $(terminal-powershell) Windows PowerShell
    // - path: C:\WINDOWS\System32\WindowsPowerShell\v1.0\powershell.exe
    //  - Git Bash: $(terminal) Git Bash
    // - path: C:\Program Files\Git\bin\bash.exe
    // - args: ['--login','-i']
    //  - Command Prompt: $(terminal-cmd) Command Prompt
    // - path: C:\WINDOWS\System32\cmd.exe
    // - args: []
    //  - Cygwin: $(terminal) Cygwin
    // - path: C:\cygwin64\bin\bash.exe
    // - args: ['--login']
    //  - bash (MSYS2): $(terminal-bash) bash (MSYS2)
    // - path: C:\msys64\usr\bin\bash.exe
    // - args: ['--login','-i']
    // - env: {"CHERE_INVOKING":"1"}
    //  - Ubuntu (WSL): $(terminal-ubuntu) Ubuntu (WSL)
    // - path: C:\WINDOWS\System32\wsl.exe
    // - args: ['-d','Ubuntu']
    //  - JavaScript Debug Terminal: $($(debug)) JavaScript Debug Terminal
    // - extensionIdentifier: ms-vscode.js-debug
    //  - R Terminal: $(terminal) R Terminal
    // - extensionIdentifier: REditorSupport.r
    "terminal.integrated.defaultProfile.windows": null,
  
    // Controls whether to detect and set the `$LANG` environment variable to a UTF-8 compliant option since Windsurf's terminal only supports UTF-8 encoded data coming from the shell.
    //  - auto: Set the `$LANG` environment variable if the existing variable does not exist or it does not end in `'.UTF-8'`.
    //  - off: Do not set the `$LANG` environment variable.
    //  - on: Always set the `$LANG` environment variable.
    "terminal.integrated.detectLocale": "auto",
  
    // Controls whether bold text in the terminal will always use the "bright" ANSI color variant.
    "terminal.integrated.drawBoldTextInBrightColors": true,
  
    // This is now deprecated. Instead use the `terminal.integrated.enableVisualBell` and `accessibility.signals.terminalBell` settings.
    // 
    "terminal.integrated.enableBell": false,
  
    // Whether to enable file links in terminals. Links can be slow when working on a network drive in particular because each file link is verified against the file system. Changing this will take effect only in new terminals.
    //  - off: Always off.
    //  - on: Always on.
    //  - notRemote: Enable only when not in a remote workspace.
    "terminal.integrated.enableFileLinks": "on",
  
    // Enables image support in the terminal, this will only work when `terminal.integrated.gpuAcceleration#` is enabled. Both sixel and iTerm's inline image protocol are supported on Linux and macOS. This will only work on Windows for versions of ConPTY >= v2 which is shipped with Windows itself, see also `#terminal.integrated.experimental.windowsUseConptyDll`. Images will currently not be restored between window reloads/reconnects.
    "terminal.integrated.enableImages": false,
  
    // Controls whether to show a warning dialog when pasting multiple lines into the terminal.
    //  - auto: Enable the warning but do not show it when:
    // 
    // - Bracketed paste mode is enabled (the shell supports multi-line paste natively)
    // - The paste is handled by the shell's readline (in the case of pwsh)
    //  - always: Always show the warning if the text contains a new line.
    //  - never: Never show the warning.
    "terminal.integrated.enableMultiLinePasteWarning": "auto",
  
    // Persist terminal sessions/history for the workspace across window reloads.
    "terminal.integrated.enablePersistentSessions": true,
  
    // Controls whether the visual terminal bell is enabled. This shows up next to the terminal's name.
    "terminal.integrated.enableVisualBell": false,
  
    // Object with environment variables that will be added to the Windsurf process to be used by the terminal on Linux. Set to `null` to delete the environment variable.
    "terminal.integrated.env.linux": {},
  
    // Object with environment variables that will be added to the Windsurf process to be used by the terminal on macOS. Set to `null` to delete the environment variable.
    "terminal.integrated.env.osx": {},
  
    // Object with environment variables that will be added to the Windsurf process to be used by the terminal on Windows. Set to `null` to delete the environment variable.
    "terminal.integrated.env.windows": {},
  
    // Whether to display the environment changes indicator on each terminal which explains whether extensions have made, or want to make changes to the terminal's environment.
    //  - off: Disable the indicator.
    //  - on: Enable the indicator.
    //  - warnonly: Only show the warning indicator when a terminal's environment is 'stale', not the information indicator that shows a terminal has had its environment modified by an extension.
    "terminal.integrated.environmentChangesIndicator": "warnonly",
  
    // Whether to relaunch terminals automatically if extensions want to contribute to their environment and have not been interacted with yet.
    "terminal.integrated.environmentChangesRelaunch": true,
  
    // Whether to use the experimental conpty.dll (v1.20.240626001) shipped with Windsurf, instead of the one bundled with Windows.
    "terminal.integrated.experimental.windowsUseConptyDll": false,
  
    // Scrolling speed multiplier when pressing `Alt`.
    "terminal.integrated.fastScrollSensitivity": 5,
  
    // Controls whether the terminal, accessible buffer, or neither will be focused after `Terminal: Run Selected Text In Active Terminal` has been run.
    //  - terminal: Always focus the terminal.
    //  - accessible-buffer: Always focus the accessible buffer.
    //  - none: Do nothing.
    "terminal.integrated.focusAfterRun": "none",
  
    // Controls the font family of the terminal. Defaults to `editor.fontFamily`'s value.
    "terminal.integrated.fontFamily": "",
  
    // Controls whether font ligatures are enabled in the terminal. Ligatures will only work if the configured `terminal.integrated.fontFamily` supports them.
    "terminal.integrated.fontLigatures.enabled": false,
  
    // When `terminal.integrated.gpuAcceleration#` is enabled and the particular `#terminal.integrated.fontFamily` cannot be parsed, this is the set of character sequences that will always be drawn together. This allows the use of a fixed set of ligatures even when the font isn't supported.
    "terminal.integrated.fontLigatures.fallbackLigatures": [
      "<--",
      "<---",
      "<<-",
      "<-",
      "->",
      "->>",
      "-->",
      "--->",
      "<==",
      "<===",
      "<<=",
      "<=",
      "=>",
      "=>>",
      "==>",
      "===>",
      ">=",
      ">>=",
      "<->",
      "<-->",
      "<--->",
      "<---->",
      "<=>",
      "<==>",
      "<===>",
      "<====>",
      "::",
      ":::",
      "<~~",
      "</",
      "</>",
      "/>",
      "~~>",
      "==",
      "!=",
      "/=",
      "~=",
      "<>",
      "===",
      "!==",
      "!===",
      "<:",
      ":=",
      "*=",
      "*+",
      "<*",
      "<*>",
      "*>",
      "<|",
      "<|>",
      "|>",
      "+*",
      "=*",
      "=:",
      ":>",
      "/*",
      "*/",
      "+++",
      "<!--",
      "<!---"
    ],
  
    // Controls what font feature settings are used when ligatures are enabled, in the format of the `font-feature-settings` CSS property. Some examples which may be valid depending on the font:
    // 
    // - `"calt" off, "ss03"`
    // - `"liga" on`
    // - `"calt" off, "dlig" on`
    "terminal.integrated.fontLigatures.featureSettings": "\"calt\" on",
  
    // Controls the font size in pixels of the terminal.
    "terminal.integrated.fontSize": 14,
  
    // The font weight to use within the terminal for non-bold text. Accepts "normal" and "bold" keywords or numbers between 1 and 1000.
    "terminal.integrated.fontWeight": "normal",
  
    // The font weight to use within the terminal for bold text. Accepts "normal" and "bold" keywords or numbers between 1 and 1000.
    "terminal.integrated.fontWeightBold": "bold",
  
    // Controls whether the terminal will leverage the GPU to do its rendering.
    //  - auto: Let Windsurf detect which renderer will give the best experience.
    //  - on: Enable GPU acceleration within the terminal.
    //  - off: Disable GPU acceleration within the terminal. The terminal will render much slower when GPU acceleration is off but it should reliably work on all systems.
    "terminal.integrated.gpuAcceleration": "auto",
  
    // Whether to hide the terminal view when the last terminal is closed. This will only happen when the terminal is the only visible view in the view container.
    "terminal.integrated.hideOnLastClosed": true,
  
    // Whether to hide the terminal view on startup, avoiding creating a terminal when there are no persistent sessions.
    //  - never: Never hide the terminal view on startup.
    //  - whenEmpty: Only hide the terminal when there are no persistent sessions restored.
    //  - always: Always hide the terminal, even when there are persistent sessions restored.
    "terminal.integrated.hideOnStartup": "never",
  
    // Controls whether the terminal will ignore bracketed paste mode even if the terminal was put into the mode, omitting the `\x1b[200~` and `\x1b[201~` sequences when pasting. This is useful when the shell is not respecting the mode which can happen in sub-shells for example.
    "terminal.integrated.ignoreBracketedPasteMode": false,
  
    // A set of process names to ignore when using the `terminal.integrated.confirmOnKill` setting.
    "terminal.integrated.ignoreProcessNames": [
      "starship",
      "oh-my-posh",
      "bash",
      "zsh"
    ],
  
    // Whether new shells should inherit their environment from Windsurf, which may source a login shell to ensure $PATH and other development variables are initialized. This has no effect on Windows.
    "terminal.integrated.inheritEnv": true,
  
    // Controls if the first terminal without input will show a hint about available actions when it is focused.
    "terminal.integrated.initialHint": true,
  
    // Controls the letter spacing of the terminal. This is an integer value which represents the number of additional pixels to add between characters.
    "terminal.integrated.letterSpacing": 0,
  
    // Controls the line height of the terminal. This number is multiplied by the terminal font size to get the actual line-height in pixels.
    "terminal.integrated.lineHeight": 1,
  
    // When local echo should be enabled. This will override `terminal.integrated.localEchoLatencyThreshold`
    //  - on: Always enabled
    //  - off: Always disabled
    //  - auto: Enabled only for remote workspaces
    "terminal.integrated.localEchoEnabled": "auto",
  
    // Local echo will be disabled when any of these program names are found in the terminal title.
    "terminal.integrated.localEchoExcludePrograms": [
      "vim",
      "vi",
      "nano",
      "tmux"
    ],
  
    // Length of network delay, in milliseconds, where local edits will be echoed on the terminal without waiting for server acknowledgement. If '0', local echo will always be on, and if '-1' it will be disabled.
    "terminal.integrated.localEchoLatencyThreshold": 30,
  
    // Terminal style of locally echoed text; either a font style or an RGB color.
    "terminal.integrated.localEchoStyle": "dim",
  
    // Controls whether to force selection when using Option+click on macOS. This will force a regular (line) selection and disallow the use of column selection mode. This enables copying and pasting using the regular terminal selection, for example, when mouse mode is enabled in tmux.
    "terminal.integrated.macOptionClickForcesSelection": false,
  
    // Controls whether to treat the option key as the meta key in the terminal on macOS.
    "terminal.integrated.macOptionIsMeta": false,
  
    // Controls how terminal reacts to middle click.
    //  - default: The platform default to focus the terminal. On Linux this will also paste the selection.
    //  - paste: Paste on middle click.
    "terminal.integrated.middleClickBehavior": "default",
  
    // When set, the foreground color of each cell will change to try meet the contrast ratio specified. Note that this will not apply to `powerline` characters per #146406. Example values:
    // 
    // - 1: Do nothing and use the standard theme colors.
    // - 4.5: [WCAG AA compliance (minimum)](https://www.w3.org/TR/UNDERSTANDING-WCAG20/visual-audio-contrast-contrast.html) (default).
    // - 7: [WCAG AAA compliance (enhanced)](https://www.w3.org/TR/UNDERSTANDING-WCAG20/visual-audio-contrast7.html).
    // - 21: White on black or black on white.
    "terminal.integrated.minimumContrastRatio": 4.5,
  
    // A multiplier to be used on the `deltaY` of mouse wheel scroll events.
    "terminal.integrated.mouseWheelScrollSensitivity": 1,
  
    // Zoom the font of the terminal when using mouse wheel and holding `Ctrl`.
    "terminal.integrated.mouseWheelZoom": false,
  
    // When the terminal process must be shut down (for example on window or application close), this determines when the previous terminal session contents/history should be restored and processes be recreated when the workspace is next opened.
    // 
    // Caveats:
    // 
    // - Restoring of the process current working directory depends on whether it is supported by the shell.
    // - Time to persist the session during shutdown is limited, so it may be aborted when using high-latency remote connections.
    //  - onExit: Revive the processes after the last window is closed on Windows/Linux or when the `workbench.action.quit` command is triggered (command palette, keybinding, menu).
    //  - onExitAndWindowClose: Revive the processes after the last window is closed on Windows/Linux or when the `workbench.action.quit` command is triggered (command palette, keybinding, menu), or when the window is closed.
    //  - never: Never restore the terminal buffers or recreate the process.
    "terminal.integrated.persistentSessionReviveProcess": "onExit",
  
    // Controls the maximum amount of lines that will be restored when reconnecting to a persistent terminal session. Increasing this will restore more lines of scrollback at the cost of more memory and increase the time it takes to connect to terminals on start up. This setting requires a restart to take effect and should be set to a value less than or equal to `terminal.integrated.scrollback`.
    "terminal.integrated.persistentSessionScrollback": 100,
  
    // A set of terminal profile customizations for Linux which allows adding, removing or changing how terminals are launched. Profiles are made up of a mandatory path, optional arguments and other presentation options.
    // 
    // To override an existing profile use its profile name as the key, for example:
    // 
    // ```json
    // "terminal.integrated.profile.linux": {
    //   "bash": null
    // }
    // ```
    // 
    // [Read more about configuring profiles](https://code.visualstudio.com/docs/terminal/profiles).
    "terminal.integrated.profiles.linux": {
      "bash": {
        "path": "bash",
        "icon": "terminal-bash"
      },
      "zsh": {
        "path": "zsh"
      },
      "fish": {
        "path": "fish"
      },
      "tmux": {
        "path": "tmux",
        "icon": "terminal-tmux"
      },
      "pwsh": {
        "path": "pwsh",
        "icon": "terminal-powershell"
      }
    },
  
    // A set of terminal profile customizations for Mac which allows adding, removing or changing how terminals are launched. Profiles are made up of a mandatory path, optional arguments and other presentation options.
    // 
    // To override an existing profile use its profile name as the key, for example:
    // 
    // ```json
    // "terminal.integrated.profile.osx": {
    //   "bash": null
    // }
    // ```
    // 
    // [Read more about configuring profiles](https://code.visualstudio.com/docs/terminal/profiles).
    "terminal.integrated.profiles.osx": {
      "bash": {
        "path": "bash",
        "args": [
          "-l"
        ],
        "icon": "terminal-bash"
      },
      "zsh": {
        "path": "zsh",
        "args": [
          "-l"
        ]
      },
      "fish": {
        "path": "fish",
        "args": [
          "-l"
        ]
      },
      "tmux": {
        "path": "tmux",
        "icon": "terminal-tmux"
      },
      "pwsh": {
        "path": "pwsh",
        "icon": "terminal-powershell"
      }
    },
  
    // A set of terminal profile customizations for Windows which allows adding, removing or changing how terminals are launched. Profiles are made up of a mandatory path, optional arguments and other presentation options.
    // 
    // To override an existing profile use its profile name as the key, for example:
    // 
    // ```json
    // "terminal.integrated.profile.windows": {
    //   "bash": null
    // }
    // ```
    // 
    // [Read more about configuring profiles](https://code.visualstudio.com/docs/terminal/profiles).
    "terminal.integrated.profiles.windows": {
      "PowerShell": {
        "source": "PowerShell",
        "icon": "terminal-powershell"
      },
      "Command Prompt": {
        "path": [
          "${env:windir}\\Sysnative\\cmd.exe",
          "${env:windir}\\System32\\cmd.exe"
        ],
        "args": [],
        "icon": "terminal-cmd"
      },
      "Git Bash": {
        "source": "Git Bash"
      }
    },
  
    // Whether to rescale glyphs horizontally that are a single cell wide but have glyphs that would overlap following cell(s). This typically happens for ambiguous width characters (eg. the roman numeral characters U+2160+) which aren't featured in monospace fonts. Emoji glyphs are never rescaled.
    "terminal.integrated.rescaleOverlappingGlyphs": true,
  
    // Controls how terminal reacts to right click.
    //  - default: Show the context menu.
    //  - copyPaste: Copy when there is a selection, otherwise paste.
    //  - paste: Paste on right click.
    //  - selectWord: Select the word under the cursor and show the context menu.
    //  - nothing: Do nothing and pass event to terminal.
    "terminal.integrated.rightClickBehavior": "copyPaste",
  
    // Controls the maximum number of lines the terminal keeps in its buffer. We pre-allocate memory based on this value in order to ensure a smooth experience. As such, as the value increases, so will the amount of memory.
    "terminal.integrated.scrollback": 1000,
  
    // Dispatches most keybindings to the terminal instead of the workbench, overriding `terminal.integrated.commandsToSkipShell`, which can be used alternatively for fine tuning.
    "terminal.integrated.sendKeybindingsToShell": false,
  
    // When shell integration is enabled, adds a decoration for each command.
    //  - both: Show decorations in the gutter (left) and overview ruler (right)
    //  - gutter: Show gutter decorations to the left of the terminal
    //  - overviewRuler: Show overview ruler decorations to the right of the terminal
    //  - never: Do not show decorations
    "terminal.integrated.shellIntegration.decorationsEnabled": "both",
  
    // Determines whether or not shell integration is auto-injected to support features like enhanced command tracking and current working directory detection. 
    // 
    // Shell integration works by injecting the shell with a startup script. The script gives Windsurf insight into what is happening within the terminal.
    // 
    // Supported shells:
    // 
    // - Linux/macOS: bash, fish, pwsh, zsh
    //  - Windows: pwsh, git bash
    // 
    // This setting applies only when terminals are created, so you will need to restart your terminals for it to take effect.
    // 
    //  Note that the script injection may not work if you have custom arguments defined in the terminal profile, have enabled `editor.accessibilitySupport#`, have a [complex bash `PROMPT_COMMAND`](https://code.visualstudio.com/docs/editor/integrated-terminal#_complex-bash-promptcommand), or other unsupported setup. To disable decorations, see `#terminal.integrated.shellIntegration.decorationsEnabled`
    "terminal.integrated.shellIntegration.enabled": true,
  
    // Controls the number of recently used commands to keep in the terminal command history. Set to 0 to disable terminal command history.
    "terminal.integrated.shellIntegration.history": 100,
  
    // Whether to show the command guide when hovering over a command in the terminal.
    "terminal.integrated.shellIntegration.showCommandGuide": true,
  
    // Controls whether to show the alert "The terminal process terminated with exit code" when exit code is non-zero.
    "terminal.integrated.showExitAlert": true,
  
    // Whether to show hovers for links in the terminal output.
    "terminal.integrated.showLinkHover": true,
  
    // Controls whether the terminal will scroll using an animation.
    "terminal.integrated.smoothScrolling": false,
  
    // Controls the working directory a split terminal starts with.
    //  - workspaceRoot: A new split terminal will use the workspace root as the working directory. In a multi-root workspace a choice for which root folder to use is offered.
    //  - initial: A new split terminal will use the working directory that the parent terminal started with.
    //  - inherited: On macOS and Linux, a new split terminal will use the working directory of the parent terminal. On Windows, this behaves the same as initial.
    "terminal.integrated.splitCwd": "inherited",
  
    // Shows the current command at the top of the terminal. This feature requires [shell integration](https://code.visualstudio.com/docs/terminal/shell-integration) to be activated. See `terminal.integrated.shellIntegration.enabled`.
    "terminal.integrated.stickyScroll.enabled": false,
  
    // Defines the maximum number of sticky lines to show. Sticky scroll lines will never exceed 40% of the viewport regardless of this setting.
    "terminal.integrated.stickyScroll.maxLineCount": 5,
  
    // Controls which built-in completions are activated. This setting can cause conflicts if custom shell completions are configured in the shell profile.
    "terminal.integrated.suggest.builtinCompletions": {
      "pwshCode": true,
      "pwshGit": true
    },
  
    // Enables experimental terminal Intellisense suggestions for supported shells (PowerShell v7+, zsh, bash, fish) when `terminal.integrated.shellIntegration.enabled` is set to `true`.
    // 
    // If shell integration is installed manually, `VSCODE_SUGGEST` needs to be set to `1` before calling the shell integration script.
    "terminal.integrated.suggest.enabled": false,
  
    // Providers are enabled by default. Omit them by setting the id of the provider to `false`.
    "terminal.integrated.suggest.providers": {
      "terminal-suggest": true,
      "pwsh-shell-integration": false
    },
  
    // Controls whether suggestions should automatically show up while typing. Also be aware of the `terminal.integrated.suggest.suggestOnTriggerCharacters`-setting which controls if suggestions are triggered by special characters.
    "terminal.integrated.suggest.quickSuggestions": true,
  
    // Controls whether suggestions should run immediately when `Enter` (not `Tab`) is used to accept the result.
    //  - ignore: Ignore suggestions and send the enter directly to the shell without completing. This is used as the default value so the suggest widget is as unobtrusive as possible.
    //  - never: Never run on `Enter`.
    //  - exactMatch: Run on `Enter` when the suggestion is typed in its entirety.
    //  - exactMatchIgnoreExtension: Run on `Enter` when the suggestion is typed in its entirety or when a file is typed without its extension included.
    //  - always: Always run on `Enter`.
    "terminal.integrated.suggest.runOnEnter": "ignore",
  
    // Controls whether the terminal suggestions status bar should be shown.
    "terminal.integrated.suggest.showStatusBar": true,
  
    // Controls whether suggestions should automatically show up when typing trigger characters.
    "terminal.integrated.suggest.suggestOnTriggerCharacters": true,
  
    // A set of windows command executable extensions that will be included as suggestions in the terminal.
    // 
    // Many executables are included by default, listed below:
    // 
    // - bat
    // - cmd
    // - com
    // - exe
    // - jar
    // - js
    // - msi
    // - pl
    // - ps1
    // - py
    // - rb
    // - sh
    // - vbs.
    // 
    // To exclude an extension, set it to `false`
    // 
    // . To include one not in the list, add it and set it to `true`.
    "terminal.integrated.suggest.windowsExecutableExtensions": {},
  
    // A theme color ID to associate with terminal icons by default.
    "terminal.integrated.tabs.defaultColor": null,
  
    // A codicon ID to associate with terminal icons by default.
    //  - add: $(add)
    //  - plus: $(plus)
    //  - gist-new: $(gist-new)
    //  - repo-create: $(repo-create)
    //  - lightbulb: $(lightbulb)
    //  - light-bulb: $(light-bulb)
    //  - repo: $(repo)
    //  - repo-delete: $(repo-delete)
    //  - gist-fork: $(gist-fork)
    //  - repo-forked: $(repo-forked)
    //  - git-pull-request: $(git-pull-request)
    //  - git-pull-request-abandoned: $(git-pull-request-abandoned)
    //  - record-keys: $(record-keys)
    //  - keyboard: $(keyboard)
    //  - tag: $(tag)
    //  - git-pull-request-label: $(git-pull-request-label)
    //  - tag-add: $(tag-add)
    //  - tag-remove: $(tag-remove)
    //  - person: $(person)
    //  - person-follow: $(person-follow)
    //  - person-outline: $(person-outline)
    //  - person-filled: $(person-filled)
    //  - git-branch: $(git-branch)
    //  - git-branch-create: $(git-branch-create)
    //  - git-branch-delete: $(git-branch-delete)
    //  - source-control: $(source-control)
    //  - mirror: $(mirror)
    //  - mirror-public: $(mirror-public)
    //  - star: $(star)
    //  - star-add: $(star-add)
    //  - star-delete: $(star-delete)
    //  - star-empty: $(star-empty)
    //  - comment: $(comment)
    //  - comment-add: $(comment-add)
    //  - alert: $(alert)
    //  - warning: $(warning)
    //  - search: $(search)
    //  - search-save: $(search-save)
    //  - log-out: $(log-out)
    //  - sign-out: $(sign-out)
    //  - log-in: $(log-in)
    //  - sign-in: $(sign-in)
    //  - eye: $(eye)
    //  - eye-unwatch: $(eye-unwatch)
    //  - eye-watch: $(eye-watch)
    //  - circle-filled: $(circle-filled)
    //  - primitive-dot: $(primitive-dot)
    //  - close-dirty: $(close-dirty)
    //  - debug-breakpoint: $(debug-breakpoint)
    //  - debug-breakpoint-disabled: $(debug-breakpoint-disabled)
    //  - debug-hint: $(debug-hint)
    //  - terminal-decoration-success: $(terminal-decoration-success)
    //  - primitive-square: $(primitive-square)
    //  - edit: $(edit)
    //  - pencil: $(pencil)
    //  - info: $(info)
    //  - issue-opened: $(issue-opened)
    //  - gist-private: $(gist-private)
    //  - git-fork-private: $(git-fork-private)
    //  - lock: $(lock)
    //  - mirror-private: $(mirror-private)
    //  - close: $(close)
    //  - remove-close: $(remove-close)
    //  - x: $(x)
    //  - repo-sync: $(repo-sync)
    //  - sync: $(sync)
    //  - clone: $(clone)
    //  - desktop-download: $(desktop-download)
    //  - beaker: $(beaker)
    //  - microscope: $(microscope)
    //  - vm: $(vm)
    //  - device-desktop: $(device-desktop)
    //  - file: $(file)
    //  - file-text: $(file-text)
    //  - more: $(more)
    //  - ellipsis: $(ellipsis)
    //  - kebab-horizontal: $(kebab-horizontal)
    //  - mail-reply: $(mail-reply)
    //  - reply: $(reply)
    //  - organization: $(organization)
    //  - organization-filled: $(organization-filled)
    //  - organization-outline: $(organization-outline)
    //  - new-file: $(new-file)
    //  - file-add: $(file-add)
    //  - new-folder: $(new-folder)
    //  - file-directory-create: $(file-directory-create)
    //  - trash: $(trash)
    //  - trashcan: $(trashcan)
    //  - history: $(history)
    //  - clock: $(clock)
    //  - folder: $(folder)
    //  - file-directory: $(file-directory)
    //  - symbol-folder: $(symbol-folder)
    //  - logo-github: $(logo-github)
    //  - mark-github: $(mark-github)
    //  - github: $(github)
    //  - terminal: $(terminal)
    //  - console: $(console)
    //  - repl: $(repl)
    //  - zap: $(zap)
    //  - symbol-event: $(symbol-event)
    //  - error: $(error)
    //  - stop: $(stop)
    //  - variable: $(variable)
    //  - symbol-variable: $(symbol-variable)
    //  - array: $(array)
    //  - symbol-array: $(symbol-array)
    //  - symbol-module: $(symbol-module)
    //  - symbol-package: $(symbol-package)
    //  - symbol-namespace: $(symbol-namespace)
    //  - symbol-object: $(symbol-object)
    //  - symbol-method: $(symbol-method)
    //  - symbol-function: $(symbol-function)
    //  - symbol-constructor: $(symbol-constructor)
    //  - symbol-boolean: $(symbol-boolean)
    //  - symbol-null: $(symbol-null)
    //  - symbol-numeric: $(symbol-numeric)
    //  - symbol-number: $(symbol-number)
    //  - symbol-structure: $(symbol-structure)
    //  - symbol-struct: $(symbol-struct)
    //  - symbol-parameter: $(symbol-parameter)
    //  - symbol-type-parameter: $(symbol-type-parameter)
    //  - symbol-key: $(symbol-key)
    //  - symbol-text: $(symbol-text)
    //  - symbol-reference: $(symbol-reference)
    //  - go-to-file: $(go-to-file)
    //  - symbol-enum: $(symbol-enum)
    //  - symbol-value: $(symbol-value)
    //  - symbol-ruler: $(symbol-ruler)
    //  - symbol-unit: $(symbol-unit)
    //  - activate-breakpoints: $(activate-breakpoints)
    //  - archive: $(archive)
    //  - arrow-both: $(arrow-both)
    //  - arrow-down: $(arrow-down)
    //  - arrow-left: $(arrow-left)
    //  - arrow-right: $(arrow-right)
    //  - arrow-small-down: $(arrow-small-down)
    //  - arrow-small-left: $(arrow-small-left)
    //  - arrow-small-right: $(arrow-small-right)
    //  - arrow-small-up: $(arrow-small-up)
    //  - arrow-up: $(arrow-up)
    //  - bell: $(bell)
    //  - bold: $(bold)
    //  - book: $(book)
    //  - bookmark: $(bookmark)
    //  - debug-breakpoint-conditional-unverified: $(debug-breakpoint-conditional-unverified)
    //  - debug-breakpoint-conditional: $(debug-breakpoint-conditional)
    //  - debug-breakpoint-conditional-disabled: $(debug-breakpoint-conditional-disabled)
    //  - debug-breakpoint-data-unverified: $(debug-breakpoint-data-unverified)
    //  - debug-breakpoint-data: $(debug-breakpoint-data)
    //  - debug-breakpoint-data-disabled: $(debug-breakpoint-data-disabled)
    //  - debug-breakpoint-log-unverified: $(debug-breakpoint-log-unverified)
    //  - debug-breakpoint-log: $(debug-breakpoint-log)
    //  - debug-breakpoint-log-disabled: $(debug-breakpoint-log-disabled)
    //  - briefcase: $(briefcase)
    //  - broadcast: $(broadcast)
    //  - browser: $(browser)
    //  - bug: $(bug)
    //  - calendar: $(calendar)
    //  - case-sensitive: $(case-sensitive)
    //  - check: $(check)
    //  - checklist: $(checklist)
    //  - chevron-down: $(chevron-down)
    //  - chevron-left: $(chevron-left)
    //  - chevron-right: $(chevron-right)
    //  - chevron-up: $(chevron-up)
    //  - chrome-close: $(chrome-close)
    //  - chrome-maximize: $(chrome-maximize)
    //  - chrome-minimize: $(chrome-minimize)
    //  - chrome-restore: $(chrome-restore)
    //  - circle-outline: $(circle-outline)
    //  - circle: $(circle)
    //  - debug-breakpoint-unverified: $(debug-breakpoint-unverified)
    //  - terminal-decoration-incomplete: $(terminal-decoration-incomplete)
    //  - circle-slash: $(circle-slash)
    //  - circuit-board: $(circuit-board)
    //  - clear-all: $(clear-all)
    //  - clippy: $(clippy)
    //  - close-all: $(close-all)
    //  - cloud-download: $(cloud-download)
    //  - cloud-upload: $(cloud-upload)
    //  - code: $(code)
    //  - collapse-all: $(collapse-all)
    //  - color-mode: $(color-mode)
    //  - comment-discussion: $(comment-discussion)
    //  - credit-card: $(credit-card)
    //  - dash: $(dash)
    //  - dashboard: $(dashboard)
    //  - database: $(database)
    //  - debug-continue: $(debug-continue)
    //  - debug-disconnect: $(debug-disconnect)
    //  - debug-pause: $(debug-pause)
    //  - debug-restart: $(debug-restart)
    //  - debug-start: $(debug-start)
    //  - debug-step-into: $(debug-step-into)
    //  - debug-step-out: $(debug-step-out)
    //  - debug-step-over: $(debug-step-over)
    //  - debug-stop: $(debug-stop)
    //  - debug: $(debug)
    //  - device-camera-video: $(device-camera-video)
    //  - device-camera: $(device-camera)
    //  - device-mobile: $(device-mobile)
    //  - diff-added: $(diff-added)
    //  - diff-ignored: $(diff-ignored)
    //  - diff-modified: $(diff-modified)
    //  - diff-removed: $(diff-removed)
    //  - diff-renamed: $(diff-renamed)
    //  - diff: $(diff)
    //  - diff-sidebyside: $(diff-sidebyside)
    //  - discard: $(discard)
    //  - editor-layout: $(editor-layout)
    //  - empty-window: $(empty-window)
    //  - exclude: $(exclude)
    //  - extensions: $(extensions)
    //  - eye-closed: $(eye-closed)
    //  - file-binary: $(file-binary)
    //  - file-code: $(file-code)
    //  - file-media: $(file-media)
    //  - file-pdf: $(file-pdf)
    //  - file-submodule: $(file-submodule)
    //  - file-symlink-directory: $(file-symlink-directory)
    //  - file-symlink-file: $(file-symlink-file)
    //  - file-zip: $(file-zip)
    //  - files: $(files)
    //  - filter: $(filter)
    //  - flame: $(flame)
    //  - fold-down: $(fold-down)
    //  - fold-up: $(fold-up)
    //  - fold: $(fold)
    //  - folder-active: $(folder-active)
    //  - folder-opened: $(folder-opened)
    //  - gear: $(gear)
    //  - gift: $(gift)
    //  - gist-secret: $(gist-secret)
    //  - gist: $(gist)
    //  - git-commit: $(git-commit)
    //  - git-compare: $(git-compare)
    //  - compare-changes: $(compare-changes)
    //  - git-merge: $(git-merge)
    //  - github-action: $(github-action)
    //  - github-alt: $(github-alt)
    //  - globe: $(globe)
    //  - grabber: $(grabber)
    //  - graph: $(graph)
    //  - gripper: $(gripper)
    //  - heart: $(heart)
    //  - home: $(home)
    //  - horizontal-rule: $(horizontal-rule)
    //  - hubot: $(hubot)
    //  - inbox: $(inbox)
    //  - issue-reopened: $(issue-reopened)
    //  - issues: $(issues)
    //  - italic: $(italic)
    //  - jersey: $(jersey)
    //  - json: $(json)
    //  - kebab-vertical: $(kebab-vertical)
    //  - key: $(key)
    //  - law: $(law)
    //  - lightbulb-autofix: $(lightbulb-autofix)
    //  - link-external: $(link-external)
    //  - link: $(link)
    //  - list-ordered: $(list-ordered)
    //  - list-unordered: $(list-unordered)
    //  - live-share: $(live-share)
    //  - loading: $(loading)
    //  - location: $(location)
    //  - mail-read: $(mail-read)
    //  - mail: $(mail)
    //  - markdown: $(markdown)
    //  - megaphone: $(megaphone)
    //  - mention: $(mention)
    //  - milestone: $(milestone)
    //  - git-pull-request-milestone: $(git-pull-request-milestone)
    //  - mortar-board: $(mortar-board)
    //  - move: $(move)
    //  - multiple-windows: $(multiple-windows)
    //  - mute: $(mute)
    //  - no-newline: $(no-newline)
    //  - note: $(note)
    //  - octoface: $(octoface)
    //  - open-preview: $(open-preview)
    //  - package: $(package)
    //  - paintcan: $(paintcan)
    //  - pin: $(pin)
    //  - play: $(play)
    //  - run: $(run)
    //  - plug: $(plug)
    //  - preserve-case: $(preserve-case)
    //  - preview: $(preview)
    //  - project: $(project)
    //  - pulse: $(pulse)
    //  - question: $(question)
    //  - quote: $(quote)
    //  - radio-tower: $(radio-tower)
    //  - reactions: $(reactions)
    //  - references: $(references)
    //  - refresh: $(refresh)
    //  - regex: $(regex)
    //  - remote-explorer: $(remote-explorer)
    //  - remote: $(remote)
    //  - remove: $(remove)
    //  - replace-all: $(replace-all)
    //  - replace: $(replace)
    //  - repo-clone: $(repo-clone)
    //  - repo-force-push: $(repo-force-push)
    //  - repo-pull: $(repo-pull)
    //  - repo-push: $(repo-push)
    //  - report: $(report)
    //  - request-changes: $(request-changes)
    //  - rocket: $(rocket)
    //  - root-folder-opened: $(root-folder-opened)
    //  - root-folder: $(root-folder)
    //  - rss: $(rss)
    //  - ruby: $(ruby)
    //  - save-all: $(save-all)
    //  - save-as: $(save-as)
    //  - save: $(save)
    //  - screen-full: $(screen-full)
    //  - screen-normal: $(screen-normal)
    //  - search-stop: $(search-stop)
    //  - server: $(server)
    //  - settings-gear: $(settings-gear)
    //  - settings: $(settings)
    //  - shield: $(shield)
    //  - smiley: $(smiley)
    //  - sort-precedence: $(sort-precedence)
    //  - split-horizontal: $(split-horizontal)
    //  - split-vertical: $(split-vertical)
    //  - squirrel: $(squirrel)
    //  - star-full: $(star-full)
    //  - star-half: $(star-half)
    //  - symbol-class: $(symbol-class)
    //  - symbol-color: $(symbol-color)
    //  - symbol-constant: $(symbol-constant)
    //  - symbol-enum-member: $(symbol-enum-member)
    //  - symbol-field: $(symbol-field)
    //  - symbol-file: $(symbol-file)
    //  - symbol-interface: $(symbol-interface)
    //  - symbol-keyword: $(symbol-keyword)
    //  - symbol-misc: $(symbol-misc)
    //  - symbol-operator: $(symbol-operator)
    //  - symbol-property: $(symbol-property)
    //  - wrench: $(wrench)
    //  - wrench-subaction: $(wrench-subaction)
    //  - symbol-snippet: $(symbol-snippet)
    //  - tasklist: $(tasklist)
    //  - telescope: $(telescope)
    //  - text-size: $(text-size)
    //  - three-bars: $(three-bars)
    //  - thumbsdown: $(thumbsdown)
    //  - thumbsup: $(thumbsup)
    //  - tools: $(tools)
    //  - triangle-down: $(triangle-down)
    //  - triangle-left: $(triangle-left)
    //  - triangle-right: $(triangle-right)
    //  - triangle-up: $(triangle-up)
    //  - twitter: $(twitter)
    //  - unfold: $(unfold)
    //  - unlock: $(unlock)
    //  - unmute: $(unmute)
    //  - unverified: $(unverified)
    //  - verified: $(verified)
    //  - versions: $(versions)
    //  - vm-active: $(vm-active)
    //  - vm-outline: $(vm-outline)
    //  - vm-running: $(vm-running)
    //  - watch: $(watch)
    //  - whitespace: $(whitespace)
    //  - whole-word: $(whole-word)
    //  - window: $(window)
    //  - word-wrap: $(word-wrap)
    //  - zoom-in: $(zoom-in)
    //  - zoom-out: $(zoom-out)
    //  - list-filter: $(list-filter)
    //  - list-flat: $(list-flat)
    //  - list-selection: $(list-selection)
    //  - selection: $(selection)
    //  - list-tree: $(list-tree)
    //  - debug-breakpoint-function-unverified: $(debug-breakpoint-function-unverified)
    //  - debug-breakpoint-function: $(debug-breakpoint-function)
    //  - debug-breakpoint-function-disabled: $(debug-breakpoint-function-disabled)
    //  - debug-stackframe-active: $(debug-stackframe-active)
    //  - circle-small-filled: $(circle-small-filled)
    //  - debug-stackframe-dot: $(debug-stackframe-dot)
    //  - terminal-decoration-mark: $(terminal-decoration-mark)
    //  - debug-stackframe: $(debug-stackframe)
    //  - debug-stackframe-focused: $(debug-stackframe-focused)
    //  - debug-breakpoint-unsupported: $(debug-breakpoint-unsupported)
    //  - symbol-string: $(symbol-string)
    //  - debug-reverse-continue: $(debug-reverse-continue)
    //  - debug-step-back: $(debug-step-back)
    //  - debug-restart-frame: $(debug-restart-frame)
    //  - debug-alt: $(debug-alt)
    //  - call-incoming: $(call-incoming)
    //  - call-outgoing: $(call-outgoing)
    //  - menu: $(menu)
    //  - expand-all: $(expand-all)
    //  - feedback: $(feedback)
    //  - git-pull-request-reviewer: $(git-pull-request-reviewer)
    //  - group-by-ref-type: $(group-by-ref-type)
    //  - ungroup-by-ref-type: $(ungroup-by-ref-type)
    //  - account: $(account)
    //  - git-pull-request-assignee: $(git-pull-request-assignee)
    //  - bell-dot: $(bell-dot)
    //  - debug-console: $(debug-console)
    //  - library: $(library)
    //  - output: $(output)
    //  - run-all: $(run-all)
    //  - sync-ignored: $(sync-ignored)
    //  - pinned: $(pinned)
    //  - github-inverted: $(github-inverted)
    //  - server-process: $(server-process)
    //  - server-environment: $(server-environment)
    //  - pass: $(pass)
    //  - issue-closed: $(issue-closed)
    //  - stop-circle: $(stop-circle)
    //  - play-circle: $(play-circle)
    //  - record: $(record)
    //  - debug-alt-small: $(debug-alt-small)
    //  - vm-connect: $(vm-connect)
    //  - cloud: $(cloud)
    //  - merge: $(merge)
    //  - export: $(export)
    //  - graph-left: $(graph-left)
    //  - magnet: $(magnet)
    //  - notebook: $(notebook)
    //  - redo: $(redo)
    //  - check-all: $(check-all)
    //  - pinned-dirty: $(pinned-dirty)
    //  - pass-filled: $(pass-filled)
    //  - circle-large-filled: $(circle-large-filled)
    //  - circle-large: $(circle-large)
    //  - circle-large-outline: $(circle-large-outline)
    //  - combine: $(combine)
    //  - gather: $(gather)
    //  - table: $(table)
    //  - variable-group: $(variable-group)
    //  - type-hierarchy: $(type-hierarchy)
    //  - type-hierarchy-sub: $(type-hierarchy-sub)
    //  - type-hierarchy-super: $(type-hierarchy-super)
    //  - git-pull-request-create: $(git-pull-request-create)
    //  - run-above: $(run-above)
    //  - run-below: $(run-below)
    //  - notebook-template: $(notebook-template)
    //  - debug-rerun: $(debug-rerun)
    //  - workspace-trusted: $(workspace-trusted)
    //  - workspace-untrusted: $(workspace-untrusted)
    //  - workspace-unknown: $(workspace-unknown)
    //  - terminal-cmd: $(terminal-cmd)
    //  - terminal-debian: $(terminal-debian)
    //  - terminal-linux: $(terminal-linux)
    //  - terminal-powershell: $(terminal-powershell)
    //  - terminal-tmux: $(terminal-tmux)
    //  - terminal-ubuntu: $(terminal-ubuntu)
    //  - terminal-bash: $(terminal-bash)
    //  - arrow-swap: $(arrow-swap)
    //  - copy: $(copy)
    //  - person-add: $(person-add)
    //  - filter-filled: $(filter-filled)
    //  - wand: $(wand)
    //  - debug-line-by-line: $(debug-line-by-line)
    //  - inspect: $(inspect)
    //  - layers: $(layers)
    //  - layers-dot: $(layers-dot)
    //  - layers-active: $(layers-active)
    //  - compass: $(compass)
    //  - compass-dot: $(compass-dot)
    //  - compass-active: $(compass-active)
    //  - azure: $(azure)
    //  - issue-draft: $(issue-draft)
    //  - git-pull-request-closed: $(git-pull-request-closed)
    //  - git-pull-request-draft: $(git-pull-request-draft)
    //  - debug-all: $(debug-all)
    //  - debug-coverage: $(debug-coverage)
    //  - run-errors: $(run-errors)
    //  - folder-library: $(folder-library)
    //  - debug-continue-small: $(debug-continue-small)
    //  - beaker-stop: $(beaker-stop)
    //  - graph-line: $(graph-line)
    //  - graph-scatter: $(graph-scatter)
    //  - pie-chart: $(pie-chart)
    //  - bracket: $(bracket)
    //  - bracket-dot: $(bracket-dot)
    //  - bracket-error: $(bracket-error)
    //  - lock-small: $(lock-small)
    //  - azure-devops: $(azure-devops)
    //  - verified-filled: $(verified-filled)
    //  - newline: $(newline)
    //  - layout: $(layout)
    //  - layout-activitybar-left: $(layout-activitybar-left)
    //  - layout-activitybar-right: $(layout-activitybar-right)
    //  - layout-panel-left: $(layout-panel-left)
    //  - layout-panel-center: $(layout-panel-center)
    //  - layout-panel-justify: $(layout-panel-justify)
    //  - layout-panel-right: $(layout-panel-right)
    //  - layout-panel: $(layout-panel)
    //  - layout-sidebar-left: $(layout-sidebar-left)
    //  - layout-sidebar-right: $(layout-sidebar-right)
    //  - layout-statusbar: $(layout-statusbar)
    //  - layout-menubar: $(layout-menubar)
    //  - layout-centered: $(layout-centered)
    //  - target: $(target)
    //  - indent: $(indent)
    //  - record-small: $(record-small)
    //  - error-small: $(error-small)
    //  - terminal-decoration-error: $(terminal-decoration-error)
    //  - arrow-circle-down: $(arrow-circle-down)
    //  - arrow-circle-left: $(arrow-circle-left)
    //  - arrow-circle-right: $(arrow-circle-right)
    //  - arrow-circle-up: $(arrow-circle-up)
    //  - layout-sidebar-right-off: $(layout-sidebar-right-off)
    //  - layout-panel-off: $(layout-panel-off)
    //  - layout-sidebar-left-off: $(layout-sidebar-left-off)
    //  - blank: $(blank)
    //  - heart-filled: $(heart-filled)
    //  - map: $(map)
    //  - map-horizontal: $(map-horizontal)
    //  - fold-horizontal: $(fold-horizontal)
    //  - map-filled: $(map-filled)
    //  - map-horizontal-filled: $(map-horizontal-filled)
    //  - fold-horizontal-filled: $(fold-horizontal-filled)
    //  - circle-small: $(circle-small)
    //  - bell-slash: $(bell-slash)
    //  - bell-slash-dot: $(bell-slash-dot)
    //  - comment-unresolved: $(comment-unresolved)
    //  - git-pull-request-go-to-changes: $(git-pull-request-go-to-changes)
    //  - git-pull-request-new-changes: $(git-pull-request-new-changes)
    //  - search-fuzzy: $(search-fuzzy)
    //  - comment-draft: $(comment-draft)
    //  - send: $(send)
    //  - sparkle: $(sparkle)
    //  - insert: $(insert)
    //  - mic: $(mic)
    //  - thumbsdown-filled: $(thumbsdown-filled)
    //  - thumbsup-filled: $(thumbsup-filled)
    //  - coffee: $(coffee)
    //  - snake: $(snake)
    //  - game: $(game)
    //  - vr: $(vr)
    //  - chip: $(chip)
    //  - piano: $(piano)
    //  - music: $(music)
    //  - mic-filled: $(mic-filled)
    //  - repo-fetch: $(repo-fetch)
    //  - copilot: $(copilot)
    //  - lightbulb-sparkle: $(lightbulb-sparkle)
    //  - robot: $(robot)
    //  - sparkle-filled: $(sparkle-filled)
    //  - diff-single: $(diff-single)
    //  - diff-multiple: $(diff-multiple)
    //  - surround-with: $(surround-with)
    //  - share: $(share)
    //  - git-stash: $(git-stash)
    //  - git-stash-apply: $(git-stash-apply)
    //  - git-stash-pop: $(git-stash-pop)
    //  - vscode: $(vscode)
    //  - vscode-insiders: $(vscode-insiders)
    //  - code-oss: $(code-oss)
    //  - run-coverage: $(run-coverage)
    //  - run-all-coverage: $(run-all-coverage)
    //  - coverage: $(coverage)
    //  - github-project: $(github-project)
    //  - map-vertical: $(map-vertical)
    //  - fold-vertical: $(fold-vertical)
    //  - map-vertical-filled: $(map-vertical-filled)
    //  - fold-vertical-filled: $(fold-vertical-filled)
    //  - go-to-search: $(go-to-search)
    //  - percentage: $(percentage)
    //  - sort-percentage: $(sort-percentage)
    //  - attach: $(attach)
    //  - go-to-editing-session: $(go-to-editing-session)
    //  - edit-session: $(edit-session)
    //  - code-review: $(code-review)
    //  - copilot-warning: $(copilot-warning)
    //  - python: $(python)
    //  - copilot-large: $(copilot-large)
    //  - copilot-warning-large: $(copilot-warning-large)
    //  - keyboard-tab: $(keyboard-tab)
    //  - cascade: $(cascade)
    //  - dialog-error: $(dialog-error)
    //  - dialog-warning: $(dialog-warning)
    //  - dialog-info: $(dialog-info)
    //  - dialog-close: $(dialog-close)
    //  - tree-item-expanded: $(tree-item-expanded)
    //  - tree-filter-on-type-on: $(tree-filter-on-type-on)
    //  - tree-filter-on-type-off: $(tree-filter-on-type-off)
    //  - tree-filter-clear: $(tree-filter-clear)
    //  - tree-item-loading: $(tree-item-loading)
    //  - menu-selection: $(menu-selection)
    //  - menu-submenu: $(menu-submenu)
    //  - menubar-more: $(menubar-more)
    //  - scrollbar-button-left: $(scrollbar-button-left)
    //  - scrollbar-button-right: $(scrollbar-button-right)
    //  - scrollbar-button-up: $(scrollbar-button-up)
    //  - scrollbar-button-down: $(scrollbar-button-down)
    //  - toolbar-more: $(toolbar-more)
    //  - quick-input-back: $(quick-input-back)
    //  - drop-down-button: $(drop-down-button)
    //  - symbol-customcolor: $(symbol-customcolor)
    //  - export: $(export)
    //  - workspace-unspecified: $(workspace-unspecified)
    //  - newline: $(newline)
    //  - thumbsdown-filled: $(thumbsdown-filled)
    //  - thumbsup-filled: $(thumbsup-filled)
    //  - git-fetch: $(git-fetch)
    //  - lightbulb-sparkle-autofix: $(lightbulb-sparkle-autofix)
    //  - debug-breakpoint-pending: $(debug-breakpoint-pending)
    "terminal.integrated.tabs.defaultIcon": "terminal",
  
    // Controls the terminal description, which appears to the right of the title. Variables are substituted based on the context:
    // - `${cwd}`: the terminal's current working directory
    // - `${cwdFolder}`: the terminal's current working directory, displayed for multi-root workspaces or in a single root workspace when the value differs from the initial working directory. On Windows, this will only be displayed when shell integration is enabled.
    // - `${workspaceFolder}`: the workspace in which the terminal was launched
    // - `${workspaceFolderName}`: the `name` of the workspace in which the terminal was launched
    // - `${local}`: indicates a local terminal in a remote workspace
    // - `${process}`: the name of the terminal process
    // - `${progress}`: the progress state as reported by the `OSC 9;4` sequence
    // - `${separator}`: a conditional separator (` - `) that only shows when surrounded by variables with values or static text.
    // - `${sequence}`: the name provided to the terminal by the process
    // - `${task}`: indicates this terminal is associated with a task
    // - `${shellType}`: the detected shell type
    // - `${shellCommand}`: the command being executed according to shell integration. This also requires high confidence in the detected command line which may not work in some prompt frameworks.
    // - `${shellPromptInput}`: the shell's full prompt input according to shell integration
    "terminal.integrated.tabs.description": "${task}${separator}${local}${separator}${cwdFolder}",
  
    // Controls whether terminal tab statuses support animation (eg. in progress tasks).
    "terminal.integrated.tabs.enableAnimation": true,
  
    // Controls whether terminal tabs display as a list to the side of the terminal. When this is disabled a dropdown will display instead.
    "terminal.integrated.tabs.enabled": true,
  
    // Controls whether focusing the terminal of a tab happens on double or single click.
    //  - singleClick: Focus the terminal when clicking a terminal tab
    //  - doubleClick: Focus the terminal when double-clicking a terminal tab
    "terminal.integrated.tabs.focusMode": "doubleClick",
  
    // Controls whether the terminal tabs view will hide under certain conditions.
    //  - never: Never hide the terminal tabs view
    //  - singleTerminal: Hide the terminal tabs view when there is only a single terminal opened
    //  - singleGroup: Hide the terminal tabs view when there is only a single terminal group opened
    "terminal.integrated.tabs.hideCondition": "singleTerminal",
  
    // Controls the location of the terminal tabs, either to the left or right of the actual terminal(s).
    //  - left: Show the terminal tabs view to the left of the terminal
    //  - right: Show the terminal tabs view to the right of the terminal
    "terminal.integrated.tabs.location": "right",
  
    // Separator used by `terminal.integrated.tabs.title#` and `#terminal.integrated.tabs.description`.
    "terminal.integrated.tabs.separator": " - ",
  
    // Controls whether terminal split and kill buttons are displays next to the new terminal button.
    //  - always: Always show the actions
    //  - singleTerminal: Show the actions when it is the only terminal opened
    //  - singleTerminalOrNarrow: Show the actions when it is the only terminal opened or when the tabs view is in its narrow textless state
    //  - never: Never show the actions
    "terminal.integrated.tabs.showActions": "singleTerminalOrNarrow",
  
    // Shows the active terminal information in the view. This is particularly useful when the title within the tabs aren't visible.
    //  - always: Always show the active terminal
    //  - singleTerminal: Show the active terminal when it is the only terminal opened
    //  - singleTerminalOrNarrow: Show the active terminal when it is the only terminal opened or when the tabs view is in its narrow textless state
    //  - never: Never show the active terminal
    "terminal.integrated.tabs.showActiveTerminal": "singleTerminalOrNarrow",
  
    // Controls the terminal title. Variables are substituted based on the context:
    // - `${cwd}`: the terminal's current working directory
    // - `${cwdFolder}`: the terminal's current working directory, displayed for multi-root workspaces or in a single root workspace when the value differs from the initial working directory. On Windows, this will only be displayed when shell integration is enabled.
    // - `${workspaceFolder}`: the workspace in which the terminal was launched
    // - `${workspaceFolderName}`: the `name` of the workspace in which the terminal was launched
    // - `${local}`: indicates a local terminal in a remote workspace
    // - `${process}`: the name of the terminal process
    // - `${progress}`: the progress state as reported by the `OSC 9;4` sequence
    // - `${separator}`: a conditional separator (` - `) that only shows when surrounded by variables with values or static text.
    // - `${sequence}`: the name provided to the terminal by the process
    // - `${task}`: indicates this terminal is associated with a task
    // - `${shellType}`: the detected shell type
    // - `${shellCommand}`: the command being executed according to shell integration. This also requires high confidence in the detected command line which may not work in some prompt frameworks.
    // - `${shellPromptInput}`: the shell's full prompt input according to shell integration
    "terminal.integrated.tabs.title": "${process}",
  
    // The number of cells in a tab stop.
    "terminal.integrated.tabStopWidth": 8,
  
    // Controls what version of Unicode to use when evaluating the width of characters in the terminal. If you experience emoji or other wide characters not taking up the right amount of space or backspace either deleting too much or too little then you may want to try tweaking this setting.
    //  - 6: Version 6 of Unicode. This is an older version which should work better on older systems.
    //  - 11: Version 11 of Unicode. This version provides better support on modern systems that use modern versions of Unicode.
    "terminal.integrated.unicodeVersion": "11",
  
    // Controls whether or not WSL distros are shown in the terminal dropdown
    "terminal.integrated.useWslProfiles": true,
  
    // Whether to use ConPTY for Windows terminal process communication (requires Windows 10 build number 18309+). Winpty will be used if this is false.
    "terminal.integrated.windowsEnableConpty": true,
  
    // A string containing all characters to be considered word separators when double-clicking to select word and in the fallback 'word' link detection. Since this is used for link detection, including characters such as `:` that are used when detecting links will cause the line and column part of links like `file:10:5` to be ignored.
    "terminal.integrated.wordSeparators": " ()[]{}',\"`─‘’“”|"
  
  },
  {
    // Spring boot dashboard memory view - Display max data points in the graph
    "spring.dashboard.memory-view.display-data.max-datapoints": 10,
  
    // Spring boot dashboard memory view - Delay between fetching new data in milliseconds
    "spring.dashboard.memory-view.fetch-data.delay-in-milliseconds": 5000
  
  },
  {
    // Enable automatic tasks - note that tasks won't run in an untrusted workspace.
    //  - on: Always
    //  - off: Never
    "task.allowAutomaticTasks": "on",
  
    // Controls enablement of `provideTasks` for all task provider extension. If the Tasks: Run Task command is slow, disabling auto detect for task providers may help. Individual extensions may also provide settings that disable auto detection.
    "task.autoDetect": "on",
  
    // Configures whether to show the problem matcher prompt when running a task. Set to `true` to never prompt, or use a dictionary of task types to turn off prompting only for specific task types.
    "task.problemMatchers.neverPrompt": false,
  
    // Controls whether to show the task detail for tasks that have a detail in task quick picks, such as Run Task.
    "task.quickOpen.detail": true,
  
    // Controls the number of recent items tracked in task quick open dialog.
    "task.quickOpen.history": 30,
  
    // Causes the Tasks: Run Task command to use the slower "show all" behavior instead of the faster two level picker where tasks are grouped by provider.
    "task.quickOpen.showAll": false,
  
    // Controls whether the task quick pick is skipped when there is only one task to pick from.
    "task.quickOpen.skip": false,
  
    // On window reload, reconnect to tasks that have problem matchers.
    "task.reconnection": true,
  
    // Save all dirty editors before running a task.
    //  - always: Always saves all editors before running.
    //  - never: Never saves editors before running.
    //  - prompt: Prompts whether to save editors before running.
    "task.saveBeforeRun": "always",
  
    // Configures whether a warning is shown when a provider is slow
    "task.slowProviderWarning": true,
  
    // Enable verbose logging for tasks.
    "task.verboseLogging": false
  
  },
  {
    // Controls whether Problems view should automatically reveal files when opening them.
    "problems.autoReveal": true,
  
    // Show Errors & Warnings on files and folder. Overwritten by `problems.visibility` when it is off.
    "problems.decorations.enabled": true,
  
    // Controls the default view mode of the Problems view.
    "problems.defaultViewMode": "tree",
  
    // When enabled shows the current problem in the status bar.
    "problems.showCurrentInStatus": false,
  
    // Controls the order in which problems are navigated.
    //  - severity: Navigate problems ordered by severity
    //  - position: Navigate problems ordered by position
    "problems.sortOrder": "severity",
  
    // Controls whether the problems are visible throughout the editor and workbench.
    "problems.visibility": true
  
  },
  {
    // Enable/disable navigation breadcrumbs.
    "breadcrumbs.enabled": true,
  
    // Controls whether and how file paths are shown in the breadcrumbs view.
    //  - on: Show the file path in the breadcrumbs view.
    //  - off: Do not show the file path in the breadcrumbs view.
    //  - last: Only show the last element of the file path in the breadcrumbs view.
    "breadcrumbs.filePath": "on",
  
    // Render breadcrumb items with icons.
    "breadcrumbs.icons": true,
  
    // When enabled breadcrumbs show `array`-symbols.
    "breadcrumbs.showArrays": true,
  
    // When enabled breadcrumbs show `boolean`-symbols.
    "breadcrumbs.showBooleans": true,
  
    // When enabled breadcrumbs show `class`-symbols.
    "breadcrumbs.showClasses": true,
  
    // When enabled breadcrumbs show `constant`-symbols.
    "breadcrumbs.showConstants": true,
  
    // When enabled breadcrumbs show `constructor`-symbols.
    "breadcrumbs.showConstructors": true,
  
    // When enabled breadcrumbs show `enumMember`-symbols.
    "breadcrumbs.showEnumMembers": true,
  
    // When enabled breadcrumbs show `enum`-symbols.
    "breadcrumbs.showEnums": true,
  
    // When enabled breadcrumbs show `event`-symbols.
    "breadcrumbs.showEvents": true,
  
    // When enabled breadcrumbs show `field`-symbols.
    "breadcrumbs.showFields": true,
  
    // When enabled breadcrumbs show `file`-symbols.
    "breadcrumbs.showFiles": true,
  
    // When enabled breadcrumbs show `function`-symbols.
    "breadcrumbs.showFunctions": true,
  
    // When enabled breadcrumbs show `interface`-symbols.
    "breadcrumbs.showInterfaces": true,
  
    // When enabled breadcrumbs show `key`-symbols.
    "breadcrumbs.showKeys": true,
  
    // When enabled breadcrumbs show `method`-symbols.
    "breadcrumbs.showMethods": true,
  
    // When enabled breadcrumbs show `module`-symbols.
    "breadcrumbs.showModules": true,
  
    // When enabled breadcrumbs show `namespace`-symbols.
    "breadcrumbs.showNamespaces": true,
  
    // When enabled breadcrumbs show `null`-symbols.
    "breadcrumbs.showNull": true,
  
    // When enabled breadcrumbs show `number`-symbols.
    "breadcrumbs.showNumbers": true,
  
    // When enabled breadcrumbs show `object`-symbols.
    "breadcrumbs.showObjects": true,
  
    // When enabled breadcrumbs show `operator`-symbols.
    "breadcrumbs.showOperators": true,
  
    // When enabled breadcrumbs show `package`-symbols.
    "breadcrumbs.showPackages": true,
  
    // When enabled breadcrumbs show `property`-symbols.
    "breadcrumbs.showProperties": true,
  
    // When enabled breadcrumbs show `string`-symbols.
    "breadcrumbs.showStrings": true,
  
    // When enabled breadcrumbs show `struct`-symbols.
    "breadcrumbs.showStructs": true,
  
    // When enabled breadcrumbs show `typeParameter`-symbols.
    "breadcrumbs.showTypeParameters": true,
  
    // When enabled breadcrumbs show `variable`-symbols.
    "breadcrumbs.showVariables": true,
  
    // Controls whether and how symbols are shown in the breadcrumbs view.
    //  - on: Show all symbols in the breadcrumbs view.
    //  - off: Do not show symbols in the breadcrumbs view.
    //  - last: Only show the current symbol in the breadcrumbs view.
    "breadcrumbs.symbolPath": "on",
  
    // Controls how symbols are sorted in the breadcrumbs outline view.
    //  - position: Show symbol outline in file position order.
    //  - name: Show symbol outline in alphabetical order.
    //  - type: Show symbol outline in symbol type order.
    "breadcrumbs.symbolSortOrder": "position"
  
  },
  {
    // The list of clean ups to be run on the current document when it's saved or when the cleanup command is issued. Clean ups can automatically fix code style or programming mistakes. Click [HERE](command:_java.learnMoreAboutCleanUps) to learn more about what each clean up does.
    "java.cleanup.actions": [
      "renameFileToType"
    ],
  
    // Deprecated, please use 'java.cleanup.actions' instead.
    // 
    "java.cleanup.actionsOnSave": [],
  
    // Reordering of fields, enum constants, and initializers can result in semantic and runtime changes due to different initialization and persistence order. This setting prevents this from occurring.
    "java.codeAction.sortMembers.avoidVolatileChanges": true,
  
    // Show quickfixes at the problem or line level.
    "java.quickfix.showAt": "line",
  
    // Specify whether to replace all the occurrences of the subtype with the new extracted interface.
    "java.refactoring.extract.interface.replace": true,
  
    // Enable/disable cleanup actions on save.
    "java.saveActions.cleanup": true,
  
    // Enable/disable auto organize imports on save action
    "java.saveActions.organizeImports": false,
  
    // Specifies the number of imports added before a star-import declaration is used.
    "java.sources.organizeImports.starThreshold": 99,
  
    // Specifies the number of static imports added before a star-import declaration is used.
    "java.sources.organizeImports.staticStarThreshold": 99
  
  },
  {
    // Controls whether Outline items are collapsed or expanded.
    //  - alwaysCollapse: Collapse all items.
    //  - alwaysExpand: Expand all items.
    "outline.collapseItems": "alwaysExpand",
  
    // Render Outline elements with icons.
    "outline.icons": true,
  
    // Use badges for errors and warnings on Outline elements. Overwritten by `problems.visibility` when it is off.
    "outline.problems.badges": true,
  
    // Use colors for errors and warnings on Outline elements. Overwritten by `problems.visibility` when it is off.
    "outline.problems.colors": true,
  
    // Show errors and warnings on Outline elements. Overwritten by `problems.visibility` when it is off.
    "outline.problems.enabled": true,
  
    // When enabled, Outline shows `array`-symbols.
    "outline.showArrays": true,
  
    // When enabled, Outline shows `boolean`-symbols.
    "outline.showBooleans": true,
  
    // When enabled, Outline shows `class`-symbols.
    "outline.showClasses": true,
  
    // When enabled, Outline shows `constant`-symbols.
    "outline.showConstants": true,
  
    // When enabled, Outline shows `constructor`-symbols.
    "outline.showConstructors": true,
  
    // When enabled, Outline shows `enumMember`-symbols.
    "outline.showEnumMembers": true,
  
    // When enabled, Outline shows `enum`-symbols.
    "outline.showEnums": true,
  
    // When enabled, Outline shows `event`-symbols.
    "outline.showEvents": true,
  
    // When enabled, Outline shows `field`-symbols.
    "outline.showFields": true,
  
    // When enabled, Outline shows `file`-symbols.
    "outline.showFiles": true,
  
    // When enabled, Outline shows `function`-symbols.
    "outline.showFunctions": true,
  
    // When enabled, Outline shows `interface`-symbols.
    "outline.showInterfaces": true,
  
    // When enabled, Outline shows `key`-symbols.
    "outline.showKeys": true,
  
    // When enabled, Outline shows `method`-symbols.
    "outline.showMethods": true,
  
    // When enabled, Outline shows `module`-symbols.
    "outline.showModules": true,
  
    // When enabled, Outline shows `namespace`-symbols.
    "outline.showNamespaces": true,
  
    // When enabled, Outline shows `null`-symbols.
    "outline.showNull": true,
  
    // When enabled, Outline shows `number`-symbols.
    "outline.showNumbers": true,
  
    // When enabled, Outline shows `object`-symbols.
    "outline.showObjects": true,
  
    // When enabled, Outline shows `operator`-symbols.
    "outline.showOperators": true,
  
    // When enabled, Outline shows `package`-symbols.
    "outline.showPackages": true,
  
    // When enabled, Outline shows `property`-symbols.
    "outline.showProperties": true,
  
    // When enabled, Outline shows `string`-symbols.
    "outline.showStrings": true,
  
    // When enabled, Outline shows `struct`-symbols.
    "outline.showStructs": true,
  
    // When enabled, Outline shows `typeParameter`-symbols.
    "outline.showTypeParameters": true,
  
    // When enabled, Outline shows `variable`-symbols.
    "outline.showVariables": true
  
  },
  {
    // Enable/disable the implementations code lens for the provided categories.
    //  - none: Disable the implementations code lens
    //  - types: Enable the implementations code lens only for types
    //  - methods: Enable the implementations code lens only for methods
    //  - all: Enable the implementations code lens for types and methods
    "java.implementationCodeLens": "none",
  
    // Enable/disable inlay hints for parameter names:
    // ```java
    // 
    // Integer.valueOf(/* s: */ '123', /* radix: */ 10)
    //  
    // ```
    //  `java.inlayHints.parameterNames.exclusions` can be used to disable the inlay hints for methods.
    //  - none: Disable parameter name hints
    //  - literals: Enable parameter name hints only for literal arguments
    //  - all: Enable parameter name hints for literal and non-literal arguments
    "java.inlayHints.parameterNames.enabled": "literals",
  
    // The patterns for the methods that will be disabled to show the inlay hints. Supported pattern examples:
    //  - `java.lang.Math.*` - All the methods from java.lang.Math.
    //  - `*.Arrays.asList` - Methods named as 'asList' in the types named as 'Arrays'.
    //  - `*.println(*)` - Methods named as 'println'.
    //  - `(from, to)` - Methods with two parameters named as 'from' and 'to'.
    //  - `(arg*)` - Methods with one parameter whose name starts with 'arg'.
    "java.inlayHints.parameterNames.exclusions": [],
  
    // Include getter, setter and builder/constructor when finding references.
    "java.references.includeAccessors": true,
  
    // Include declarations when finding references.
    "java.references.includeDeclarations": true,
  
    // Include the decompiled sources when finding references.
    "java.references.includeDecompiledSources": true,
  
    // Enable/disable the references code lens.
    "java.referencesCodeLens.enabled": false,
  
    // Specifies the scope which must be used for search operation like 
    //  - Find Reference
    //  - Call Hierarchy
    //  - Workspace Symbols
    //  - all: Search on all classpath entries including reference libraries and projects.
    //  - main: All classpath entries excluding test classpath entries.
    "java.search.scope": "all",
  
    // Include method declarations from source files in symbol search.
    "java.symbols.includeSourceMethodDeclarations": false,
  
    // Enable/disable lazy loading the content in type hierarchy. Lazy loading could save a lot of loading time but every type should be expanded manually to load its content.
    "java.typeHierarchy.lazyLoad": false
  
  },
  {
    // Preferred content provider (a 3rd party decompiler id, usually)
    "java.contentProvider.preferred": null,
  
    // Specifies a list of file patterns for which matching documents should not have their diagnostics reported (eg. '**/Foo.java').
    "java.diagnostic.filter": [],
  
    // Enable/disable download of Maven source artifacts for Eclipse projects.
    "java.eclipse.downloadSources": false,
  
    // Specifies whether to recheck all open Java files for diagnostics when editing a Java file.
    "java.edit.validateAllOpenBuffersOnChanges": false,
  
    // Specifies whether to reload the sources of the open class files when their source jar files are changed.
    //  - ask: Ask to reload the sources of the open class files
    //  - auto: Automatically reload the sources of the open class files
    //  - manual: Manually reload the sources of the open class files
    "java.editor.reloadChangedSources": "ask",
  
    // Enable/disable smart folding range support. If disabled, it will use the default indentation-based folding range provided by VS Code.
    "java.foldingRange.enabled": true,
  
    // Enable/disable Smart Selection support for Java. Disabling this option will not affect the VS Code built-in word-based and bracket-based smart selection.
    "java.selectionRange.enabled": true
  
  },
  {
    // Recipe ID filter patterns. Either exact ids or patterns with '*' as the wild-card
    "boot-java.rewrite.recipe-filters": [
      "org.openrewrite.java.spring.boot2.SpringBoot2JUnit4to5Migration",
      "org.openrewrite.java.spring.boot3.SpringBoot3BestPractices",
      "org.openrewrite.java.testing.junit5.JUnit5BestPractices",
      "org.openrewrite.java.testing.junit5.JUnit4to5Migration",
      "org.openrewrite.java.spring.boot2.UpgradeSpringBoot_2_7",
      "org.openrewrite.java.spring.boot3.UpgradeSpringBoot_3_3",
      "org.springframework.ide.vscode.rewrite.boot3.UpgradeSpringBoot_3_4",
      "org.rewrite.java.security.*",
      "org.springframework.rewrite.test.*",
      "rewrite.test.*"
    ],
  
    // Recipes refactoring entire Maven project via commands
    "boot-java.rewrite.refactorings.on": true,
  
    // JAR and YAML files to scan for recipes
    "boot-java.rewrite.scan-files": []
  
  },
  {
    // Enablement
    "boot-java.validation.java.boot2": "AUTO",
  
    // Invalid Domain ID type for Spring Data Repository
    "spring-boot.ls.problem.boot2.DOMAIN_ID_FOR_REPOSITORY": "ERROR",
  
    // 'HttpSecurity.authroizeRequests(...)' API and related classes are to be deprecated use new `authorizeHttpRequests(...) and related classes
    "spring-boot.ls.problem.boot2.HTTP_SECURITY_AUTHORIZE_HTTP_REQUESTS": "WARNING",
  
    // Unnecessary `@Autowired` over the only constructor
    "spring-boot.ls.problem.boot2.JAVA_AUTOWIRED_CONSTRUCTOR": "WARNING",
  
    // Use constructor parameter injection
    "spring-boot.ls.problem.boot2.JAVA_CONSTRUCTOR_PARAMETER_INJECTION": "IGNORE",
  
    // Consider switching to Lambda DSL syntax
    "spring-boot.ls.problem.boot2.JAVA_LAMBDA_DSL": "INFO",
  
    // Use precise mapping annotation, i.e. '@GetMapping', '@PostMapping', etc.
    "spring-boot.ls.problem.boot2.JAVA_PRECISE_REQUEST_MAPPING": "HINT",
  
    // Public modifier on `@Bean` method. They no longer have to be public visibility to be usable by Spring.
    "spring-boot.ls.problem.boot2.JAVA_PUBLIC_BEAN_METHOD": "HINT",
  
    // Unnecessary `@Repository`
    "spring-boot.ls.problem.boot2.JAVA_REPOSITORY": "WARNING",
  
    // `@SpringBootTest` and all test slice annotations already applies `@SpringExtension` as of Spring Boot 2.1.0.
    "spring-boot.ls.problem.boot2.JAVA_TEST_SPRING_EXTENSION": "WARNING",
  
    // Class likely missing '@Configuration' annotation, i.e. has Bean methods but no '@Configuration' annotation
    "spring-boot.ls.problem.boot2.MISSING_CONFIGURATION_ANNOTATION": "WARNING",
  
    // Web annotation names are unnecessary when it is the same as method parameter name
    "spring-boot.ls.problem.boot2.WEB_ANNOTATION_NAMES": "HINT",
  
    // 'WebSecurityConfigurerAdapter' is removed in Spring-Security 6.x. Refactor classes extending the 'WebSecurityConfigurerAdapter' into 'Configuration' beans and methods into 'Bean' definitions 
    "spring-boot.ls.problem.boot2.WEB_SECURITY_CONFIGURER_ADAPTER": "WARNING"
  
  },
  {
    // Enablement
    "boot-java.validation.java.boot3": "AUTO",
  
    // Spring factories key not supported
    "spring-boot.ls.problem.boot3.FACTORIES_KEY_NOT_SUPPORTED": "ERROR",
  
    // Type no supported as of Spring Boot 3
    "spring-boot.ls.problem.boot3.JAVA_TYPE_NOT_SUPPORTED": "ERROR",
  
    // Modulith restricted type reference
    "spring-boot.ls.problem.boot3.MODULITH_TYPE_REF_VIOLATION": "ERROR"
  
  },
  {
    // Enablement
    "boot-java.validation.java.spring-aot": "OFF",
  
    // Not registered as Bean
    "spring-boot.ls.problem.spring-aot.JAVA_BEAN_NOT_REGISTERED_IN_AOT": "WARNING",
  
    // 'BeanPostProcessor' behaviour is ignored
    "spring-boot.ls.problem.spring-aot.JAVA_BEAN_POST_PROCESSOR_IGNORED_IN_AOT": "WARNING",
  
    // Bean definition should have precise type
    "spring-boot.ls.problem.spring-aot.JAVA_CONCRETE_BEAN_TYPE": "WARNING"
  
  },
  {
    // Property is marked as Deprecated
    "spring-boot.ls.problem.application-properties.PROP_DEPRECATED": "WARNING",
  
    // Multiple assignments to the same property value
    "spring-boot.ls.problem.application-properties.PROP_DUPLICATE_KEY": "ERROR",
  
    // Unexpected character found where a '.' or '[' was expected
    "spring-boot.ls.problem.application-properties.PROP_EXPECTED_DOT_OR_LBRACK": "ERROR",
  
    // Accessing a 'bean property' in a type that doesn't have properties (e.g. like String or Integer)
    "spring-boot.ls.problem.application-properties.PROP_INVALID_BEAN_NAVIGATION": "ERROR",
  
    // Accessing a named property in a type that doesn't provide a property accessor with that name
    "spring-boot.ls.problem.application-properties.PROP_INVALID_BEAN_PROPERTY": "ERROR",
  
    // Accessing a property using [] in a type that doesn't support that
    "spring-boot.ls.problem.application-properties.PROP_INVALID_INDEXED_NAVIGATION": "ERROR",
  
    // Found a '[' but no matching ']'
    "spring-boot.ls.problem.application-properties.PROP_NO_MATCHING_RBRACK": "ERROR",
  
    // Use of [..] navigation with non-integer value
    "spring-boot.ls.problem.application-properties.PROP_NON_INTEGER_IN_BRACKETS": "ERROR",
  
    // Syntax Error
    "spring-boot.ls.problem.application-properties.PROP_SYNTAX_ERROR": "ERROR",
  
    // Property-key not found in any configuration metadata on the project's classpath
    "spring-boot.ls.problem.application-properties.PROP_UNKNOWN_PROPERTY": "WARNING",
  
    // Expecting a value of a certain type, but value doesn't parse as such
    "spring-boot.ls.problem.application-properties.PROP_VALUE_TYPE_MISMATCH": "ERROR"
  
  },
  {
    // Property is marked as Deprecated(Error)
    "spring-boot.ls.problem.application-yaml.YAML_DEPRECATED_ERROR": "ERROR",
  
    // Property is marked as Deprecated(Warning)
    "spring-boot.ls.problem.application-yaml.YAML_DEPRECATED_WARNING": "WARNING",
  
    // A mapping node contains multiple entries for the same key
    "spring-boot.ls.problem.application-yaml.YAML_DUPLICATE_KEY": "ERROR",
  
    // Expecting a 'bean property' name but found something more complex
    "spring-boot.ls.problem.application-yaml.YAML_EXPECT_BEAN_PROPERTY_NAME": "ERROR",
  
    // Expecting a 'mapping' node but found something else
    "spring-boot.ls.problem.application-yaml.YAML_EXPECT_MAPPING": "ERROR",
  
    // Expecting a 'scalar' value but found something more complex.
    "spring-boot.ls.problem.application-yaml.YAML_EXPECT_SCALAR": "ERROR",
  
    // Found a 'mapping' node where a type that can't be treated as a 'property map' is expected
    "spring-boot.ls.problem.application-yaml.YAML_EXPECT_TYPE_FOUND_MAPPING": "ERROR",
  
    // Found a 'sequence' node where a non 'list-like' type is expected
    "spring-boot.ls.problem.application-yaml.YAML_EXPECT_TYPE_FOUND_SEQUENCE": "ERROR",
  
    // Accessing a named property in a type that doesn't provide a property accessor with that name
    "spring-boot.ls.problem.application-yaml.YAML_INVALID_BEAN_PROPERTY": "ERROR",
  
    // This key contains special characters and should probably be escaped by surrounding it with '[]'
    "spring-boot.ls.problem.application-yaml.YAML_SHOULD_ESCAPE": "WARNING",
  
    // Error parsing the input using snakeyaml
    "spring-boot.ls.problem.application-yaml.YAML_SYNTAX_ERROR": "ERROR",
  
    // Property-key not found in the configuration metadata on the project's classpath
    "spring-boot.ls.problem.application-yaml.YAML_UNKNOWN_PROPERTY": "WARNING",
  
    // Expecting a value of a certain type, but value doesn't parse as such
    "spring-boot.ls.problem.application-yaml.YAML_VALUE_TYPE_MISMATCH": "ERROR"
  
  },
  {
    // Enablement
    "boot-java.validation.spel.on": "ON",
  
    // SpEL parser raised a ParseException
    "spring-boot.ls.problem.spel.JAVA_SPEL_EXPRESSION_SYNTAX": "ERROR",
  
    // Property place holder raised a ParseException
    "spring-boot.ls.problem.spel.PROPERTY_PLACE_HOLDER_SYNTAX": "ERROR"
  
  },
  {
    // Enablement
    "boot-java.validation.java.version-validation": "ON",
  
    // Supported Commercial Version
    "spring-boot.ls.problem.version-validation.SUPPORTED_COMMERCIAL_VERSION": "IGNORE",
  
    // Supported OSS Boot Version
    "spring-boot.ls.problem.version-validation.SUPPORTED_OSS_VERSION": "IGNORE",
  
    // Unsupported Commercial Version
    "spring-boot.ls.problem.version-validation.UNSUPPORTED_COMMERCIAL_VERSION": "WARNING",
  
    // Unsupported OSS Version
    "spring-boot.ls.problem.version-validation.UNSUPPORTED_OSS_VERSION": "WARNING",
  
    // Update to Latest Major Version
    "spring-boot.ls.problem.version-validation.UPDATE_LATEST_MAJOR_VERSION": "IGNORE",
  
    // Update to Latest Minor Version
    "spring-boot.ls.problem.version-validation.UPDATE_LATEST_MINOR_VERSION": "INFO",
  
    // Update to Latest Patch Version
    "spring-boot.ls.problem.version-validation.UPDATE_LATEST_PATCH_VERSION": "WARNING"
  
  },
  {
    // Enablement
    "boot-java.validation.data-query": "ON",
  
    // Syntax
    "spring-boot.ls.problem.data-query.HQL_SYNTAX": "ERROR",
  
    // Syntax
    "spring-boot.ls.problem.data-query.JPQL_SYNTAX": "ERROR",
  
    // Syntax
    "spring-boot.ls.problem.data-query.SQL_SYNTAX": "ERROR"
  
  },
  {
    // Enablement
    "boot-java.validation.cron": "ON",
  
    // Field
    "spring-boot.ls.problem.cron.FIELD": "ERROR",
  
    // Syntax
    "spring-boot.ls.problem.cron.SYNTAX": "ERROR"
  
  },
  {
    // Enable/Disable Java VM validation
    "spring-boot.ls.checkJVM": true,
  
    // Max JVM heap value, passed via -Xmx argument when launching spring-boot-language-server JVM process.
    "spring-boot.ls.java.heap": "",
  
    // Override JAVA_HOME used for launching the spring-boot-language-server JVM process.
    "spring-boot.ls.java.home": "",
  
    // Additional 'user defined' VM args to pass to the language server process.
    "spring-boot.ls.java.vmargs": [],
  
    // The path of a file to write language server logs. If not set or null, then logs are discarded.
    "spring-boot.ls.logfile": ""
  
  },
  {
    // Controls whether the Timeline view will load the next page of items when you scroll to the end of the list.
    "timeline.pageOnScroll": true,
  
    // The number of items to show in the Timeline view by default and when loading more items. Setting to `null` will automatically choose a page size based on the visible area of the Timeline view.
    "timeline.pageSize": 50
  
  },
  {
    // Configure settings to be overridden for the c language.
    "[c]":  {
      "editor.wordBasedSuggestions": "off",
      "editor.semanticHighlighting.enabled": true,
      "editor.stickyScroll.defaultModel": "foldingProviderModel",
      "editor.suggest.insertMode": "replace"
    },
  
    // Configure settings to be overridden for the clojure language.
    "[clojure]":  {
      "diffEditor.ignoreTrimWhitespace": false
    },
  
    // Configure settings to be overridden for the coffeescript language.
    "[coffeescript]":  {
      "diffEditor.ignoreTrimWhitespace": false,
      "editor.defaultColorDecorators": false
    },
  
    // Configure settings to be overridden for the cpp language.
    "[cpp]":  {
      "editor.wordBasedSuggestions": "off",
      "editor.semanticHighlighting.enabled": true,
      "editor.stickyScroll.defaultModel": "foldingProviderModel",
      "editor.suggest.insertMode": "replace"
    },
  
    // Configure settings to be overridden for the csharp language.
    "[csharp]":  {
      "editor.maxTokenizationLineLength": 2500
    },
  
    // Configure settings to be overridden for the css language.
    "[css]":  {
      "editor.suggest.insertMode": "replace"
    },
  
    // Configure settings to be overridden for the cuda-cpp language.
    "[cuda-cpp]":  {
      "editor.wordBasedSuggestions": "off",
      "editor.semanticHighlighting.enabled": true,
      "editor.stickyScroll.defaultModel": "foldingProviderModel",
      "editor.suggest.insertMode": "replace"
    },
  
    // Configure settings to be overridden for the django-html language.
    "[django-html]":  {
      "editor.quickSuggestions": {
          "other": true,
          "comments": true,
          "strings": true
      }
    },
  
    // Configure settings to be overridden for the dockercompose language.
    "[dockercompose]":  {
      "editor.insertSpaces": true,
      "editor.tabSize": 2,
      "editor.autoIndent": "advanced",
      "editor.quickSuggestions": {
          "other": true,
          "comments": false,
          "strings": true
      }
    },
  
    // Configure settings to be overridden for the dockerfile language.
    "[dockerfile]":  {
      "editor.quickSuggestions": {
          "strings": true
      }
    },
  
    // Configure settings to be overridden for the dtd language.
    "[dtd]":  {
      "editor.autoClosingBrackets": "never",
      "files.trimFinalNewlines": true
    },
  
    // Configure settings to be overridden for the fsharp language.
    "[fsharp]":  {
      "diffEditor.ignoreTrimWhitespace": false
    },
  
    // Configure settings to be overridden for the git-commit language.
    "[git-commit]":  {
      "editor.rulers": [
          50,
          72
      ],
      "editor.wordWrap": "off",
      "workbench.editor.restoreViewState": false
    },
  
    // Configure settings to be overridden for the git-rebase language.
    "[git-rebase]":  {
      "workbench.editor.restoreViewState": false
    },
  
    // Configure settings to be overridden for the go language.
    "[go]":  {
      "editor.insertSpaces": false
    },
  
    // Configure settings to be overridden for the handlebars language.
    "[handlebars]":  {
      "editor.suggest.insertMode": "replace"
    },
  
    // Configure settings to be overridden for the html language.
    "[html]":  {
      "editor.suggest.insertMode": "replace"
    },
  
    // Configure settings to be overridden for the jade language.
    "[jade]":  {
      "diffEditor.ignoreTrimWhitespace": false
    },
  
    // Configure settings to be overridden for the java language.
    "[java]":  {
      "editor.suggest.snippetsPreventQuickSuggestions": false
    },
  
    // Configure settings to be overridden for the javascript language.
    "[javascript]":  {
      "editor.maxTokenizationLineLength": 2500
    },
  
    // Configure settings to be overridden for the jpa-query-properties language.
    "[jpa-query-properties]":  {
      "editor.quickSuggestions": {
          "strings": true
      }
    },
  
    // Configure settings to be overridden for the json language.
    "[json]":  {
      "editor.quickSuggestions": {
          "strings": true
      },
      "editor.suggest.insertMode": "replace"
    },
  
    // Configure settings to be overridden for the jsonc language.
    "[jsonc]":  {
      "editor.quickSuggestions": {
          "strings": true
      },
      "editor.suggest.insertMode": "replace"
    },
  
    // Configure settings to be overridden for the julia language.
    "[julia]":  {
      "editor.defaultColorDecorators": false
    },
  
    // Configure settings to be overridden for the less language.
    "[less]":  {
      "editor.suggest.insertMode": "replace"
    },
  
    // Configure settings to be overridden for the makefile language.
    "[makefile]":  {
      "editor.insertSpaces": false
    },
  
    // Configure settings to be overridden for the markdown language.
    "[markdown]":  {
      "editor.unicodeHighlight.ambiguousCharacters": false,
      "editor.unicodeHighlight.invisibleCharacters": false,
      "diffEditor.ignoreTrimWhitespace": false,
      "editor.wordWrap": "on",
      "editor.quickSuggestions": {
          "comments": "off",
          "strings": "off",
          "other": "off"
      }
    },
  
    // Configure settings to be overridden for the plaintext language.
    "[plaintext]":  {
      "editor.unicodeHighlight.ambiguousCharacters": false,
      "editor.unicodeHighlight.invisibleCharacters": false
    },
  
    // Configure settings to be overridden for the powershell language.
    "[powershell]":  {
      "debug.saveBeforeStart": "nonUntitledEditorsInActiveGroup",
      "editor.semanticHighlighting.enabled": false,
      "editor.wordSeparators": "`~!@#$%^&*()=+[{]}\\|;:'\",.<>/?"
    },
  
    // Configure settings to be overridden for the python language.
    "[python]":  {
      "diffEditor.ignoreTrimWhitespace": false,
      "editor.defaultColorDecorators": false
    },
  
    // Configure settings to be overridden for the r language.
    "[r]":  {
      "editor.defaultFormatter": "Posit.air-vscode",
      "editor.wordSeparators": "`~!@#$%^&*()-=+[{]}\\|;:'\",<>/"
    },
  
    // Configure settings to be overridden for the ruby language.
    "[ruby]":  {
      "editor.defaultColorDecorators": false
    },
  
    // Configure settings to be overridden for the scss language.
    "[scss]":  {
      "editor.suggest.insertMode": "replace"
    },
  
    // Configure settings to be overridden for the search-result language.
    "[search-result]":  {
      "editor.lineNumbers": "off"
    },
  
    // Configure settings to be overridden for the shellscript language.
    "[shellscript]":  {
      "files.eol": "\n",
      "editor.defaultColorDecorators": false
    },
  
    // Configure settings to be overridden for the snippets language.
    "[snippets]":  {
      "editor.quickSuggestions": {
          "strings": true
      },
      "editor.suggest.insertMode": "replace"
    },
  
    // Configure settings to be overridden for the spring-boot-properties-yaml language.
    "[spring-boot-properties-yaml]":  {
      "editor.quickSuggestions": {
          "strings": true
      }
    },
  
    // Configure settings to be overridden for the spring-boot-properties language.
    "[spring-boot-properties]":  {
      "editor.quickSuggestions": {
          "strings": true
      }
    },
  
    // Configure settings to be overridden for the spring-factories language.
    "[spring-factories]":  {
      "editor.quickSuggestions": {
          "strings": true
      }
    },
  
    // Configure settings to be overridden for the svg language.
    "[svg]":  {
      "editor.autoClosingBrackets": "never",
      "files.trimFinalNewlines": true
    },
  
    // Configure settings to be overridden for the xml language.
    "[xml]":  {
      "editor.autoClosingBrackets": "never",
      "files.trimFinalNewlines": true
    },
  
    // Configure settings to be overridden for the xsl language.
    "[xsl]":  {
      "editor.autoClosingBrackets": "never",
      "files.trimFinalNewlines": true
    },
  
    // Configure settings to be overridden for the yaml language.
    "[yaml]":  {
      "editor.insertSpaces": true,
      "editor.tabSize": 2,
      "editor.autoIndent": "keep",
      "diffEditor.ignoreTrimWhitespace": false,
      "editor.defaultColorDecorators": false,
      "editor.quickSuggestions": {
          "other": true,
          "comments": false,
          "strings": true
      }
    }
  
  },
  {
    // Controls whether the command center shows a menu for actions to control Copilot (requires `window.commandCenter`).
    "chat.commandCenter.enabled": true,
  
    // Enables chat participant autodetection for panel chat.
    "chat.detectParticipant.enabled": true,
  
    // Delay after which changes made by chat are automatically accepted. Values are in seconds, `0` means disabled and `100` seconds is the maximum.
    "chat.editing.autoAcceptDelay": 0,
  
    // Whether to show a confirmation before removing a request and its associated edits.
    "chat.editing.confirmEditRequestRemoval": true,
  
    // Whether to show a confirmation before retrying a request and its associated edits.
    "chat.editing.confirmEditRequestRetry": true,
  
    // Controls the font family in chat codeblocks.
    "chat.editor.fontFamily": "default",
  
    // Controls the font size in pixels in chat codeblocks.
    "chat.editor.fontSize": 14,
  
    // Controls the font weight in chat codeblocks.
    "chat.editor.fontWeight": "default",
  
    // Controls the line height in pixels in chat codeblocks. Use 0 to compute the line height from the font size.
    "chat.editor.lineHeight": 0,
  
    // Controls whether lines should wrap in chat codeblocks.
    "chat.editor.wordWrap": "off",
  
    // This setting is deprecated. Please use `chat.detectParticipant.enabled` instead.
    // Enables chat participant autodetection for panel chat.
    "chat.experimental.detectParticipant.enabled": null,
  
    // Enable support for attaching reusable prompt files (`*.prompt.md`) for Chat, Edits, and Inline Chat sessions. [Learn More](https://aka.ms/vscode-ghcp-prompt-snippets).
    "chat.promptFiles": null
  
  },
  {
    // 
    //  - legacy: Uses the legacy diffing algorithm.
    //  - advanced: Uses the advanced diffing algorithm.
    "mergeEditor.diffAlgorithm": "advanced",
  
    // Controls if deletions in base or one of the inputs should be indicated by a vertical bar.
    "mergeEditor.showDeletionMarkers": true
  
  },
  {
    // Enable experimental multi diff editor.
    "multiDiffEditor.experimental.enabled": true
  
  },
  {
    // When enabled, new running processes are detected and ports that they listen on are automatically forwarded. Disabling this setting will not prevent all ports from being forwarded. Even when disabled, extensions will still be able to cause ports to be forwarded, and opening some URLs will still cause ports to forwarded. Also see `remote.autoForwardPortsSource`.
    "remote.autoForwardPorts": true,
  
    // The number of auto forwarded ports that will trigger the switch from `process` to `hybrid` when automatically forwarding ports and `remote.autoForwardPortsSource` is set to `process` by default. Set to `0` to disable the fallback. When `remote.autoForwardPortsFallback` hasn't been configured, but `remote.autoForwardPortsSource` has, `remote.autoForwardPortsFallback` will be treated as though it's set to `0`.
    "remote.autoForwardPortsFallback": 20,
  
    // Sets the source from which ports are automatically forwarded when `remote.autoForwardPorts#` is true. When `#remote.autoForwardPorts#` is false, `#remote.autoForwardPortsSource` will be used to find information about ports that have already been forwarded. On Windows and macOS remotes, the `process` and `hybrid` options have no effect and `output` will be used.
    //  - process: Ports will be automatically forwarded when discovered by watching for processes that are started and include a port.
    //  - output: Ports will be automatically forwarded when discovered by reading terminal and debug output. Not all processes that use ports will print to the integrated terminal or debug console, so some ports will be missed. Ports forwarded based on output will not be "un-forwarded" until reload or until the port is closed by the user in the Ports view.
    //  - hybrid: Ports will be automatically forwarded when discovered by reading terminal and debug output. Not all processes that use ports will print to the integrated terminal or debug console, so some ports will be missed. Ports will be "un-forwarded" by watching for processes that listen on that port to be terminated.
    "remote.autoForwardPortsSource": "process",
  
    // When enabled extensions are downloaded locally and installed on remote.
    "remote.downloadExtensionsLocally": false,
  
    // Override the kind of an extension. `ui` extensions are installed and run on the local machine while `workspace` extensions are run on the remote. By overriding an extension's default kind using this setting, you specify if that extension should be installed and enabled locally or remotely.
    "remote.extensionKind": {
      "pub.name": [
        "ui"
      ]
    },
  
    // Controls whether local URLs with a port will be forwarded when opened from the terminal and the debug console.
    "remote.forwardOnOpen": true,
  
    // Specifies the local host name that will be used for port forwarding.
    "remote.localPortHost": "localhost",
  
    // Set default properties that are applied to all ports that don't get properties from the setting `remote.portsAttributes`. For example:
    // 
    // ```
    // {
    //   "onAutoForward": "ignore"
    // }
    // ```
    "remote.otherPortsAttributes": {},
  
    // Set properties that are applied when a specific port number is forwarded. For example:
    // 
    // ```
    // "3000": {
    //   "label": "Application"
    // },
    // "40000-55000": {
    //   "onAutoForward": "ignore"
    // },
    // ".+\\/server.js": {
    //  "onAutoForward": "openPreview"
    // }
    // ```
    "remote.portsAttributes": {
      "443": {
        "protocol": "https"
      },
      "8443": {
        "protocol": "https"
      }
    },
  
    // Restores the ports you forwarded in a workspace.
    "remote.restoreForwardedPorts": true
  
  },
  {
    // On keypress, close the Accessible View and focus the element from which it was invoked.
    "accessibility.accessibleView.closeOnKeyPress": true,
  
    // Controls whether variable changes should be announced in the debug watch view.
    "accessibility.debugWatchVariableAnnouncements": true,
  
    // Control whether focus should automatically be sent to the REPL when code is executed.
    "accessibility.replEditor.autoFocusReplExecution": "input",
  
    // Controls whether the output from an execution in the native REPL will be announced.
    "accessibility.replEditor.readLastExecutionOutput": true,
  
    // Whether or not position changes should be debounced
    "accessibility.signalOptions.debouncePositionChanges": false,
  
    // 
    "accessibility.signalOptions.experimental.delays.errorAtPosition": {},
  
    // Delays for all signals besides error and warning at position
    "accessibility.signalOptions.experimental.delays.general": {},
  
    // 
    "accessibility.signalOptions.experimental.delays.warningAtPosition": {},
  
    // The volume of the sounds in percent (0-100).
    "accessibility.signalOptions.volume": 70,
  
    // Plays a signal - sound (audio cue) and/or announcement (alert) - when a chat request is made.
    "accessibility.signals.chatRequestSent": {
      "sound": "auto",
      "announcement": "auto"
    },
  
    // Plays a sound / audio cue when the response has been received.
    "accessibility.signals.chatResponseReceived": {
      "sound": "auto"
    },
  
    // Plays a signal - sound (audio cue) and/or announcement (alert) - when a feature is cleared (for example, the terminal, Debug Console, or Output channel).
    "accessibility.signals.clear": {
      "sound": "auto",
      "announcement": "auto"
    },
  
    // Plays a sound / audio cue when the code action has been applied.
    "accessibility.signals.codeActionApplied": {
      "sound": "auto"
    },
  
    // Plays a sound / audio cue - when a code action has been triggered.
    "accessibility.signals.codeActionTriggered": {
      "sound": "auto"
    },
  
    // Plays a sound / audio cue when the focus moves to an deleted line in Accessible Diff Viewer mode or to the next/previous change.
    "accessibility.signals.diffLineDeleted": {
      "sound": "auto"
    },
  
    // Plays a sound / audio cue when the focus moves to an inserted line in Accessible Diff Viewer mode or to the next/previous change.
    "accessibility.signals.diffLineInserted": {
      "sound": "auto"
    },
  
    // Plays a sound / audio cue when the focus moves to an modified line in Accessible Diff Viewer mode or to the next/previous change.
    "accessibility.signals.diffLineModified": {
      "sound": "auto"
    },
  
    // Plays a signal - sound (audio cue) and/or announcement (alert) - when a file or notebook is formatted.
    "accessibility.signals.format": {
      "sound": "never",
      "announcement": "never"
    },
  
    // Plays a signal - sound (audio cue) and/or announcement (alert) - when the active line has a breakpoint.
    "accessibility.signals.lineHasBreakpoint": {
      "sound": "auto",
      "announcement": "auto"
    },
  
    // Plays a signal - sound (audio cue) and/or announcement (alert) - when the active line has an error.
    "accessibility.signals.lineHasError": {
      "sound": "auto",
      "announcement": "auto"
    },
  
    // Plays a signal - sound (audio cue) and/or announcement (alert) - the active line has a folded area that can be unfolded.
    "accessibility.signals.lineHasFoldedArea": {
      "sound": "auto",
      "announcement": "auto"
    },
  
    // Plays a sound / audio cue when the active line has an inline suggestion.
    "accessibility.signals.lineHasInlineSuggestion": {
      "sound": "auto"
    },
  
    // Plays a signal - sound (audio cue) and/or announcement (alert) - when the active line has a warning.
    "accessibility.signals.lineHasWarning": {
      "sound": "auto",
      "announcement": "auto"
    },
  
    // Plays a signal - sound (audio cue) and/or announcement (alert) - when trying to read a line with inlay hints that has no inlay hints.
    "accessibility.signals.noInlayHints": {
      "sound": "auto",
      "announcement": "auto"
    },
  
    // Plays a signal - sound (audio cue) and/or announcement (alert) - when a notebook cell execution is successfully completed.
    "accessibility.signals.notebookCellCompleted": {
      "sound": "auto",
      "announcement": "auto"
    },
  
    // Plays a signal - sound (audio cue) and/or announcement (alert) - when a notebook cell execution fails.
    "accessibility.signals.notebookCellFailed": {
      "sound": "auto",
      "announcement": "auto"
    },
  
    // Plays a signal - sound (audio cue) and/or announcement (alert) - when the debugger stopped on a breakpoint.
    "accessibility.signals.onDebugBreak": {
      "sound": "auto",
      "announcement": "auto"
    },
  
    // Plays a signal - sound (audio cue) and/or announcement (alert) - when the active line has a warning.
    "accessibility.signals.positionHasError": {
      "sound": "auto",
      "announcement": "auto"
    },
  
    // Plays a signal - sound (audio cue) and/or announcement (alert) - when the active line has a warning.
    "accessibility.signals.positionHasWarning": {
      "sound": "auto",
      "announcement": "auto"
    },
  
    // Plays a signal - sound (audio cue) and/or announcement (alert) - on loop while progress is occurring.
    "accessibility.signals.progress": {
      "sound": "auto",
      "announcement": "auto"
    },
  
    // Plays a signal - sound (audio cue) and/or announcement (alert) - when a file is saved.
    "accessibility.signals.save": {
      "sound": "never",
      "announcement": "never"
    },
  
    // Plays a signal - sound (audio cue) and/or announcement (alert) - when a task is completed.
    "accessibility.signals.taskCompleted": {
      "sound": "auto",
      "announcement": "auto"
    },
  
    // Plays a signal - sound (audio cue) and/or announcement (alert) - when a task fails (non-zero exit code).
    "accessibility.signals.taskFailed": {
      "sound": "auto",
      "announcement": "auto"
    },
  
    // Plays a signal - sound (audio cue) and/or announcement (alert) - when the terminal bell is ringing.
    "accessibility.signals.terminalBell": {
      "sound": "auto",
      "announcement": "auto"
    },
  
    // Plays a signal - sound (audio cue) and/or announcement (alert) - when a terminal command fails (non-zero exit code) or when a command with such an exit code is navigated to in the accessible view.
    "accessibility.signals.terminalCommandFailed": {
      "sound": "auto",
      "announcement": "auto"
    },
  
    // Plays a signal - sound (audio cue) and/or announcement (alert) - when a terminal command succeeds (zero exit code) or when a command with such an exit code is navigated to in the accessible view.
    "accessibility.signals.terminalCommandSucceeded": {
      "sound": "auto",
      "announcement": "auto"
    },
  
    // Plays a signal - sound (audio cue) and/or announcement (alert) - when terminal Quick Fixes are available.
    "accessibility.signals.terminalQuickFix": {
      "sound": "auto",
      "announcement": "auto"
    },
  
    // Plays a sound / audio cue when the voice recording has started.
    "accessibility.signals.voiceRecordingStarted": {
      "sound": "on"
    },
  
    // Plays a sound / audio cue when the voice recording has stopped.
    "accessibility.signals.voiceRecordingStopped": {
      "sound": "auto"
    },
  
    // Controls whether links should be underlined in the workbench.
    "accessibility.underlineLinks": false,
  
    // Provide information about actions that can be taken in the comment widget or in a file which contains comments.
    "accessibility.verbosity.comments": true,
  
    // Provide information about how to access the debug console accessibility help dialog when the debug console or run and debug viewlet is focused. Note that a reload of the window is required for this to take effect.
    "accessibility.verbosity.debug": true,
  
    // Provide information about how to navigate changes in the diff editor when it is focused.
    "accessibility.verbosity.diffEditor": true,
  
    // Indicate when a diff editor becomes the active editor.
    "accessibility.verbosity.diffEditorActive": true,
  
    // Provide information about relevant actions in an empty text editor.
    "accessibility.verbosity.emptyEditorHint": true,
  
    // Provide information about how to open the hover in an Accessible View.
    "accessibility.verbosity.hover": true,
  
    // Provide information about how to access the inline editor chat accessibility help menu and alert with hints that describe how to use the feature when the input is focused.
    "accessibility.verbosity.inlineChat": true,
  
    // Provide information about how to access the inline completions hover and Accessible View.
    "accessibility.verbosity.inlineCompletions": true,
  
    // Provide information about how to change a keybinding in the keybindings editor when a row is focused.
    "accessibility.verbosity.keybindingsEditor": true,
  
    // Provide information about how to focus the cell container or inner editor when a notebook cell is focused.
    "accessibility.verbosity.notebook": true,
  
    // Provide information about how to open the notification in an Accessible View.
    "accessibility.verbosity.notification": true,
  
    // Provide information about how to access the chat help menu when the chat input is focused.
    "accessibility.verbosity.panelChat": true,
  
    // Provide information about how to access the REPL editor accessibility help menu when the REPL editor is focused.
    "accessibility.verbosity.replEditor": true,
  
    // Provide information about how to access the source control accessibility help menu when the input is focused.
    "accessibility.verbosity.sourceControl": true,
  
    // Provide information about how to access the terminal accessibility help menu when the terminal is focused.
    "accessibility.verbosity.terminal": true,
  
    // Provide information about how to open the walkthrough in an Accessible View.
    "accessibility.verbosity.walkthrough": true,
  
    // Whether a textual response should automatically be read out aloud when speech was used as input. For example in a chat session, a response is automatically synthesized when voice was used as chat request.
    //  - on: Enable the feature. When a screen reader is enabled, note that this will disable aria updates.
    //  - off: Disable the feature.
    "accessibility.voice.autoSynthesize": "off",
  
    // Whether to ignore code snippets in text-to-speech synthesis.
    "accessibility.voice.ignoreCodeBlocks": false,
  
    // The language that text-to-speech and speech-to-text should use. Select `auto` to use the configured display language if possible. Note that not all display languages maybe supported by speech recognition and synthesizers.
    //  - auto: Auto (Use Display Language)
    //  - zh-CN: Chinese (Simplified, China)
    //  - zh-HK: Chinese (Traditional, Hong Kong)
    //  - zh-TW: Chinese (Traditional, Taiwan)
    //  - da-DK: Danish (Denmark)
    //  - nl-NL: Dutch (Netherlands)
    //  - en-AU: English (Australia)
    //  - en-CA: English (Canada)
    //  - en-IN: English (India)
    //  - en-IE: English (Ireland)
    //  - en-NZ: English (New Zealand)
    //  - en-GB: English (United Kingdom)
    //  - en-US: English (United States)
    //  - fr-CA: French (Canada)
    //  - fr-FR: French (France)
    //  - de-DE: German (Germany)
    //  - hi-IN: Hindi (India)
    //  - it-IT: Italian (Italy)
    //  - ja-JP: Japanese (Japan)
    //  - ko-KR: Korean (South Korea)
    //  - pt-BR: Portuguese (Brazil)
    //  - pt-PT: Portuguese (Portugal)
    //  - ru-RU: Russian (Russia)
    //  - es-MX: Spanish (Mexico)
    //  - es-ES: Spanish (Spain)
    //  - sv-SE: Swedish (Sweden)
    //  - tr-TR: Turkish (Türkiye)
    "accessibility.voice.speechLanguage": "auto",
  
    // The duration in milliseconds that voice speech recognition remains active after you stop speaking. For example in a chat session, the transcribed text is submitted automatically after the timeout is met. Set to `0` to disable this feature.
    "accessibility.voice.speechTimeout": 1200
  
  },
  {
    // Set the color mode for native UI elements such as native dialogs, menus and title bar. Even if your OS is configured in light color mode, you can select a dark system color theme for the window. You can also configure to automatically adjust based on the `workbench.colorTheme` setting.
    // 
    // Note: This setting is ignored when `window.autoDetectColorScheme` is enabled.
    //  - default: Native widget colors match the system colors.
    //  - auto: Use light native widget colors for light color themes and dark for dark color themes.
    //  - light: Use light native widget colors.
    //  - dark: Use dark native widget colors.
    "window.systemColorTheme": "default"
  
  },
  {
    // The name under which the remote tunnel access is registered. If not set, the host name is used.
    "remote.tunnels.access.hostNameOverride": "",
  
    // Prevent this computer from sleeping when remote tunnel access is turned on.
    "remote.tunnels.access.preventSleep": false
  
  },
  {
    // An array of languages where Emmet abbreviations should not be expanded.
    "emmet.excludeLanguages": [
      "markdown"
    ],
  
    // An array of paths, where each path can contain Emmet syntaxProfiles and/or snippet files.
    // In case of conflicts, the profiles/snippets of later paths will override those of earlier paths.
    // See https://code.visualstudio.com/docs/editor/emmet for more information and an example snippet file.
    "emmet.extensionsPath": [],
  
    // Enable Emmet abbreviations in languages that are not supported by default. Add a mapping here between the language and Emmet supported language.
    //  For example: `{"vue-html": "html", "javascript": "javascriptreact"}`
    "emmet.includeLanguages": {},
  
    // When set to `false`, the whole file is parsed to determine if current position is valid for expanding Emmet abbreviations. When set to `true`, only the content around the current position in CSS/SCSS/Less files is parsed.
    "emmet.optimizeStylesheetParsing": true,
  
    // Preferences used to modify behavior of some actions and resolvers of Emmet.
    "emmet.preferences": {},
  
    // Shows possible Emmet abbreviations as suggestions. Not applicable in stylesheets or when emmet.showExpandedAbbreviation is set to `"never"`.
    "emmet.showAbbreviationSuggestions": true,
  
    // Shows expanded Emmet abbreviations as suggestions.
    // The option `"inMarkupAndStylesheetFilesOnly"` applies to html, haml, jade, slim, xml, xsl, css, scss, sass, less and stylus.
    // The option `"always"` applies to all parts of the file regardless of markup/css.
    "emmet.showExpandedAbbreviation": "always",
  
    // If `true`, then Emmet suggestions will show up as snippets allowing you to order them as per `editor.snippetSuggestions` setting.
    "emmet.showSuggestionsAsSnippets": false,
  
    // Define profile for specified syntax or use your own profile with specific rules.
    "emmet.syntaxProfiles": {},
  
    // When enabled, Emmet abbreviations are expanded when pressing TAB, even when completions do not show up. When disabled, completions that show up can still be accepted by pressing TAB.
    "emmet.triggerExpansionOnTab": false,
  
    // If `true`, Emmet will use inline completions to suggest expansions. To prevent the non-inline completion item provider from showing up as often while this setting is `true`, turn `editor.quickSuggestions` to `inline` or `off` for the `other` item.
    "emmet.useInlineCompletions": false,
  
    // Variables to be used in Emmet snippets.
    "emmet.variables": {}
  
  },
  {
    // Controls whether force push (with or without lease) is enabled.
    "git.allowForcePush": false,
  
    // Controls whether commits without running pre-commit and commit-msg hooks are allowed.
    "git.allowNoVerifyCommit": false,
  
    // Always show the Staged Changes resource group.
    "git.alwaysShowStagedChangesResourceGroup": false,
  
    // Controls the signoff flag for all commits.
    "git.alwaysSignOff": false,
  
    // When set to true, commits will automatically be fetched from the default remote of the current Git repository. Setting to `all` will fetch from all remotes.
    "git.autofetch": false,
  
    // Duration in seconds between each automatic git fetch, when `git.autofetch` is enabled.
    "git.autofetchPeriod": 180,
  
    // Whether auto refreshing is enabled.
    "git.autorefresh": true,
  
    // Configures when repositories should be automatically detected.
    //  - true: Scan for both subfolders of the current opened folder and parent folders of open files.
    //  - false: Disable automatic repository scanning.
    //  - subFolders: Scan for subfolders of the currently opened folder.
    //  - openEditors: Scan for parent folders of open files.
    "git.autoRepositoryDetection": true,
  
    // Stash any changes before pulling and restore them after successful pull.
    "git.autoStash": false,
  
    // Controls whether to show blame information in the editor using editor decorations.
    "git.blame.editorDecoration.enabled": false,
  
    // Template for the blame information editor decoration. Supported variables:
    // 
    // * `hash`: Commit hash
    // 
    // * `hashShort`: First N characters of the commit hash according to `git.commitShortHashLength`
    // 
    // * `subject`: First line of the commit message
    // 
    // * `authorName`: Author name
    // 
    // * `authorEmail`: Author email
    // 
    // * `authorDate`: Author date
    // 
    // * `authorDateAgo`: Time difference between now and the author date
    // 
    // 
    "git.blame.editorDecoration.template": "${subject}, ${authorName} (${authorDateAgo})",
  
    // Controls whether to show blame information in the status bar.
    "git.blame.statusBarItem.enabled": true,
  
    // Template for the blame information status bar item. Supported variables:
    // 
    // * `hash`: Commit hash
    // 
    // * `hashShort`: First N characters of the commit hash according to `git.commitShortHashLength`
    // 
    // * `subject`: First line of the commit message
    // 
    // * `authorName`: Author name
    // 
    // * `authorEmail`: Author email
    // 
    // * `authorDate`: Author date
    // 
    // * `authorDateAgo`: Time difference between now and the author date
    // 
    // 
    "git.blame.statusBarItem.template": "${authorName} (${authorDateAgo})",
  
    // Prefix used when creating a new branch.
    "git.branchPrefix": "",
  
    // List of protected branches. By default, a prompt is shown before changes are committed to a protected branch. The prompt can be controlled using the `git.branchProtectionPrompt`  setting.
    "git.branchProtection": [],
  
    // Controls whether a prompt is being shown before changes are committed to a protected branch.
    //  - alwaysCommit: Always commit changes to the protected branch.
    //  - alwaysCommitToNewBranch: Always commit changes to a new branch.
    //  - alwaysPrompt: Always prompt before changes are committed to a protected branch.
    "git.branchProtectionPrompt": "alwaysPrompt",
  
    // List of dictionaries used for the randomly generated branch name. Each value represents the dictionary used to generate the segment of the branch name. Supported dictionaries: `adjectives`, `animals`, `colors` and `numbers`.
    //  - adjectives: A random adjective
    //  - animals: A random animal name
    //  - colors: A random color name
    //  - numbers: A random number between 100 and 999
    "git.branchRandomName.dictionary": [
      "adjectives",
      "animals"
    ],
  
    // Controls whether a random name is generated when creating a new branch.
    "git.branchRandomName.enable": false,
  
    // Controls the sort order for branches.
    "git.branchSortOrder": "committerdate",
  
    // A regular expression to validate new branch names.
    "git.branchValidationRegex": "",
  
    // The character to replace whitespace in new branch names, and to separate segments of a randomly generated branch name.
    "git.branchWhitespaceChar": "-",
  
    // Controls what type of Git refs are listed when running `Checkout to...`.
    //  - local: Local branches
    //  - tags: Tags
    //  - remote: Remote branches
    "git.checkoutType": [
      "local",
      "remote",
      "tags"
    ],
  
    // Controls whether the diff editor should be automatically closed when changes are stashed, committed, discarded, staged, or unstaged.
    "git.closeDiffOnOperation": false,
  
    // List of git commands (ex: commit, push) that would have their `stdout` logged to the [git output](command:git.showOutput). If the git command has a client-side hook configured, the client-side hook's `stdout` will also be logged to the [git output](command:git.showOutput).
    "git.commandsToLog": [],
  
    // Controls the length of the commit short hash.
    "git.commitShortHashLength": 7,
  
    // Always confirm the creation of empty commits for the 'Git: Commit Empty' command.
    "git.confirmEmptyCommits": true,
  
    // Controls whether to ask for confirmation before force-pushing.
    "git.confirmForcePush": true,
  
    // Controls whether to ask for confirmation before committing without verification.
    "git.confirmNoVerifyCommit": true,
  
    // Confirm before synchronizing Git repositories.
    "git.confirmSync": true,
  
    // Controls the Git count badge.
    //  - all: Count all changes.
    //  - tracked: Count only tracked changes.
    //  - off: Turn off counter.
    "git.countBadge": "all",
  
    // Controls whether Git contributes colors and badges to the Explorer and the Open Editors view.
    "git.decorations.enabled": true,
  
    // The name of the default branch (example: main, trunk, development) when initializing a new Git repository. When set to empty, the default branch name configured in Git will be used. **Note:** Requires Git version `2.28.0` or later.
    "git.defaultBranchName": "main",
  
    // The default location to clone a Git repository.
    "git.defaultCloneDirectory": null,
  
    // Controls whether to automatically detect Git submodules.
    "git.detectSubmodules": true,
  
    // Controls the limit of Git submodules detected.
    "git.detectSubmodulesLimit": 10,
  
    // Enables commit signing with GPG, X.509, or SSH.
    "git.enableCommitSigning": false,
  
    // Whether Git is enabled.
    "git.enabled": true,
  
    // Commit all changes when there are no staged changes.
    "git.enableSmartCommit": false,
  
    // Controls whether the Git Sync command appears in the status bar.
    "git.enableStatusBarSync": true,
  
    // When enabled, fetch all branches when pulling. Otherwise, fetch just the current one.
    "git.fetchOnPull": false,
  
    // Push all annotated tags when running the sync command.
    "git.followTagsWhenSync": false,
  
    // This setting is now deprecated, please use `github.gitAuthentication` instead.
    // 
    "git.githubAuthentication": null,
  
    // List of Git repositories to ignore.
    "git.ignoredRepositories": [],
  
    // Ignores the legacy Git warning.
    "git.ignoreLegacyWarning": false,
  
    // Ignores the warning when there are too many changes in a repository.
    "git.ignoreLimitWarning": false,
  
    // Ignores the warning when Git is missing.
    "git.ignoreMissingGitWarning": false,
  
    // Ignores the warning when it looks like the branch might have been rebased when pulling.
    "git.ignoreRebaseWarning": false,
  
    // Ignore modifications to submodules in the file tree.
    "git.ignoreSubmodules": false,
  
    // Ignores the warning when Git 2.25 - 2.26 is installed on Windows.
    "git.ignoreWindowsGit27Warning": false,
  
    // Controls whether to show commit message input validation diagnostics.
    "git.inputValidation": false,
  
    // Controls the commit message length threshold for showing a warning.
    "git.inputValidationLength": 72,
  
    // Controls the commit message subject length threshold for showing a warning. Unset it to inherit the value of `git.inputValidationLength`.
    "git.inputValidationSubjectLength": 50,
  
    // Open the merge editor for files that are currently under conflict.
    "git.mergeEditor": false,
  
    // Controls whether to open a repository automatically after cloning.
    //  - always: Always open in current window.
    //  - alwaysNewWindow: Always open in a new window.
    //  - whenNoFolderOpen: Only open in current window when no folder is opened.
    //  - prompt: Always prompt for action.
    "git.openAfterClone": "prompt",
  
    // Controls whether the diff editor should be opened when clicking a change. Otherwise the regular editor will be opened.
    "git.openDiffOnClick": true,
  
    // Control whether a repository in parent folders of workspaces or open files should be opened.
    //  - always: Always open a repository in parent folders of workspaces or open files.
    //  - never: Never open a repository in parent folders of workspaces or open files.
    //  - prompt: Prompt before opening a repository the parent folders of workspaces or open files.
    "git.openRepositoryInParentFolders": "prompt",
  
    // Controls whether to optimistically update the state of the Source Control view after running git commands.
    "git.optimisticUpdate": true,
  
    // Path and filename of the git executable, e.g. `C:\Program Files\Git\bin\git.exe` (Windows). This can also be an array of string values containing multiple paths to look up.
    "git.path": null,
  
    // Run a git command after a successful commit.
    //  - none: Don't run any command after a commit.
    //  - push: Run 'git push' after a successful commit.
    //  - sync: Run 'git pull' and 'git push' after a successful commit.
    "git.postCommitCommand": "none",
  
    // Controls whether Git should check for unsaved files before committing.
    //  - always: Check for any unsaved files.
    //  - staged: Check only for unsaved staged files.
    //  - never: Disable this check.
    "git.promptToSaveFilesBeforeCommit": "always",
  
    // Controls whether Git should check for unsaved files before stashing changes.
    //  - always: Check for any unsaved files.
    //  - staged: Check only for unsaved staged files.
    //  - never: Disable this check.
    "git.promptToSaveFilesBeforeStash": "always",
  
    // Prune when fetching.
    "git.pruneOnFetch": false,
  
    // Controls whether a branch that does not have outgoing commits is fast-forwarded before it is checked out.
    "git.pullBeforeCheckout": false,
  
    // Fetch all tags when pulling.
    "git.pullTags": true,
  
    // Force Git to use rebase when running the sync command.
    "git.rebaseWhenSync": false,
  
    // Remember the last git command that ran after a commit.
    "git.rememberPostCommitCommand": false,
  
    // Automatically replace the local tags with the remote tags in case of a conflict when running the pull command.
    "git.replaceTagsWhenPull": false,
  
    // List of folders that are ignored while scanning for Git repositories when `git.autoRepositoryDetection` is set to `true` or `subFolders`.
    "git.repositoryScanIgnoredFolders": [
      "node_modules"
    ],
  
    // Controls the depth used when scanning workspace folders for Git repositories when `git.autoRepositoryDetection` is set to `true` or `subFolders`. Can be set to `-1` for no limit.
    "git.repositoryScanMaxDepth": 1,
  
    // Controls whether to require explicit Git user configuration or allow Git to guess if missing.
    "git.requireGitUserConfig": true,
  
    // List of paths to search for Git repositories in.
    "git.scanRepositories": [],
  
    // Controls whether an action button is shown in the Source Control view.
    "git.showActionButton": {
      "commit": true,
      "publish": true,
      "sync": true
    },
  
    // Controls whether to show the commit input in the Git source control panel.
    "git.showCommitInput": true,
  
    // Controls whether to show an inline Open File action in the Git changes view.
    "git.showInlineOpenFileAction": true,
  
    // Controls whether Git actions should show progress.
    "git.showProgress": true,
  
    // Controls whether to show a notification when a push is successful.
    "git.showPushSuccessNotification": false,
  
    // Controls the threshold of the similarity index (the amount of additions/deletions compared to the file's size) for changes in a pair of added/deleted files to be considered a rename. **Note:** Requires Git version `2.18.0` or later.
    "git.similarityThreshold": 50,
  
    // Control which changes are automatically staged by Smart Commit.
    //  - all: Automatically stage all changes.
    //  - tracked: Automatically stage tracked changes only.
    "git.smartCommitChanges": "all",
  
    // Controls how to limit the number of changes that can be parsed from Git status command. Can be set to 0 for no limit.
    "git.statusLimit": 10000,
  
    // Suggests to enable smart commit (commit all changes when there are no staged changes).
    "git.suggestSmartCommit": true,
  
    // Controls whether a notification comes up when running the Sync action, which allows the user to cancel the operation.
    "git.supportCancellation": false,
  
    // Controls whether to enable Windsurf to be the authentication handler for Git processes spawned in the Integrated Terminal. Note: Terminals need to be restarted to pick up a change in this setting.
    "git.terminalAuthentication": true,
  
    // Controls whether to enable Windsurf to be the Git editor for Git processes spawned in the integrated terminal. Note: Terminals need to be restarted to pick up a change in this setting.
    "git.terminalGitEditor": false,
  
    // Controls which date to use for items in the Timeline view.
    //  - committed: Use the committed date
    //  - authored: Use the authored date
    "git.timeline.date": "committed",
  
    // Controls whether to show the commit author in the Timeline view.
    "git.timeline.showAuthor": true,
  
    // Controls whether to show uncommitted changes in the Timeline view.
    "git.timeline.showUncommitted": false,
  
    // Controls how untracked changes behave.
    //  - mixed: All changes, tracked and untracked, appear together and behave equally.
    //  - separate: Untracked changes appear separately in the Source Control view. They are also excluded from several actions.
    //  - hidden: Untracked changes are hidden and excluded from several actions.
    "git.untrackedChanges": "mixed",
  
    // Controls whether to use the message from the commit input box as the default stash message.
    "git.useCommitInputAsStashMessage": false,
  
    // Controls whether a full text editor will be used to author commit messages, whenever no message is provided in the commit input box.
    "git.useEditorAsCommitInput": true,
  
    // Controls whether force pushing uses the safer force-if-includes variant. Note: This setting requires the `git.useForcePushWithLease` setting to be enabled, and Git version `2.30.0` or later.
    "git.useForcePushIfIncludes": true,
  
    // Controls whether force pushing uses the safer force-with-lease variant.
    "git.useForcePushWithLease": true,
  
    // Controls whether GIT_ASKPASS should be overwritten to use the integrated version.
    "git.useIntegratedAskPass": true,
  
    // Enable verbose output when `git.useEditorAsCommitInput` is enabled.
    "git.verboseCommit": false
  
  },
  {
    // Controls whether to query repository rules for GitHub repositories
    "github.branchProtection": true,
  
    // Controls whether to enable automatic GitHub authentication for git commands within Windsurf.
    "github.gitAuthentication": true,
  
    // Controls which protocol is used to clone a GitHub repository
    "github.gitProtocol": "https",
  
    // Controls whether to show the GitHub avatar of the commit author in various hovers (ex: Git blame, Timeline, Source Control Graph, etc.)
    "github.showAvatar": true
  
  },
  {
    // GitHub Enterprise Server URI
    "github-enterprise.uri": ""
  
  },
  {
    // Controls enablement of Grunt task detection. Grunt task detection can cause files in any open workspace to be executed.
    "grunt.autoDetect": "off"
  
  },
  {
    // Controls enablement of Gulp task detection. Gulp task detection can cause files in any open workspace to be executed.
    "gulp.autoDetect": "off"
  
  },
  {
    // Experimental feature to serialize the Jupyter notebook in a worker thread.
    "ipynb.experimental.serialization": false,
  
    // Enable/disable pasting of images into Markdown cells in ipynb notebook files. Pasted images are inserted as attachments to the cell.
    "ipynb.pasteImagesAsAttachments.enabled": true
  
  },
  {
    // Controls enablement of Jake task detection. Jake task detection can cause files in any open workspace to be executed.
    "jake.autoDetect": "off"
  
  },
  {
    // Enable/disable rendering math in the built-in Markdown preview.
    "markdown.math.enabled": true,
  
    // A collection of custom macros. Each macro is a key-value pair where the key is a new command name and the value is the expansion of the macro.
    "markdown.math.macros": {}
  
  },
  {
    // Start playing videos on mute automatically.
    "mediaPreview.video.autoPlay": false,
  
    // Loop videos over again automatically.
    "mediaPreview.video.loop": false
  
  },
  {
    // Whether to automatically navigate to the next merge conflict after resolving a merge conflict.
    "merge-conflict.autoNavigateNextConflict.enabled": false,
  
    // Create a CodeLens for merge conflict blocks within editor.
    "merge-conflict.codeLens.enabled": true,
  
    // Create decorators for merge conflict blocks within editor.
    "merge-conflict.decorators.enabled": true,
  
    // Controls where the diff view should be opened when comparing changes in merge conflicts.
    //  - Current: Open the diff view in the current editor group.
    //  - Beside: Open the diff view next to the current editor group.
    //  - Below: Open the diff view below the current editor group.
    "merge-conflict.diffViewPosition": "Current"
  
  },
  {
    // The custom configuration for the Sovereign Cloud to use with the Microsoft Sovereign Cloud authentication provider. This along with setting `microsoft-sovereign-cloud.environment` to `custom` is required to use this feature.
    "microsoft-sovereign-cloud.customEnvironment": {},
  
    // The Sovereign Cloud to use for authentication. If you select `custom`, you must also set the `microsoft-sovereign-cloud.customEnvironment` setting.
    //  - ChinaCloud: Azure China
    //  - USGovernment: Azure US Government
    //  - custom: A custom Microsoft Sovereign Cloud
    "microsoft-sovereign-cloud.environment": ""
  
  },
  {
    // The version of the Microsoft Account client ID to use for signing in with a Microsoft account. Only change this if you have been asked to. The default is `v1`.
    //  - v2: Use the v2 Microsoft Account client ID to sign in with a Microsoft account.
    //  - v1: Use the v1 Microsoft Account client ID to sign in with a Microsoft account.
    "microsoft-authentication.clientIdVersion": "v1",
  
    // The authentication implementation to use for signing in with a Microsoft account.
    // 
    // *NOTE: The `classic` implementation is deprecated and will be removed, along with this setting, in a future release. If only the `classic` implementation works for you, please [open an issue](command:workbench.action.openIssueReporter) and explain what you are trying to log in to.*
    //  - msal: Use the Microsoft Authentication Library (MSAL) to sign in with a Microsoft account.
    //  - classic: (deprecated) Use the classic authentication flow to sign in with a Microsoft account.
    "microsoft-authentication.implementation": "msal"
  
  },
  {
    // Configures which processes to automatically attach and debug when `debug.node.autoAttach` is on. A Node process launched with the `--inspect` flag will always be attached to, regardless of this setting.
    //  - always: Auto attach to every Node.js process launched in the terminal.
    //  - smart: Auto attach when running scripts that aren't in a node_modules folder.
    //  - onlyWithFlag: Only auto attach when the `--inspect` is given.
    //  - disabled: Auto attach is disabled and not shown in status bar.
    "debug.javascript.autoAttachFilter": "disabled",
  
    // Configures glob patterns for determining when to attach in "smart" `debug.javascript.autoAttachFilter` mode. `$KNOWN_TOOLS$` is replaced with a list of names of common test and code runners. [Read more on the VS Code docs](https://code.visualstudio.com/docs/nodejs/nodejs-debugging#_auto-attach-smart-patterns).
    "debug.javascript.autoAttachSmartPattern": [
      "${workspaceFolder}/**",
      "!**/node_modules/**",
      "**/$KNOWN_TOOLS$/**"
    ],
  
    // When debugging a remote web app, configures whether to automatically tunnel the remote server to your local machine.
    "debug.javascript.automaticallyTunnelRemoteServer": true,
  
    // Whether to stop when conditional breakpoints throw an error.
    "debug.javascript.breakOnConditionalError": false,
  
    // Where a "Run" and "Debug" code lens should be shown in your npm scripts. It may be on "all", scripts, on "top" of the script section, or "never".
    "debug.javascript.codelens.npmScripts": "top",
  
    // Options used when debugging open links clicked from inside the JavaScript Debug Terminal. Can be set to "off" to disable this behavior, or "always" to enable debugging in all terminals.
    "debug.javascript.debugByLinkOptions": "on",
  
    // The default `runtimeExecutable` used for launch configurations, if unspecified. This can be used to config custom paths to Node.js or browser installations.
    "debug.javascript.defaultRuntimeExecutable": {
      "pwa-node": "node"
    },
  
    // Enables the experimental network view for targets that support it.
    "debug.javascript.enableNetworkView": false,
  
    // Default options used when debugging a process through the `Debug: Attach to Node.js Process` command
    "debug.javascript.pickAndAttachOptions": {},
  
    // Request options to use when loading resources, such as source maps, in the debugger. You may need to configure this if your sourcemaps require authentication or use a self-signed certificate, for instance. Options are used to create a request using the [`got`](https://github.com/sindresorhus/got) library.
    // 
    // A common case to disable certificate verification can be done by passing `{ "https": { "rejectUnauthorized": false } }`.
    "debug.javascript.resourceRequestOptions": {},
  
    // Default launch options for the JavaScript debug terminal and npm scripts.
    "debug.javascript.terminalOptions": {},
  
    // Configures whether sourcemapped file where the original file can't be read will automatically be unmapped. If this is false (default), a prompt is shown.
    "debug.javascript.unmapMissingSources": false
  
  },
  {
    // Controls whether npm scripts should be automatically detected.
    "npm.autoDetect": "on",
  
    // Enable running npm scripts contained in a folder from the Explorer context menu.
    "npm.enableRunFromFolder": false,
  
    // The NPM Script Explorer is now available in 'Views' menu in the Explorer in all folders.
    // Enable an explorer view for npm scripts when there is no top-level 'package.json' file.
    "npm.enableScriptExplorer": false,
  
    // Configure glob patterns for folders that should be excluded from automatic script detection.
    "npm.exclude": "",
  
    // Fetch data from https://registry.npmjs.org and https://registry.bower.io to provide auto-completion and information on hover features on npm dependencies.
    "npm.fetchOnlinePackageInfo": true,
  
    // The package manager used to run scripts.
    //  - auto: Auto-detect which package manager to use for running scripts based on lock files and installed package managers.
    //  - npm: Use npm as the package manager for running scripts.
    //  - yarn: Use yarn as the package manager for running scripts.
    //  - pnpm: Use pnpm as the package manager for running scripts.
    //  - bun: Use bun as the package manager for running scripts.
    "npm.packageManager": "auto",
  
    // Run npm commands with the `--silent` option.
    "npm.runSilent": false,
  
    // The default click action used in the NPM Scripts Explorer: `open` or `run`, the default is `open`.
    "npm.scriptExplorerAction": "open",
  
    // An array of regular expressions that indicate which scripts should be excluded from the NPM Scripts view.
    "npm.scriptExplorerExclude": [],
  
    // Display hover with 'Run' and 'Debug' commands for scripts.
    "npm.scriptHover": true
  
  },
  {
    // Controls whether 'Peek References' or 'Find References' is invoked when selecting CodeLens references.
    //  - peek: Show references in peek editor.
    //  - view: Show references in separate view.
    "references.preferredLocation": "peek"
  
  },
  {
    // Enable/disable the floating indicator that shows when focused in the simple browser.
    "simpleBrowser.focusLockIndicator.enabled": true
  
  },
  {
    // Changes the base URL for marketplace search results. [Available Options](https://github.com/VSCodium/vscodium/blob/master/docs/index.md#extensions-marketplace). You must restart Windsurf to use the new marketplace after changing this value.
    "windsurf.marketplaceExtensionGalleryServiceURL": "https://open-vsx.org/vscode/gallery",
  
    // Changes the base URL on each extension page. [Available Options](https://github.com/VSCodium/vscodium/blob/master/docs/index.md#extensions-marketplace). You must restart Windsurf to use the new marketplace after changing this value.
    "windsurf.marketplaceGalleryItemURL": "https://open-vsx.org/vscode/item",
  
    // Windsurf will attempt to compute embeddings for workspaces up to this many files. This file count ignores .gitignore and binary files. Raising this limit from the default value may lead to performance issues. Values 0 or below will be treated as unlimited.
    "windsurf.searchMaxWorkspaceFileCount": 5000
  
  },
  {
    // Enable SSH agent forwarding when connecting to devcontainers.
    "remote.windsurfDevContainers.enableSSHAgentForwarding": true
  
  },
  {
    // The absolute file path to a custom SSH config file.
    "remote.windsurfSSH.configFile": "",
  
    // Experimental: The name of the server binary, use this **only if** you are using a client without a corresponding server release.
    "remote.windsurfSSH.experimental.serverBinaryName": "",
  
    // Experimental: The URL from where the Windsurf server will be downloaded. The following variables can be substituted: ${os}, ${arch}, ${windsurfVersion}, ${vscodeVersion} ${commit}, ${quality}.
    "remote.windsurfSSH.experimental.serverDownloadUrlTemplate": "https://windsurf-stable.codeiumdata.com/${os}-reh-${arch}/${quality}/${commit}/windsurf-reh-${os}-${arch}-${windsurfVersion}.tar.gz",
  
    // The absolute file path to the SSH executable. If empty, will use the ssh on the PATH.
    "remote.windsurfSSH.path": ""
  
  },
  {
    // The URL from where the Windsurf server will be downloaded. The following variables can be substituted: ${os}, ${arch}, ${windsurfVersion}, ${vscodeVersion} ${commit}, ${quality}.
    "remote.WSL.serverDownloadUrlTemplate": "https://windsurf-stable.codeiumdata.com/${os}-reh-${arch}/${quality}/${commit}/windsurf-reh-${os}-${arch}-${windsurfVersion}.tar.gz"
  
  },
  {
    // Enables page breaking on page breaks
    "docxViewer.docxjs.breakPages": true,
  
    // enables additional logging
    "docxViewer.docxjs.debug": false,
  
    // enables experimental features (tab stops calculation)
    "docxViewer.docxjs.experimental": false,
  
    // Disables fonts rendering
    "docxViewer.docxjs.ignoreFonts": false,
  
    // Disables rendering height of page
    "docxViewer.docxjs.ignoreHeight": false,
  
    // disables page breaking on lastRenderedPageBreak elements
    "docxViewer.docxjs.ignoreLastRenderedPageBreak": true,
  
    // Disables rendering width of page
    "docxViewer.docxjs.ignoreWidth": false,
  
    // Enables rendering of wrapper around document content
    "docxViewer.docxjs.inWrapper": true,
  
    // enables experimental rendering of document changes (inserions/deletions)
    "docxViewer.docxjs.showChanges": false,
  
    // if true, xml declaration will be removed from xml documents before parsing
    "docxViewer.docxjs.trimXmlDeclaration": true,
  
    // if true, images, fonts, etc. will be converted to base 64 URL, otherwise `URL.createObjectURL` is used
    "docxViewer.docxjs.useBase64URL": false,
  
    // includes MathML polyfills for chrome, edge, etc.
    "docxViewer.docxjs.useMathMLPolyfill": false
  
  },
  {
    // Should cache the VSCode, Git and SVN projects found?
    "projectManager.cacheProjectsBetweenSessions": true,
  
    // Should check for invalid paths before listing, showing a message below the project name?
    "projectManager.checkInvalidPathsBeforeListing": true,
  
    // Controls whether the extension should ask for confirmation when opening projects in the active window.
    //  - never: Whenever you call the Open command, it will ask for confirmation
    //  - onlyUsingCommandPalette: Only ask for confirmation if you use the Command Palette
    //  - onlyUsingSideBar: Only ask for confirmation if you use the Side Bar
    //  - always: Works as today. No confirmation is required
    "projectManager.confirmSwitchOnActiveWindow": "never",
  
    // Should filter projects through full path?
    "projectManager.filterOnFullPath": false,
  
    // List the projects grouped by...(Favorites, VSCode, Git, Mercurial and SVN)
    "projectManager.groupList": false,
  
    // Should ignore projects found inside other projects?
    "projectManager.ignoreProjectsWithinProjects": false,
  
    // Indicates if the New Window command open the project in current window, when empty.
    //  - always: Whenever you call the Open in New Window command, it will open in the current window, if empty
    //  - onlyUsingCommandPalette: Only open in the current window if you use the Command Palette
    //  - onlyUsingSideBar: Only open in the current window if you use the Side Bar
    //  - never: Works as today. The Open in New Window command will always open in New Window
    "projectManager.openInCurrentWindowIfEmpty": "always",
  
    // Use `projectManager.openInCurrentWindowIfEmpty` instead
    // Indicates if the New Window command open the project in current window, when empty.
    //  - always: Whenever you call the Open in New Window command, it will open in the current window, if empty
    //  - onlyUsingCommandPalette: Only open in the current window if you use the Command Palette
    //  - onlyUsingSideBar: Only open in the current window if you use the Side Bar
    //  - never: Works as today. The Open in New Window command will always open in New Window
    "projectManager.openInCurrenWindowIfEmpty": "always",
  
    // Should the project be opened using a New Window when you click the Status Bar?
    "projectManager.openInNewWindowWhenClickingInStatusBar": false,
  
    // Indicates an alternative location where the `projects.json` file is stored
    "projectManager.projectsLocation": "",
  
    // Should the current project be hidden in the list of available projects?
    "projectManager.removeCurrentProjectFromList": true,
  
    // Should show the parent folder info when projects with same name are detected?
    "projectManager.showParentFolderInfoOnDuplicates": false,
  
    // Should display the project name in the Status Bar?
    "projectManager.showProjectNameInStatusBar": true,
  
    // List the projects sorted by...(Saved, Name, Path or Recent)
    "projectManager.sortList": "Name",
  
    // Should support symlinks on `baseFolders`?
    "projectManager.supportSymlinksOnBaseFolders": false,
  
    // Indicates the list of tags you can use to organize your projects
    "projectManager.tags": [
      "Personal",
      "Work"
    ]
  
  },
  {
    // Indicates the base folders to search for Git projects
    "projectManager.git.baseFolders": [],
  
    // Indicates folders to be ignored, like "node_modules", "out", "typings", "test"
    "projectManager.git.ignoredFolders": [
      "node_modules",
      "out",
      "typings",
      "test",
      ".haxelib"
    ],
  
    // Indicates the maximum depth of folder recursion to search for projects. Any value below 1 means there is no limit
    "projectManager.git.maxDepthRecursion": 4
  
  },
  {
    // Indicates the base folders to search for Mercurial projects
    "projectManager.hg.baseFolders": [],
  
    // Indicates folders to be ignored, like "node_modules", "out", "typings", "test"
    "projectManager.hg.ignoredFolders": [
      "node_modules",
      "out",
      "typings",
      "test",
      ".haxelib"
    ],
  
    // Indicates the maximum depth of folder recursion to search for projects. Any value below 1 means there is no limit
    "projectManager.hg.maxDepthRecursion": 4
  
  },
  {
    // Indicates the base folders to search for SVN projects
    "projectManager.svn.baseFolders": [],
  
    // Indicates folders to be ignored, like "node_modules", "out", "typings", "test"
    "projectManager.svn.ignoredFolders": [
      "node_modules",
      "out",
      "typings",
      "test"
    ],
  
    // Indicates the maximum depth of folder recursion to search for projects. Any value below 1 means there is no limit
    "projectManager.svn.maxDepthRecursion": 4
  
  },
  {
    // Indicates the base folders to search for VSCode projects
    "projectManager.vscode.baseFolders": [],
  
    // Indicates folders to be ignored, like "node_modules", "out", "typings", "test"
    "projectManager.vscode.ignoredFolders": [
      "node_modules",
      "out",
      "typings",
      "test"
    ],
  
    // Indicates the maximum depth of folder recursion to search for projects. Any value below 1 means there is no limit
    "projectManager.vscode.maxDepthRecursion": 4
  
  },
  {
    // Indicates the base folders to search for any folder projects
    "projectManager.any.baseFolders": [],
  
    // Indicates folders to be ignored, like "node_modules", "out", "typings", "test"
    "projectManager.any.ignoredFolders": [
      "node_modules",
      "out",
      "typings",
      "test"
    ],
  
    // Indicates the maximum depth of folder recursion to search for projects. Any value below 1 means there is no limit
    "projectManager.any.maxDepthRecursion": 4
  
  },
  {
    // injected into AREPL each run. Use 'Developer: Open Webview Developer Tools' command to inspect arepl html
    "AREPL.customCSS": null,
  
    // Any variables with these types are not shown in arepl variable view. You can use the arepl_filter_type variable in arepl to play around with this setting in real-time
    "AREPL.defaultFilterTypes": [
      "<class 'typing._SpecialForm'>",
      "<class 'typing._SpecialGenericAlias'>",
      "<class 'module'>",
      "<class 'function'>",
      "<class 'builtin_function_or_method'>"
    ],
  
    // Any variables with these names are not shown in arepl variable view. You can use the arepl_filter variable in arepl to play around with this setting in real-time
    "AREPL.defaultFilterVars": [],
  
    // Default imports for new AREPL sessions. dump is included by default so you can use it to inspect variables & local scopes
    "AREPL.defaultImports": [
      "from arepl_dump import dump"
    ],
  
    // delay in milliseconds before executing code after typing
    "AREPL.delay": 350,
  
    // Absolute path to a file containing environment variable definitions. If not set the setting from the python extension will be used, or ${workspaceFolder}/.env if the python extension is not installed
    "AREPL.envFile": null,
  
    // whether to show errors / results / prints inline. (Currently just error icons)
    "AREPL.inlineResults": true,
  
    // strings over X characters are truncated with an option to expand
    "AREPL.max_string_length": 70,
  
    // 
    //  - top: print results appear on top
    //  - bottom: print results appear on bottom
    "AREPL.printResultPlacement": "top",
  
    // default -u to see prints in real-time. See https://docs.python.org/3/using/cmdline.html#miscellaneous-options for other options. Changing this setting not reccomended
    "AREPL.pythonOptions": [
      "-u"
    ],
  
    // AREPL uses the path you have defined in the official python extension. If not present then this setting will be used. If this setting is also empty then on windows py will be used, or python3 otherwise
    "AREPL.pythonPath": null,
  
    // Whether to automatically load django models. This setting doesn't actually do anything yet. See https://github.com/Almenon/AREPL-vscode/issues/279
    "AREPL.shell_plus": false,
  
    // 2 shows x=1 and x=[1,2], provides option to expand deeply nested data like x=[[1]]
    "AREPL.show_to_level": 2,
  
    // 
    "AREPL.showFooter": true,
  
    // Whether to show global vars. Potential speed improvement if turned off - you can still inspect vars with dump()
    "AREPL.showGlobalVars": true,
  
    // 
    "AREPL.showIcons": true,
  
    // Whether to show name errors.
    "AREPL.showNameErrors": true,
  
    // Whether to show syntax errors.
    "AREPL.showSyntaxErrors": true,
  
    // 
    "AREPL.skipLandingPage": false,
  
    // Whether to report useful anonymous data back to developer.
    "AREPL.telemetry": true,
  
    // AREPL will not evaulate your code in real-time mode if one of these keywords are detected. Keywords are applied via regex.
    "AREPL.unsafeKeywords": [
      "rmdir\\(",
      "rmtree\\("
    ],
  
    // When to execute your code
    //  - afterDelay: after a delay (change AREPL.delay to control the amount)
    //  - onSave: on save
    //  - onKeybinding: on keyboard shortcut
    "AREPL.whenToExecute": "afterDelay"
  
  },
  {
    // Show Formalist commands in the editor context (right-click) menu.
    "formalist.showContextMenu": true
  
  },
  {
    // Activates the i18n features for snippets (eg.: _(""))
    "django.i18n": true,
  
    // Seldom show notifications about this extension
    "django.showContributeNotification": true,
  
    // Exclude Python snippets by their file name. Can be 'import', 'postgres'...
    "django.snippets.exclude": [
      "cms",
      "wagtail"
    ],
  
    // Activates the Python snippets
    "django.snippets.use": true
  
  },
  {
    // Enable checkboxes in markdown preview.
    "markdown-checkboxes.enable": true,
  
    // Wrap the rendered list items in a `<label>` element.
    "markdown-checkboxes.label": false,
  
    // Adds the label after the checkbox. Only applies when `markdown-checkboxes.label` is set to `true`.
    "markdown-checkboxes.labelAfter": false
  
  },
  {
    // Default Mermaid theme for dark mode.
    "markdown-mermaid.darkModeTheme": "dark",
  
    // Default languages in markdown.
    "markdown-mermaid.languages": [
      "mermaid"
    ],
  
    // Default Mermaid theme for light mode.
    "markdown-mermaid.lightModeTheme": "default"
  
  },
  {
    // Color theme mode for the styling of the Markdown preview.
    //  - auto: Automatically match the editor color theme.
    //  - system: Sync to the system/OS color theme.
    //  - light: Always use the selected Light theme
    //  - dark: Always use the selected Dark theme
    "markdown-preview-github-styles.colorTheme": "auto",
  
    // Theme to use when displaying in Dark mode. Ignored if `markdown-preview-github-styles.colorTheme` is set to `Single theme: Light`.
    "markdown-preview-github-styles.darkTheme": "dark",
  
    // Theme to use when displaying in Light mode. Ignored if `markdown-preview-github-styles.colorTheme` is set to `Single theme: Dark`
    "markdown-preview-github-styles.lightTheme": "light"
  
  },
  {
    // **Deprecated**: Please use `#ruff.lint.args` instead.
    // Additional command-line arguments to pass to `ruff check`, e.g., `"args": ["--config=/path/to/pyproject.toml"]`. Supports a subset of Ruff's command-line arguments, ignoring those that are required to operate the LSP, like `--force-exclude` and `--verbose`.
    // 
    // **This setting is not supported by the native server.**
    "ruff.args": [],
  
    // Whether to display Quick Fix actions to disable rules via `noqa` suppression comments.
    "ruff.codeAction.disableRuleComment": {
      "enable": true
    },
  
    // Whether to display Quick Fix actions to autofix violations.
    "ruff.codeAction.fixViolation": {
      "enable": true
    },
  
    // Configuration overrides for Ruff. See [the documentation](https://docs.astral.sh/ruff/editors/settings/#configuration) for more details.
    // 
    // **This setting is used only by the native server.**
    "ruff.configuration": null,
  
    // The preferred method of resolving configuration in the editor with local configuration from `.toml` files.
    // 
    // **This setting is used only by the native server.**
    //  - editorFirst: The default strategy - configuration set in the editor takes priority over configuration set in `.toml` files.
    //  - filesystemFirst: An alternative strategy - configuration set in `.toml` files takes priority over configuration set in the editor.
    //  - editorOnly: An alternative strategy - configuration set in `.toml` files is ignored entirely.
    "ruff.configurationPreference": "editorFirst",
  
    // Whether to enable the Ruff extension.
    "ruff.enable": true,
  
    // **Deprecated**: Formatter capabilities are now always enabled.
    // Controls whether Ruff registers as capable of code formatting.
    "ruff.enableExperimentalFormatter": false,
  
    // Set paths for the linter and formatter to ignore. See [the documentation](https://docs.astral.sh/ruff/settings/#lint_exclude) for more details.
    // 
    // **This setting is used only by the native server.**
    "ruff.exclude": null,
  
    // Whether to register Ruff as capable of handling `source.fixAll` actions.
    "ruff.fixAll": true,
  
    // **Deprecated**: This setting is only used by [`ruff-lsp`](https://github.com/astral-sh/ruff-lsp) which is deprecated in favor of the native language server. Refer to the [migration guide](https://docs.astral.sh/ruff/editors/migration) for more information.
    // Additional command-line arguments to pass to `ruff format`, e.g., `"args": ["--config=/path/to/pyproject.toml"]`. Supports a subset of Ruff's command-line arguments, ignoring those that are required to operate the LSP, like `--force-exclude` and `--verbose`.
    // 
    // **This setting is not supported by the native server.**
    "ruff.format.args": [],
  
    // Enable [preview mode](https://docs.astral.sh/ruff/settings/#format_preview) for the formatter; enables unstable formatting.
    // 
    // **This setting is used only by the native server.**
    "ruff.format.preview": null,
  
    // **Deprecated**: This setting is only used by [`ruff-lsp`](https://github.com/astral-sh/ruff-lsp) which is deprecated in favor of the native language server. Refer to the [migration guide](https://docs.astral.sh/ruff/editors/migration) for more information.
    // Whether to ignore files that are inferred to be part of the Python standard library.
    "ruff.ignoreStandardLibrary": true,
  
    // Strategy for loading the `ruff` executable. `fromEnvironment` picks up Ruff from the environment, falling back to the bundled version if needed. `useBundled` uses the version bundled with the extension.
    //  - fromEnvironment: Use `ruff` from environment, falling back to the bundled version if `ruff` is not found.
    //  - useBundled: Always use the bundled version of `ruff`.
    "ruff.importStrategy": "fromEnvironment",
  
    // Path to a Python interpreter to use to find the `ruff` executable.
    "ruff.interpreter": [],
  
    // Set the [line length](https://docs.astral.sh/ruff/settings/#line-length) used by the formatter and linter. Must be greater than 0 and less than or equal to 320.
    // 
    // **This setting is used only by the native server.**
    "ruff.lineLength": null,
  
    // **Deprecated**: This setting is only used by [`ruff-lsp`](https://github.com/astral-sh/ruff-lsp) which is deprecated in favor of the native language server. Refer to the [migration guide](https://docs.astral.sh/ruff/editors/migration) for more information.
    // Additional command-line arguments to pass to `ruff check`, e.g., `"args": ["--config=/path/to/pyproject.toml"]`. Supports a subset of Ruff's command-line arguments, ignoring those that are required to operate the LSP, like `--force-exclude` and `--verbose`.
    // 
    // **This setting is not supported by the native server.**
    "ruff.lint.args": [],
  
    // Whether to enable linting. Set to `false` to use Ruff exclusively as a formatter.
    "ruff.lint.enable": true,
  
    // Enable additional rule codes on top of existing configuration, instead of overriding it. Use `ALL` to enable all rules.
    // 
    // **This setting is used only by the native server.**
    "ruff.lint.extendSelect": null,
  
    // Set rule codes to disable. See [the documentation](https://docs.astral.sh/ruff/settings/#lint_ignore) for more details.
    // 
    // **This setting is used only by the native server.**
    "ruff.lint.ignore": null,
  
    // Enable [preview mode](https://docs.astral.sh/ruff/settings/#lint_preview) for the linter; enables unstable rules and fixes.
    // 
    // **This setting is used only by the native server.**
    "ruff.lint.preview": null,
  
    // **Deprecated**: This setting is only used by [`ruff-lsp`](https://github.com/astral-sh/ruff-lsp) which is deprecated in favor of the native language server. Refer to the [migration guide](https://docs.astral.sh/ruff/editors/migration) for more information.
    // Run Ruff on every keystroke (`onType`) or on save (`onSave`).
    // 
    // **This setting is not supported by the native server.**
    //  - onType: Run Ruff on every keystroke.
    //  - onSave: Run Ruff on save.
    "ruff.lint.run": "onType",
  
    // Set rule codes to enable. Use `ALL` to enable all rules. See [the documentation](https://docs.astral.sh/ruff/settings/#lint_select) for more details.
    // 
    // **This setting is used only by the native server.**
    "ruff.lint.select": null,
  
    // Path to the log file for the language server.
    // 
    // **This setting is used only by the native server.**
    "ruff.logFile": null,
  
    // Controls the log level of the language server.
    // 
    // **This setting is used only by the native server.**
    "ruff.logLevel": null,
  
    // Whether to use the native language server, [`ruff-lsp`](https://github.com/astral-sh/ruff-lsp) or automatically decide between the two based on the Ruff version and extension settings.
    //  - on: Use the native language server. A warning will be displayed if deprecated settings are detected.
    //  - off: Use [`ruff-lsp`](https://github.com/astral-sh/ruff-lsp). A warning will be displayed if settings specific to the native server are detected.
    //  - auto: Automatically select between the native language server and [`ruff-lsp`](https://github.com/astral-sh/ruff-lsp) based on the following conditions:
    // 1. If the Ruff version is >= `0.5.3`, use the native language server unless any deprecated settings are detected. In that case, show a warning and use [`ruff-lsp`](https://github.com/astral-sh/ruff-lsp) instead.
    // 2. If the Ruff version is < `0.5.3`, use [`ruff-lsp`](https://github.com/astral-sh/ruff-lsp). A warning will be displayed if settings specific to the native server are detected.
    //  - true: Same as `on`.
    //  - false: Same as `off`.
    "ruff.nativeServer": "auto",
  
    // Whether to register Ruff as capable of handling `source.organizeImports` actions.
    "ruff.organizeImports": true,
  
    // Path to a custom `ruff` executable, e.g., `["/path/to/ruff"]`.
    "ruff.path": [],
  
    // **Deprecated**: Please use `#ruff.lint.run` instead.
    // Run Ruff on every keystroke (`onType`) or on save (`onSave`).
    // 
    // **This setting is not supported by the native server.**
    //  - onType: Run Ruff on every keystroke.
    //  - onSave: Run Ruff on save.
    "ruff.run": "onType",
  
    // **Deprecated**: This setting is only used by [`ruff-lsp`](https://github.com/astral-sh/ruff-lsp) which is deprecated in favor of the native language server. Refer to the [migration guide](https://docs.astral.sh/ruff/editors/migration) for more information.
    // Controls when notifications are shown by this extension.
    //  - off: All notifications are turned off, any errors or warning are still available in the logs.
    //  - onError: Notifications are shown only in the case of an error.
    //  - onWarning: Notifications are shown for errors and warnings.
    //  - always: Notifications are show for anything that the server chooses to show.
    "ruff.showNotifications": "off",
  
    // Whether to show syntax error diagnostics.
    "ruff.showSyntaxErrors": true,
  
    // Traces the communication between VSCode and the ruff-lsp.
    "ruff.trace.server": "off"
  
  },
  {
    // pandoc .asciidoc output option template that you would like to use
    "pandoc.asciidocOptString": "",
  
    // pandoc .xml output option template that you would like to use
    "pandoc.docbookOptString": "",
  
    // specify if the extension will run pandoc from a docker container
    "pandoc.docker.enabled": false,
  
    // specify the docker image to use if "docker.enabled" is true
    "pandoc.docker.image": "pandoc/latex:latest",
  
    // specify the docker options to use if "docker.enabled" is true
    "pandoc.docker.options": "",
  
    // pandoc .docx output option template that you would like to use
    "pandoc.docxOptString": "",
  
    // pandoc .epub output option template that you would like to use
    "pandoc.epubOptString": "",
  
    // pandoc executable location
    "pandoc.executable": "pandoc",
  
    // pandoc .html output option template that you would like to use
    "pandoc.htmlOptString": "",
  
    // pandoc .pdf output option template that you would like to use
    "pandoc.pdfOptString": "",
  
    // specify if the extension will open the rendered document in it's default viewer
    "pandoc.render.openViewer": true,
  
    // pandoc .rst output option template that you would like to use
    "pandoc.rstOptString": "",
  
    // **Deprecated**: Please use `pandoc.docker.enabled` instead.
    // specify if the extension will run pandoc from a docker container
    "pandoc.useDocker": false
  
  },
  {
    // If defined, unmapped absolute path imports are based on this location.  Takes priority over 'absolutePathToWorkspace' if both are defined
    "path-intellisense.absolutePathTo": "",
  
    // Sets an absolute path to the current workspace
    "path-intellisense.absolutePathToWorkspace": true,
  
    // Automatically adds slash after directory
    "path-intellisense.autoSlashAfterDirectory": false,
  
    // Automatically triggers next suggestion after previous suggestion
    "path-intellisense.autoTriggerNextSuggestion": false,
  
    // Adds the file extension to a import statements
    "path-intellisense.extensionOnImport": false,
  
    // Ignores tsconfig file for mappings
    "path-intellisense.ignoreTsConfigBaseUrl": false,
  
    // Mappings for paths.  The values should be interpreted as absolute paths (and can use '${workspaceFolder}')
    "path-intellisense.mappings": {},
  
    // Show hidden files
    "path-intellisense.showHiddenFiles": false,
  
    // Shows suggestions when the import starts with a forward slash ('/')
    "path-intellisense.showOnAbsoluteSlash": true
  
  },
  {
    // Whether to rely on imports from the `typing_extensions` module when targeting older versions of python that do not include certain typing features such as the `@override` decorator.
    "basedpyright.analysis.useTypingExtensions": false,
  
    // Path to Python, you can use a custom version of Python.
    "python.pythonPath": "python",
  
    // Path to folder with a list of Virtual Environments.
    "python.venvPath": "",
  
    // Offer auto-import completions.
    "windsurfPyright.analysis.autoImportCompletions": true,
  
    // Automatically add common search paths like 'src'?
    "windsurfPyright.analysis.autoSearchPaths": true,
  
    // 
    //  - openFilesOnly: Analyzes and reports errors on only open files.
    //  - workspace: Analyzes and reports errors on all files in the workspace.
    "windsurfPyright.analysis.diagnosticMode": "openFilesOnly",
  
    // Allows a user to override the severity levels for individual diagnostics. Use the rule name as a key and one of "error", "warning", "information", "none", `true` (alias for "error") or `false` (alias for "none") as value. The default value shown for each diagnostic is the default when "windsurfPyright.analysis.typeCheckingMode" is set to "standard". See [here](https://github.com/detachhead/basedpyright/blob/main/docs/configuration.md#diagnostic-rule-defaults) for defaults for each type checking mode ("off", "basic", "standard", "strict", and "all").
    "windsurfPyright.analysis.diagnosticSeverityOverrides": {},
  
    // Paths of directories or files that should not be included. These override the include directories, allowing specific subdirectories to be excluded. Note that files in the exclude paths may still be included in the analysis if they are referenced (imported) by source files that are not excluded. Paths may contain wildcard characters ** (a directory or multiple levels of directories), * (a sequence of zero or more characters), or ? (a single character). If no exclude paths are specified, pyright automatically excludes the following: `**/node_modules`, `**/__pycache__`, `.git` and any virtual environment directories.
    "windsurfPyright.analysis.exclude": [],
  
    // Additional import search resolution paths
    "windsurfPyright.analysis.extraPaths": [],
  
    // Paths of directories or files whose diagnostic output (errors and warnings) should be suppressed even if they are an included file or within the transitive closure of an included file. Paths may contain wildcard characters ** (a directory or multiple levels of directories), * (a sequence of zero or more characters), or ? (a single character). If no value is provided, the value of python.linting.ignorePatterns (if set) will be used.
    "windsurfPyright.analysis.ignore": [],
  
    // Paths of directories or files that should be included. If no paths are specified, pyright defaults to the workspace root directory. Paths may contain wildcard characters ** (a directory or multiple levels of directories), * (a sequence of zero or more characters), or ? (a single character).
    "windsurfPyright.analysis.include": [],
  
    // Whether to show inlay hints on function arguments.
    "windsurfPyright.analysis.inlayHints.callArgumentNames": false,
  
    // Whether to show inlay hints on function return types.
    "windsurfPyright.analysis.inlayHints.functionReturnTypes": false,
  
    // Whether to show inlay hints on inferred generic types.
    "windsurfPyright.analysis.inlayHints.genericTypes": false,
  
    // Whether to show inlay hints on assignments to variables.
    "windsurfPyright.analysis.inlayHints.variableTypes": false,
  
    // Specifies the level of logging for the Output panel
    "windsurfPyright.analysis.logLevel": "Information",
  
    // Path to directory containing custom type stub files.
    "windsurfPyright.analysis.stubPath": "typings",
  
    // Defines the default rule set for type checking.
    "windsurfPyright.analysis.typeCheckingMode": "off",
  
    // Paths to look for typeshed modules.
    "windsurfPyright.analysis.typeshedPaths": [],
  
    // Use library implementations to extract type information when type stub is not present.
    "windsurfPyright.analysis.useLibraryCodeForTypes": true,
  
    // Disables type completion, definitions, and references.
    "windsurfPyright.disableLanguageServices": false,
  
    // Disables the “Organize Imports” command.
    "windsurfPyright.disableOrganizeImports": false,
  
    // Disable hint diagnostics with special hints for grayed-out or strike-through text.
    "windsurfPyright.disableTaggedHints": false,
  
    // Whether to use the version of pyright installed in the project (recommended) or the one bundled with the extension (not recommended).
    "windsurfPyright.importStrategy": "fromEnvironment"
  
  },
  {
    // Number of seconds the list of `.gitignore` files retrieved from github will be cached
    "gitignore.cacheExpirationInterval": 3600
  
  },
  {
    // markdownlint configuration object
    "markdownlint.config": {},
  
    // Path to a configuration file that defines the base configuration
    "markdownlint.configFile": null,
  
    // Array of paths for custom rules to include when linting
    "markdownlint.customRules": [],
  
    // Makes it easier to focus while typing by hiding issues on or near the current line
    "markdownlint.focusMode": false,
  
    // Array of glob expressions to include or ignore when linting the workspace
    "markdownlint.lintWorkspaceGlobs": [
      "**/*.{md,mkd,mdwn,mdown,markdown,markdn,mdtxt,mdtext,workbook}",
      "!**/*.code-search",
      "!**/bower_components",
      "!**/node_modules",
      "!**/.git",
      "!**/vendor"
    ],
  
    // Run the linter on save (onSave) or on type (onType)
    "markdownlint.run": "onType"
  
  },
  {
    // Always prompt with repository picker when running Git History
    "gitHistory.alwaysPromptRepositoryPicker": false,
  
    // Avatar image cache expiration (0 = cache disabled)
    "gitHistory.avatarCacheExpiration": 60,
  
    // Prefer to open repository (instead of file) when pressing the editor title button
    "gitHistory.editorTitleButtonOpenRepo": false,
  
    // Whether to display the commit explorer view
    "gitHistory.hideCommitViewExplorer": false,
  
    // Include remote branches when opening Git History
    "gitHistory.includeRemoteBranches": false,
  
    // Output log information
    "gitHistory.logLevel": "Info",
  
    // Default number of items to be displayed in Git History Viewer
    "gitHistory.pageSize": 100,
  
    // Whether to display a button in the editor title menu bar
    "gitHistory.showEditorTitleMenuBarIcons": true,
  
    // Split show file history when file is active.
    "gitHistory.showFileHistorySplit": true,
  
    // Show commit details in side-by-side view
    "gitHistory.sideBySide": false,
  
    // Specifies where the 'Git: View History' action appears on the title of SCM Providers.
    //  - Inline: Show the 'Git: View History' action on the title of SCM Providers
    //  - More Actions: Show the 'Git: View History' action in the 'More Actions...' menu on the title of SCM Providers
    "gitHistory.sourceCodeProviderIntegrationLocation": "Inline"
  
  },
  {
    // Enables the XML Document view in the explorer for XML documents.
    "xmlTools.enableXmlTreeView": true,
  
    // Enables auto-reveal of elements in the XML Document view when a start tag is clicked in the editor.
    "xmlTools.enableXmlTreeViewCursorSync": false,
  
    // Enables attribute and child element counts in the XML Document view.
    "xmlTools.enableXmlTreeViewMetadata": true,
  
    // Enforces a space before the forward slash at the end of a self-closing XML tag.
    "xmlTools.enforcePrettySelfClosingTagOnFormat": false,
  
    // Ignore default xmlns attributes when evaluating XPath.
    "xmlTools.ignoreDefaultNamespace": true,
  
    // Remember the last XPath query used.
    "xmlTools.persistXPathQuery": true,
  
    // Remove XML comments during minification.
    "xmlTools.removeCommentsOnMinify": false,
  
    // Put each attribute on a new line when formatting XML. Overrides `xmlTools.splitXmlnsOnFormat` if set to `true`.
    "xmlTools.splitAttributesOnFormat": false,
  
    // Put each xmlns attribute on a new line when formatting XML.
    "xmlTools.splitXmlnsOnFormat": true,
  
    // Supported XML Formatters: classic
    "xmlTools.xmlFormatterImplementation": "v2",
  
    // Arguments to be passed to the XQuery execution engine.
    "xmlTools.xqueryExecutionArguments": [
      "-xquery",
      "$(script)",
      "-in",
      "$(input)",
      "-out",
      "$(input).output.xml"
    ],
  
    // The full path to the executable to run when executing XQuery scripts.
    "xmlTools.xqueryExecutionEngine": "",
  
    // The maximum number of input files to enumerate when executing XQuery scripts.
    "xmlTools.xqueryExecutionInputLimit": 100,
  
    // The pattern used to search for input XML files when executing XQuery scripts.
    "xmlTools.xqueryExecutionInputSearchPattern": "**/*.xml"
  
  },
  {
    // Include parentheses around a sole arrow function parameter.
    "prettier.arrowParens": "always",
  
    // Puts the `>` of a multi-line HTML (HTML, JSX, Vue, Angular) element at the end of the last line instead of being alone on the next line (does not apply to self closing elements).
    "prettier.bracketSameLine": false,
  
    // Controls the printing of spaces inside object literals.
    "prettier.bracketSpacing": true,
  
    // Path to the prettier configuration file.
    "prettier.configPath": "",
  
    // This feature is no longer supported. Instead, configure VS Code [default formatters](https://github.com/prettier/prettier-vscode#default-formatter) or use .prettierignore.
    // A list of languages IDs to disable this extension on.
    "prettier.disableLanguages": [],
  
    // A list of [glob patterns](https://code.visualstudio.com/api/references/vscode-api#GlobPattern) to register Prettier formatter.
    "prettier.documentSelectors": [],
  
    // Control whether Prettier formats quoted code embedded in the file.
    "prettier.embeddedLanguageFormatting": "auto",
  
    // Controls whether Prettier is enabled or not. Reload required.
    "prettier.enable": true,
  
    // Enable debug logs for troubleshooting.
    "prettier.enableDebugLogs": false,
  
    // Specify the end of line used by prettier.
    "prettier.endOfLine": "lf",
  
    // Try prettier's [new ternary formatting](https://github.com/prettier/prettier/pull/13183) before it becomes the default behavior.
    "prettier.experimentalTernaries": false,
  
    // Specify the global [whitespace sensitivity](https://prettier.io/blog/2018/11/07/1.15.0.html#whitespace-sensitive-formatting) for HTML files.
    // Valid options:
    // - `css` - Respect the default value of CSS `display` property.
    // - `strict` - Whitespaces are considered sensitive.
    // - `ignore` - Whitespaces are considered insensitive.
    "prettier.htmlWhitespaceSensitivity": "css",
  
    // Path to a `.prettierignore` file.
    "prettier.ignorePath": ".prettierignore",
  
    // Prettier can insert a special `@format` marker at the top of files specifying that the file has been formatted with prettier. This works well when used in tandem with the `--require-pragma` option. If there is already a docblock at the top of the file then this option will add a newline to it with the `@format` marker.
    "prettier.insertPragma": false,
  
    // This option has been deprecated in v2.4.0, use `bracketSameLine` instead.
    // Puts the `>` of a multi-line jsx element at the end of the last line instead of being alone on the next line (does not apply to self closing elements).
    "prettier.jsxBracketSameLine": false,
  
    // Use single quotes instead of double quotes in JSX.
    "prettier.jsxSingleQuote": false,
  
    // Package manager is now automatically detected by VS Code. This setting is no longer used.
    // The package manager you use to install node modules.
    "prettier.packageManager": "npm",
  
    // Path to the `prettier` module, eg: `./node_modules/prettier`.
    "prettier.prettierPath": "",
  
    // Fit code within this line limit.
    "prettier.printWidth": 80,
  
    // (Markdown) wrap prose over multiple lines.
    "prettier.proseWrap": "preserve",
  
    // Change when properties in objects are quoted.
    // Valid options:
    // - `"as-needed"` - Only add quotes around object properties where required.
    // - `"consistent"` - If at least one property in an object requires quotes, quote all properties.
    // - `"preserve"` - Respect the input use of quotes in object properties.
    "prettier.quoteProps": "as-needed",
  
    // Require a prettier configuration file to format. See [documentation for valid configuration files](https://prettier.io/docs/en/configuration.html).
    // 
    // > _Note, untitled files will still be formatted using the VS Code prettier settings even when this setting is set._
    "prettier.requireConfig": false,
  
    // Prettier can restrict itself to only format files that contain a special comment, called a pragma, at the top of the file. This is very useful when gradually transitioning large, unformatted codebases to prettier.
    "prettier.requirePragma": false,
  
    // When enabled, this extension will attempt to use global npm or yarn modules if local modules cannot be resolved.
    // > _This setting can have a negative performance impact, particularly on Windows when you have attached network drives. Only enable this if you must use global modules._
    "prettier.resolveGlobalModules": false,
  
    // Whether to add a semicolon at the end of every line.
    "prettier.semi": true,
  
    // Enforces single attribute per line in HTML, JSX, Vue and Angular.
    "prettier.singleAttributePerLine": false,
  
    // Use single instead of double quotes.
    "prettier.singleQuote": false,
  
    // Number of spaces it should use per tab.
    "prettier.tabWidth": 2,
  
    // Controls the printing of trailing commas wherever possible. 
    // Valid options:
    // - `none` - No trailing commas
    // - `es5` - Trailing commas where valid in ES5 (objects, arrays, etc)
    // - `all` - Trailing commas wherever possible (function arguments)
    "prettier.trailingComma": "es5",
  
    // Whether or not to take `.editorconfig` into account when parsing configuration. See the [`prettier.resolveConfig`](https://prettier.io/docs/en/api.html) docs for details.
    "prettier.useEditorConfig": true,
  
    // Indent lines with tabs.
    "prettier.useTabs": false,
  
    // Whether or not to indent the code inside `<script>` and `<style>` tags in Vue SFC files.
    "prettier.vueIndentScriptAndStyle": false,
  
    // This extension will process files in `node_modules`.
    "prettier.withNodeModules": false
  
  },
  {
    // Cache linting results. May end up with stale results while executing commands.
    "linter.cache": false,
  
    // Run command with debug options
    "linter.debug": false,
  
    // The delay in milliseconds before running linters on text change
    "linter.delay": 300,
  
    // Enable or disable code linting globally
    "linter.enabled": true,
  
    // The list of linters
    "linter.linters": {
      "brakeman": {
        "capabilities": [],
        "command": [
          [
            "$isBundler",
            "bundle",
            "exec"
          ],
          "brakeman",
          "--format",
          "json",
          "--no-progress",
          "--quiet",
          "--absolute-paths",
          [
            "$config",
            "--config-file",
            "$config"
          ],
          "$rootDir"
        ],
        "configFiles": [
          "brakeman.yml",
          "config/brakeman.yml",
          ".brakeman/config.yml"
        ],
        "enabled": true,
        "languages": [
          "ruby",
          "ruby-puma",
          "ruby-bundler",
          "ruby-test",
          "erb"
        ],
        "name": "brakeman",
        "url": "https://brakemanscanner.org/",
        "when": [
          "$isRails"
        ]
      },
      "cargo-clippy": {
        "capabilities": [
          "fix-inline",
          "ignore-file"
        ],
        "command": [
          "cargo-clippy",
          "$file",
          "--no-deps",
          "--message-format",
          "json",
          [
            "$config",
            "--config",
            "$config"
          ]
        ],
        "configFiles": [
          "clippy.toml",
          ".clippy.toml"
        ],
        "enabled": true,
        "languages": [
          "rust"
        ],
        "name": "cargo-clippy",
        "url": "https://doc.rust-lang.org/clippy/"
      },
      "credo": {
        "capabilities": [
          "ignore-line",
          "ignore-file"
        ],
        "command": [
          "mix",
          "credo",
          "--format",
          "json",
          "--read-from-stdin",
          "--all-priorities",
          "$file"
        ],
        "configFiles": [],
        "enabled": true,
        "languages": [
          "elixir"
        ],
        "name": "credo",
        "url": "https://hexdocs.pm/credo/"
      },
      "dart": {
        "capabilities": [],
        "command": [
          "dart",
          "analyze",
          "$file"
        ],
        "configFiles": [],
        "enabled": true,
        "languages": [
          "dart"
        ],
        "name": "dart",
        "url": "https://dart.dev/tools/linter-rules"
      },
      "erb_lint": {
        "capabilities": [],
        "command": [
          [
            "$isBundler",
            "bundle",
            "exec"
          ],
          "erblint",
          [
            "$config",
            "--config",
            "$config"
          ],
          "--format",
          "json",
          "$file"
        ],
        "configFiles": [
          ".erb-lint.yml"
        ],
        "enabled": true,
        "languages": [
          "erb"
        ],
        "name": "erb_lint",
        "url": "https://github.com/Shopify/erb-lint"
      },
      "eslint": {
        "capabilities": [
          "ignore-line",
          "ignore-file",
          "fix-one",
          "fix-all",
          "fix-inline"
        ],
        "command": [
          "eslint",
          "--format",
          "json",
          [
            "$config",
            "--config",
            "$config"
          ],
          [
            "$debug",
            "--loglevel",
            "debug",
            "--debug"
          ],
          [
            "$fixAll",
            "--fix-dry-run"
          ],
          [
            "$fixOne",
            "--fix-dry-run"
          ],
          "--stdin-filename",
          "$file",
          "--stdin"
        ],
        "configFiles": [
          ".eslintrc.js",
          ".eslintrc.cjs",
          ".eslintrc.yaml",
          ".eslintrc.yml",
          ".eslintrc.json",
          ".eslintrc"
        ],
        "enabled": true,
        "languages": [
          "javascript",
          "jsx",
          "typescript",
          "typescriptreact"
        ],
        "name": "eslint",
        "url": "https://eslint.org"
      },
      "gherkin-lint": {
        "capabilities": [],
        "command": [
          "gherkin-lint",
          [
            "$config",
            "--config",
            "$config"
          ],
          "--format",
          "json",
          "$file"
        ],
        "configFiles": [
          ".gherkin-lintrc"
        ],
        "enabled": true,
        "languages": [
          "cucumber"
        ],
        "name": "gherkin-lint",
        "url": "https://github.com/vsiakka/gherkin-lint"
      },
      "hadolint": {
        "capabilities": [
          "ignore-line"
        ],
        "command": [
          "hadolint",
          "--format",
          "json",
          [
            "$config",
            "--config",
            "$config"
          ],
          "-"
        ],
        "configFiles": [
          ".hadolint.yml",
          ".hadolint.yaml"
        ],
        "enabled": true,
        "languages": [
          "dockerfile"
        ],
        "name": "hadolint",
        "url": "https://github.com/hadolint/hadolint"
      },
      "language-tool": {
        "capabilities": [],
        "command": [
          "languagetool",
          "--json",
          "--autoDetect"
        ],
        "configFiles": [],
        "enabled": true,
        "languages": [
          "markdown",
          "html",
          "plaintext"
        ],
        "name": "language-tool",
        "url": "https://github.com/languagetool-org/languagetool"
      },
      "luacheck": {
        "capabilities": [],
        "command": [
          "luacheck",
          "--formatter",
          "plain",
          "--codes",
          "--ranges",
          [
            "$config",
            "--config",
            "$config"
          ],
          "-"
        ],
        "configFiles": [
          ".luacheckrc"
        ],
        "enabled": true,
        "languages": [
          "lua"
        ],
        "name": "luacheck",
        "url": "https://luacheck.readthedocs.io/en/stable/"
      },
      "markdownlint": {
        "capabilities": [
          "fix-inline"
        ],
        "command": [
          "markdownlint",
          "--json",
          [
            "$fixAll",
            "--fix"
          ],
          [
            "$config",
            "--config",
            "$config"
          ],
          "--stdin"
        ],
        "configFiles": [
          ".markdownlint.json",
          ".markdownlint.yaml",
          ".markdownlint.yml",
          ".markdownlintrc"
        ],
        "enabled": true,
        "languages": [
          "markdown"
        ],
        "name": "markdownlint",
        "url": "https://github.com/DavidAnson/markdownlint"
      },
      "php-code-sniffer": {
        "capabilities": [],
        "command": [
          "phpcs",
          "--report",
          "json",
          [
            "$config",
            "--standard",
            "$config"
          ],
          [
            "!$config",
            "--standard",
            "PSR12"
          ],
          "--stdin-path",
          "$file",
          "-q",
          "-"
        ],
        "configFiles": [
          ".phpcs.xml",
          "phpcs.xml",
          ".phpcs.xml.dist",
          "phpcs.xml.dist"
        ],
        "enabled": true,
        "languages": [
          "php"
        ],
        "name": "php-code-sniffer",
        "url": "https://github.com/squizlabs/PHP_CodeSniffer"
      },
      "proselint": {
        "capabilities": [
          "fix-inline"
        ],
        "command": [
          "proselint",
          "--json",
          [
            "$config",
            "--config",
            "$config"
          ],
          "-"
        ],
        "configFiles": [
          ".proselintrc"
        ],
        "enabled": true,
        "languages": [
          "markdown",
          "html",
          "plaintext"
        ],
        "name": "proselint",
        "url": "https://github.com/amperser/proselint/"
      },
      "pylint": {
        "capabilities": [
          "ignore-file"
        ],
        "command": [
          "pylint",
          "--from-stdin",
          "--output-format",
          "json",
          [
            "$config",
            "--rcfile",
            "$config"
          ],
          "$file"
        ],
        "configFiles": [
          ".pylintrc"
        ],
        "enabled": true,
        "languages": [
          "python"
        ],
        "name": "pylint",
        "url": "https://www.pylint.org"
      },
      "reek": {
        "capabilities": [
          "ignore-line"
        ],
        "command": [
          "reek",
          "--format",
          "json",
          "--no-progress",
          [
            "$config",
            "--config",
            "$config"
          ],
          "--stdin-filename",
          "$file"
        ],
        "configFiles": [
          ".reek.yml"
        ],
        "enabled": true,
        "languages": [
          "ruby",
          "ruby-test",
          "ruby-puma",
          "ruby-bundler"
        ],
        "name": "reek",
        "url": "https://github.com/troessner/reek"
      },
      "rubocop": {
        "capabilities": [
          "ignore-eol",
          "fix-category",
          "fix-all"
        ],
        "command": [
          [
            "$isBundler",
            "bundle",
            "exec"
          ],
          "rubocop",
          [
            "$lint",
            "--format",
            "json",
            "--extra-details"
          ],
          [
            "$config",
            "--config",
            "$config"
          ],
          [
            "$debug",
            "--debug"
          ],
          [
            "$fixAll",
            "--auto-correct-all",
            "--stderr"
          ],
          [
            "$fixCategory",
            "--auto-correct-all",
            "--only",
            "$code",
            "--stderr"
          ],
          "--stdin",
          "$file"
        ],
        "configFiles": [
          ".rubocop.yml"
        ],
        "enabled": true,
        "languages": [
          "ruby",
          "ruby-test",
          "ruby-puma",
          "ruby-bundler"
        ],
        "name": "rubocop",
        "url": "https://rubocop.org"
      },
      "ruby": {
        "capabilities": [],
        "command": [
          "ruby",
          "-c",
          "-w"
        ],
        "configFiles": [],
        "enabled": true,
        "languages": [
          "ruby",
          "ruby-test",
          "ruby-puma",
          "ruby-bundler"
        ],
        "name": "ruby",
        "url": "https://www.ruby-lang.org"
      },
      "shellcheck": {
        "args": {
          "$zsh": {
            "extensions": [
              ".zsh"
            ],
            "shebangs": [
              "/bin/zsh",
              "/usr/bin/zsh",
              "/usr/local/bin/zsh",
              "/usr/bin/env zsh"
            ]
          }
        },
        "capabilities": [],
        "command": [
          "shellcheck",
          "--format",
          "json",
          "--enable",
          "all",
          "-"
        ],
        "configFiles": [],
        "enabled": true,
        "languages": [
          "shellscript",
          "bash"
        ],
        "name": "shellcheck",
        "url": "https://github.com/koalaman/shellcheck",
        "when": [
          "!$zsh"
        ]
      },
      "sqlfluff": {
        "args": {
          "$mysql": {
            "languages": [
              "mysql"
            ]
          },
          "$postgres": {
            "languages": [
              "postgres"
            ]
          }
        },
        "capabilities": [
          "fix-all",
          "ignore-eol"
        ],
        "command": [
          "sqlfluff",
          [
            "$lint",
            "lint",
            "--format",
            "json"
          ],
          [
            "$fixAll",
            "fix"
          ],
          [
            "$postgres",
            "--dialect",
            "postgres"
          ],
          [
            "$mysql",
            "--dialect",
            "mysql"
          ],
          "-"
        ],
        "configFiles": [
          ".sqlfluff"
        ],
        "enabled": true,
        "languages": [
          "mysql",
          "postgres",
          "jinja-sql"
        ],
        "name": "sqlfluff",
        "url": "https://docs.sqlfluff.com/en/stable/index.html"
      },
      "stylelint": {
        "capabilities": [
          "fix-all"
        ],
        "command": [
          "stylelint",
          "--formatter",
          "json",
          [
            "$fixAll",
            "--fix"
          ],
          [
            "$config",
            "--config",
            "$config"
          ],
          "--stdin-filename",
          "$file",
          "--stdin"
        ],
        "configFiles": [
          "stylelint.config.js",
          ".stylelintrc.json",
          ".stylelintrc.yml",
          ".stylelintrc.yaml",
          ".stylelintrc.js"
        ],
        "enabled": true,
        "languages": [
          "css",
          "css-in-js",
          "html",
          "less",
          "markdown",
          "sass",
          "scss",
          "sugarss"
        ],
        "name": "stylelint",
        "url": "https://stylelint.io"
      },
      "swiftlint": {
        "capabilities": [
          "ignore-line",
          "ignore-file"
        ],
        "command": [
          "swiftlint",
          "--use-stdin",
          "--reporter",
          "json",
          [
            "$fixAll",
            "--fix",
            "--format"
          ],
          [
            "$config",
            "--config",
            "$config"
          ]
        ],
        "configFiles": [
          ".swiftlint.yml",
          ".swiftlint.yaml"
        ],
        "enabled": true,
        "languages": [
          "swift"
        ],
        "name": "swiftlint",
        "url": "https://realm.github.io/SwiftLint/"
      },
      "textlint": {
        "capabilities": [
          "fix-inline"
        ],
        "command": [
          "textlint",
          "--format",
          "json",
          [
            "$debug",
            "--debug"
          ],
          [
            "$config",
            "--config",
            "$config"
          ],
          "--stdin",
          "--stdin-filename",
          "$file"
        ],
        "configFiles": [
          ".textlintrc",
          ".textlintrc.js",
          ".textlintrc.json",
          ".textlintrc.yaml",
          ".textlintrc.yml"
        ],
        "enabled": true,
        "languages": [
          "markdown",
          "plaintext",
          "html"
        ],
        "name": "textlint",
        "url": "https://textlint.github.io"
      },
      "vale": {
        "capabilities": [],
        "command": [
          "vale",
          "--output",
          "JSON",
          [
            "$config",
            "--config",
            "$config"
          ],
          "--ext",
          "$extension"
        ],
        "configFiles": [
          ".vale.ini"
        ],
        "enabled": true,
        "languages": [
          "markdown",
          "plaintext",
          "html"
        ],
        "name": "vale",
        "url": "https://github.com/errata-ai/vale"
      },
      "yamllint": {
        "capabilities": [
          "ignore-line"
        ],
        "command": [
          "yamllint",
          "--format",
          "parsable",
          [
            "$config",
            "--config-file",
            "$config"
          ],
          "-"
        ],
        "configFiles": [
          ".yamllint.yml",
          ".yamllint.yaml",
          ".yamllint"
        ],
        "enabled": true,
        "languages": [
          "yaml"
        ],
        "name": "yamllint",
        "url": "https://github.com/adrienverge/yamllint"
      }
    },
  
    // Run linters on text change
    "linter.runOnTextChange": true
  
  },
  {
    // Whether to clear previous output before each run.
    "code-runner.clearPreviousOutput": false,
  
    // Set the custom command to run.
    "code-runner.customCommand": "echo Hello",
  
    // Set the working directory.
    "code-runner.cwd": "",
  
    // Set the default language to run.
    "code-runner.defaultLanguage": "",
  
    // Whether to enable AppInsights to track user telemetry data.
    "code-runner.enableAppInsights": true,
  
    // Set the executor of each language.
    "code-runner.executorMap": {
      "javascript": "node",
      "java": "cd $dir && javac $fileName && java $fileNameWithoutExt",
      "c": "cd $dir && gcc $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt",
      "zig": "zig run",
      "cpp": "cd $dir && g++ $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt",
      "objective-c": "cd $dir && gcc -framework Cocoa $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt",
      "php": "php",
      "python": "python -u",
      "perl": "perl",
      "perl6": "perl6",
      "ruby": "ruby",
      "go": "go run",
      "lua": "lua",
      "groovy": "groovy",
      "powershell": "powershell -ExecutionPolicy ByPass -File",
      "bat": "cmd /c",
      "shellscript": "bash",
      "fsharp": "fsi",
      "csharp": "scriptcs",
      "vbscript": "cscript //Nologo",
      "typescript": "ts-node",
      "coffeescript": "coffee",
      "scala": "scala",
      "swift": "swift",
      "julia": "julia",
      "crystal": "crystal",
      "ocaml": "ocaml",
      "r": "Rscript",
      "applescript": "osascript",
      "clojure": "lein exec",
      "haxe": "haxe --cwd $dirWithoutTrailingSlash --run $fileNameWithoutExt",
      "rust": "cd $dir && rustc $fileName && $dir$fileNameWithoutExt",
      "racket": "racket",
      "scheme": "csi -script",
      "ahk": "autohotkey",
      "autoit": "autoit3",
      "dart": "dart",
      "pascal": "cd $dir && fpc $fileName && $dir$fileNameWithoutExt",
      "d": "cd $dir && dmd $fileName && $dir$fileNameWithoutExt",
      "haskell": "runghc",
      "nim": "nim compile --verbosity:0 --hints:off --run",
      "lisp": "sbcl --script",
      "kit": "kitc --run",
      "v": "v run",
      "sass": "sass --style expanded",
      "scss": "scss --style expanded",
      "less": "cd $dir && lessc $fileName $fileNameWithoutExt.css",
      "FortranFreeForm": "cd $dir && gfortran $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt",
      "fortran-modern": "cd $dir && gfortran $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt",
      "fortran_fixed-form": "cd $dir && gfortran $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt",
      "fortran": "cd $dir && gfortran $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt",
      "sml": "cd $dir && sml $fileName",
      "mojo": "mojo run",
      "erlang": "escript",
      "spwn": "spwn build",
      "pkl": "cd $dir && pkl eval -f yaml $fileName -o $fileNameWithoutExt.yaml",
      "gleam": "gleam run -m $fileNameWithoutExt"
    },
  
    // Set the executor of each file extension.
    "code-runner.executorMapByFileExtension": {
      ".vb": "cd $dir && vbc /nologo $fileName && $dir$fileNameWithoutExt",
      ".vbs": "cscript //Nologo",
      ".scala": "scala",
      ".jl": "julia",
      ".cr": "crystal",
      ".ml": "ocaml",
      ".zig": "zig run",
      ".exs": "elixir",
      ".hx": "haxe --cwd $dirWithoutTrailingSlash --run $fileNameWithoutExt",
      ".rkt": "racket",
      ".scm": "csi -script",
      ".ahk": "autohotkey",
      ".au3": "autoit3",
      ".kt": "cd $dir && kotlinc $fileName -include-runtime -d $fileNameWithoutExt.jar && java -jar $fileNameWithoutExt.jar",
      ".kts": "kotlinc -script",
      ".dart": "dart",
      ".pas": "cd $dir && fpc $fileName && $dir$fileNameWithoutExt",
      ".pp": "cd $dir && fpc $fileName && $dir$fileNameWithoutExt",
      ".d": "cd $dir && dmd $fileName && $dir$fileNameWithoutExt",
      ".hs": "runhaskell",
      ".nim": "nim compile --verbosity:0 --hints:off --run",
      ".csproj": "dotnet run --project",
      ".fsproj": "dotnet run --project",
      ".lisp": "sbcl --script",
      ".kit": "kitc --run",
      ".v": "v run",
      ".vsh": "v run",
      ".sass": "sass --style expanded",
      ".cu": "cd $dir && nvcc $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt",
      ".ring": "ring",
      ".sml": "cd $dir && sml $fileName",
      ".mojo": "mojo run",
      ".erl": "escript",
      ".spwn": "spwn build",
      ".pkl": "cd $dir && pkl eval -f yaml $fileName -o $fileNameWithoutExt.yaml",
      ".gleam": "gleam run -m $fileNameWithoutExt"
    },
  
    // Set the executor by glob.
    "code-runner.executorMapByGlob": {
      "pom.xml": "cd $dir && mvn clean package"
    },
  
    // Whether to use the directory of the file to be executed as the working directory.
    "code-runner.fileDirectoryAsCwd": false,
  
    // Whether to ignore selection to always run entire file.
    "code-runner.ignoreSelection": false,
  
    // Set the mapping of languageId to file extension.
    "code-runner.languageIdToFileExtensionMap": {
      "bat": ".bat",
      "powershell": ".ps1",
      "typescript": ".ts"
    },
  
    // Whether to preserve focus on code editor after code run is triggered.
    "code-runner.preserveFocus": true,
  
    // Whether to respect Shebang to run code.
    "code-runner.respectShebang": true,
  
    // Whether to run code in Integrated Terminal.
    "code-runner.runInTerminal": false,
  
    // Whether to save all files before running.
    "code-runner.saveAllFilesBeforeRun": false,
  
    // Whether to save the current file before running.
    "code-runner.saveFileBeforeRun": false,
  
    // Whether to show extra execution message like [Running] ... and [Done] ...
    "code-runner.showExecutionMessage": true,
  
    // Whether to show 'Run Code' command in editor context menu.
    "code-runner.showRunCommandInEditorContextMenu": true,
  
    // Whether to show 'Run Code' command in explorer context menu.
    "code-runner.showRunCommandInExplorerContextMenu": true,
  
    // Whether to show 'Run Code' icon in editor title menu.
    "code-runner.showRunIconInEditorTitleMenu": true,
  
    // Whether to show 'Stop code run' icon in the editor title menu when code is running.
    "code-runner.showStopIconInEditorTitleMenu": true,
  
    // Temporary file name used in running selected code snippet. When it is set as empty, the file name will be random.
    "code-runner.temporaryFileName": "tempCodeRunnerFile",
  
    // For Windows system, replaces the Windows style drive letter in the command with a Unix style root when using a custom shell as the terminal, like Bash or Cgywin. Example: Setting this to '/mnt/' will replace 'C:\path' with '/mnt/c/path'
    "code-runner.terminalRoot": ""
  
  },
  {
    // If mypy, pyirhgt and ruff should have activated most of its checks.
    "Python_Config.aggressiveSettings": false,
  
    // The python formatter that should be used.
    "Python_Config.formattingTool": "ruff",
  
    // The max line length for the tools.
    "Python_Config.lineLength": 120,
  
    // The python target version for the tool settings.
    "Python_Config.pythonVersion": "3.10"
  
  },
  {
    // Specifies whether column headers in CSV files are capitalized.
    "csv-preview.capitalizeHeaders": true,
  
    // Specifies the character used to mark comment lines in CSV files.
    "csv-preview.commentCharacter": "#",
  
    // Specifies whether to format numeric values in CSV files, or to treat them as strings.
    "csv-preview.formatValues": "always",
  
    // Specifies whether the first row in a CSV file represents column headers.
    "csv-preview.hasHeaders": true,
  
    // Specifies whether to display line numbers for CSV files.
    "csv-preview.lineNumbers": "none",
  
    // Specifies a [.NET-style format string](https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-numeric-format-strings) used to format numeric columns in CSV files.
    "csv-preview.numberFormat": "g2",
  
    // Specifies whether text piped to stdin is automatically opened as a CSV preview.
    "csv-preview.openStdin": false,
  
    // Specifies the optional character used to surround individual values in a CSV file.
    "csv-preview.quoteMark": "\"",
  
    // Specifies whether columns are automatically resized to fit the data for CSV files.
    "csv-preview.resizeColumns": "none",
  
    // Specifies the separator used in a CSV file (normally , but also ; is common).
    "csv-preview.separator": ",",
  
    // Specifies whether lines that begin with the comment character should be omitted from the CSV preview.
    "csv-preview.skipComments": false,
  
    // Specifies whether an information bubble will be shown under the preview window. The information describes which DataGrid is used in this extensions and links to more information.
    "excel-viewer.showInfo": true
  
  },
  {
    // When activated, selecting a node will navigate to an associated code section.
    "hediet.vscode-drawio.codeLinkActivated": false,
  
    // Names for colors, eg. {‘FFFFFF’: ‘White’, ‘000000’: ‘Black’} that are used as tooltips (uppercase, no leading # for the colour codes)
    "hediet.vscode-drawio.colorNames": {},
  
    // Available color schemes in the style section at the top of the format panel. See example [here](https://www.diagrams.net/doc/faq/custom-colours-confluence-cloud#default-colour-schemes---format-panel)
    "hediet.vscode-drawio.customColorSchemes": [],
  
    // Configures the Draw.io editor to use custom fonts.
    "hediet.vscode-drawio.customFonts": [],
  
    // Configures the Draw.io editor to use custom libraries.
    "hediet.vscode-drawio.customLibraries": [],
  
    // Default styling of edges.
    "hediet.vscode-drawio.defaultEdgeStyle": {},
  
    // Default styling of vertices (shapes).
    "hediet.vscode-drawio.defaultVertexStyle": {},
  
    // Defines global variables for system-wide placeholders using a JSON structure with key, value pairs. Keep the number of global variables small.
    "hediet.vscode-drawio.globalVars": {},
  
    // 
    "hediet.vscode-drawio.knownPlugins": [],
  
    // Only change this property if you know what you are doing. Manual changes to this property are not supported!
    "hediet.vscode-drawio.local-storage": {},
  
    // When enabled, the bundled instance of Draw.io is used.
    "hediet.vscode-drawio.offline": true,
  
    // The app to use when offline mode is disabled.
    "hediet.vscode-drawio.online-url": "https://embed.diagrams.net/",
  
    // Loads Draw.io plugins.
    "hediet.vscode-drawio.plugins": [],
  
    // Color codes for the upper palette in the color dialog.
    "hediet.vscode-drawio.presetColors": [],
  
    // If set to true, images are resized automatically on paste. If not defined, the user will be asked to confirm the resize.
    "hediet.vscode-drawio.resizeImages": null,
  
    // When enabled, no ForeignObjects are used in the svg.
    "hediet.vscode-drawio.simpleLabels": false,
  
    // Defines an array of objects that contain the colours (fontColor, fillColor, strokeColor and gradientColor) for the Style tab of the format panel if the selection is empty. These objects can have a commonStyle (which is applied to both vertices and edges), vertexStyle (applied to vertices) and edgeStyle (applied to edges), and a graph with background and gridColor. An empty object means apply the default colors
    "hediet.vscode-drawio.styles": [],
  
    // The theme to use for the Draw.io editor. Use "automatic" to automatically choose a Draw.io theme that matches your current VS Code theme.
    "hediet.vscode-drawio.theme": "automatic",
  
    // Defines the zoom factor for mouse wheel and trackpad zoom.
    "hediet.vscode-drawio.zoomFactor": 1.2
  
  },
  {
    // If true, commas at then ends of arrays/objects won't be treated as errors.
    "fracturedjsonvsc.v3.AllowTrailingCommas": false,
  
    // Depth at which lists/objects are always expanded regardless of other settings. -1=none, 0=root, etc.
    "fracturedjsonvsc.v3.AlwaysExpandDepth": -1,
  
    // Insert spaces after colons.
    "fracturedjsonvsc.v3.ColonPadding": true,
  
    // Insert spaces after commas.
    "fracturedjsonvsc.v3.CommaPadding": true,
  
    // Insert spaces before/after comments (depending on their position).
    "fracturedjsonvsc.v3.CommentPadding": true,
  
    // Determines how comments are handled in files identified by the editor as 'JSON' (not 'JSON with Comments').
    "fracturedjsonvsc.v3.CommentPolicyForJSON": "TreatAsError",
  
    // Determines how comments are handled in files identified by the editor as 'JSON with Comments'.
    "fracturedjsonvsc.v3.CommentPolicyForJSONC": "Preserve",
  
    // Maximum complexity for compact multiline arrays.
    "fracturedjsonvsc.v3.MaxCompactArrayComplexity": 1,
  
    // Maximum complexity for inline elements.
    "fracturedjsonvsc.v3.MaxInlineComplexity": 2,
  
    // Maximum length of complex inline elements, not counting indentation.
    "fracturedjsonvsc.v3.MaxInlineLength": 999999999,
  
    // Maximum complexity for inlined elements formatted as a table.
    "fracturedjsonvsc.v3.MaxTableRowComplexity": 2,
  
    // Maximum length of complex inline elements, including indentation.
    "fracturedjsonvsc.v3.MaxTotalLineLength": 80,
  
    // Minimum number of items per line (roughly) when formatting compact multiline arrays.
    "fracturedjsonvsc.v3.MinCompactArrayRowItems": 3,
  
    // Insert spaces inside brackets for complex inlined types.
    "fracturedjsonvsc.v3.NestedBracketPadding": true,
  
    // Trims spaces/tabs at the ends of lines.
    "fracturedjsonvsc.v3.OmitTrailingWhitespace": true,
  
    // If true, blank lines from the original will be included in the formatted text.
    "fracturedjsonvsc.v3.PreserveBlankLines": false,
  
    // Insert spaces inside brackets for un-nested inlined types.
    "fracturedjsonvsc.v3.SimpleBracketPadding": false,
  
    // Determines how many spaces are added when aligning things as tables.
    //  - CharacterCount: Aligns tables based on simple character counts.
    //  - EastAsianFullWidth: Aligns tables adjusting for East Asian FullWidth characters.
    //  - EastAsianTreatAmbiguousAsWide: Aligns tables adjusting for East Asian FullWidth characters, treating ambiguous ones as wide.
    "fracturedjsonvsc.v3.StringWidthPolicy": "EastAsianFullWidth",
  
    // Controls how lists or columns of numbers (possibly with nulls) are aligned, and whether their precision may be normalized.
    //  - Left: Left-aligns numbers, keeping each exactly as it appears in the input document.
    //  - Right: Right-aligns numbers, keeping each exactly as it appears in the input document.
    //  - Decimal: Lines up decimal points but keeps each number exactly as it appears in the input document.
    //  - Normalize: Right-aligns numbers, writing them all with the same number of digits after the decimal point.
    "fracturedjsonvsc.v4.NumberListAlignment": "Normalize"
  
  },
  {
    // You can specified the type of color that should be colorized by the extension.
    // Available colors are:
    // * `HEXA`: for hexadecimal colors: `#RGB`, `#RGBA`, `#RRGGBB`, `#RRGGBBAA`, `0xRGB`, `0xRGBA`, `0xRRGGBB` or `0xRRGGBBAA`
    // * `ARGB`: for argb colors: `#RGB`, `#ARGB`, `#RRGGBB` or `#AARRGGBB`
    // * `RGB`: for rgb colors: `rgb(r,g,b)` or `rgba(r,g,b,a)`
    // * `HSL`: for HSL colors: `hsl(h,s,l)` or `hsla(h,s,l,a)`
    // * `BROWSERS_COLORS`: for native browser's colors like `white`, `red`, `blue`...
    "colorize.colorized_colors": [
      "BROWSERS_COLORS",
      "HEXA",
      "RGB",
      "HSL",
      "OKLAB",
      "OKLCH"
    ],
  
    // You can specified the type of variables that should be colorized by the extension.
    "colorize.colorized_variables": [
      "CSS"
    ],
  
    // 
    "colorize.decoration_type": "background",
  
    // When vscode starts, Colorize fetch all files targeted by the settings `colorize.include` and `colorize.languages` but not the ones targeted by the setting `colorize.exclude`. When the fetch is done, colorize open and parse all files searching for variables. That way variables will be colorized in every files. _⚠️ this setting can slown down your editor a little at opening time, read this [issue](https://github.com/KamiKillertO/vscode-colorize/issues/174) to learn more about it._
    "colorize.enable_search_variables": true,
  
    // Configure glob patterns for excluding files and folders. Colorize will not colorized colors in these files and folders and it'll also not search for variables inside. Read more about glob patterns [here](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options).
    "colorize.exclude": [
      "**/.git",
      "**/.svn",
      "**/.hg",
      "**/CVS",
      "**/.DS_Store",
      "**/.git",
      "**/node_modules",
      "**/bower_components",
      "**/tmp",
      "**/dist",
      "**/tests"
    ],
  
    // Hide colors for the current line. Set to `false` to turn it off
    "colorize.hide_current_line_decorations": true,
  
    // Configure glob patterns for including files and folders. By default Colorize is enable for files matching one the languages defined in the `colorize.languages` config, with this config you can enable colorize for other files or folders. Read more about glob patterns [here](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options).
    "colorize.include": [
      "**/*.css",
      "**/*.scss",
      "**/*.sass",
      "**/*.less",
      "**/*.styl"
    ],
  
    // Configure a list of languages that should be colorized. A list of languages can be find at https://code.visualstudio.com/docs/languages/identifiers. You can learn about languages at https://code.visualstudio.com/docs/languages/overview.
    "colorize.languages": [
      "css",
      "sass",
      "scss",
      "less",
      "postcss",
      "sss",
      "stylus",
      "xml",
      "svg"
    ],
  
    // Show colors on the overview ruler (scroll bar)
    "colorize.ruler_decoration": true
  
  },
  {
    // When creating a hanging indent, do not put the closing bracket on its own line.
    "pythonIndent.keepHangingBracketOnLine": false,
  
    // Trims lines that contain only whitespace after pressing Enter on them.
    "pythonIndent.trimLinesWithOnlyWhitespace": false,
  
    // After creating a hanging indent, press tab to leave the indented section and go to the ending bracket.
    "pythonIndent.useTabOnHangingIndent": false
  
  },
  {
    // Enable automatic content-based separator autodetection for the specified list of separators (multicharacter separators are supported)
    "rainbow_csv.autodetect_separators": [
      "TAB",
      ",",
      ";",
      "|"
    ],
  
    // Minimum number of non-comment lines in file for content-based autodetection
    "rainbow_csv.autodetection_min_line_count": 10,
  
    // Comment lines prefix, e.g. "#". Set to empty string to disable
    "rainbow_csv.comment_prefix": "",
  
    // CSV Lint: detect leading and trailing whitespaces in fields and show warning
    "rainbow_csv.csv_lint_detect_trailing_spaces": false,
  
    // Enable automatic linting/checking of opened csv files
    "rainbow_csv.enable_auto_csv_lint": true,
  
    // Enable "Preview CSV head" option in File Explorer context menu for all files
    "rainbow_csv.enable_context_menu_head": false,
  
    // Enable "Preview CSV tail" option in File Explorer context menu for all files
    "rainbow_csv.enable_context_menu_tail": false,
  
    // Keyboard input text cursor: show info about the cursor CSV column in the status bar.
    "rainbow_csv.enable_cursor_position_info": true,
  
    // Enable automatic content based separator autodetection
    "rainbow_csv.enable_separator_autodetection": true,
  
    // Enable column-info tooltip on hover
    "rainbow_csv.enable_tooltip": true,
  
    // Show column names in tooltip
    "rainbow_csv.enable_tooltip_column_names": true,
  
    // Output directory for RBQL result sets, can be `TMP`, `INPUT` or a custom absolute path. `TMP` - output in system tmp dir(default), `INPUT` - output in the same dir as input file, otherwise use provided path as the output directory e.g. `/path/to/custom/dir`
    "rainbow_csv.rbql_output_dir": "TMP",
  
    // RBQL treats the first line as header by default
    "rainbow_csv.rbql_with_headers_by_default": false
  
  },
  {
    // Convert code area to code block
    "markdownFormatter.codeAreaToBlock": "",
  
    // Display time before article
    "markdownFormatter.displayTime": false,
  
    // Enable/disable markdown-formatter.
    "markdownFormatter.enable": true,
  
    // set false to stop all code format
    "markdownFormatter.formatCodes": true,
  
    // config as js-beautify options
    "markdownFormatter.formatOpt": {},
  
    // Format the table, if the table contains pictures or different languages, please do not open this
    "markdownFormatter.formatTable": false,
  
    // Enable/disable formatted unordered list symbol.
    "markdownFormatter.formatULSymbol": true,
  
    // Unify full-width (，：；！“”‘’（）？。) as a half-width character(,:;!''()?.).
    "markdownFormatter.fullWidthTurnHalfWidth": "auto",
  
    //  `full` will insert a space after the full-width symbol , `half` , `all` or `neither`
    "markdownFormatter.spaceAfterFullWidthOrHalfWidth": "half"
  
  },
  {
    // Depreciated: This setting has been renamed to `git-graph.commitDetailsView.autoCenter`
    // Automatically center the commit details view when it is opened.
    "git-graph.autoCenterCommitDetailsView": true,
  
    // Depreciated: This setting has been renamed to `git-graph.referenceLabels.combineLocalAndRemoteBranchLabels`
    // Combine local and remote branch labels if they refer to the same branch, and are on the same commit.
    "git-graph.combineLocalAndRemoteBranchLabels": true,
  
    // Automatically center the Commit Details View when it is opened.
    "git-graph.commitDetailsView.autoCenter": true,
  
    // Render the File Tree in the Commit Details View in a compacted form, such that folders with a single child folder are compressed into a single combined folder element.
    "git-graph.commitDetailsView.fileView.fileTree.compactFolders": true,
  
    // Sets the default type of File View used in the Commit Details View. This can be overridden per repository using the controls on the right side of the Commit Details View.
    //  - File Tree: Display files in a tree structure.
    //  - File List: Display files in a list (useful for repositories with deep folder structures).
    "git-graph.commitDetailsView.fileView.type": "File Tree",
  
    // Specifies where the Commit Details View is rendered in the Git Graph View.
    //  - Inline: Show the Commit Details View inline with the graph & commits.
    //  - Docked to Bottom: Show the Commit Details View docked to the bottom of the Git Graph View.
    "git-graph.commitDetailsView.location": "Inline",
  
    // Depreciated: This setting has been renamed to `git-graph.commitDetailsView.fileView.fileTree.compactFolders`
    // Render the File Tree in the Commit Details / Comparison View in a compacted form, such that folders with a single child folder are compressed into a single combined folder element.
    "git-graph.commitDetailsViewFileTreeCompactFolders": true,
  
    // Depreciated: This setting has been renamed to `git-graph.commitDetailsView.location`
    // Specifies where the Commit Details View is rendered in the Git Graph view.
    //  - Inline: Show the Commit Details View inline with the graph
    //  - Docked to Bottom: Show the Commit Details View docked to the bottom of the Git Graph view
    "git-graph.commitDetailsViewLocation": "Inline",
  
    // Depreciated: This setting has been renamed to `git-graph.repository.commits.order`
    // Specifies the order of commits on the Git Graph view. See [git log](https://git-scm.com/docs/git-log#_commit_ordering) for more information on each order option.
    //  - date: Show commits in the commit timestamp order.
    //  - author-date: Show commits in the author timestamp order.
    //  - topo: Avoid showing commits on multiple lines of history intermixed.
    "git-graph.commitOrdering": "date",
  
    // Customise which context menu actions are visible. For example, if you want to hide the rebase action from the branch context menu, a suitable value for this setting is `{ "branch": { "rebase": false } }`. For more information of how to configure this setting, view the documentation [here](https://github.com/mhutchie/vscode-git-graph/wiki/Extension-Settings#context-menu-actions-visibility).
    "git-graph.contextMenuActionsVisibility": {},
  
    // An array of Custom Branch Glob Patterns to be shown in the 'Branches' dropdown. Example: [{"name": "Feature Requests", "glob": "heads/feature/*"}]
    "git-graph.customBranchGlobPatterns": [],
  
    // An array of custom Emoji Shortcode mappings. Example: [{"shortcode": ":sparkles:", "emoji":"✨"}]
    "git-graph.customEmojiShortcodeMappings": [],
  
    // An array of custom Pull Request providers that can be used in the "Pull Request Creation" Integration. For information on how to configure this setting, see the documentation [here](https://github.com/mhutchie/vscode-git-graph/wiki/Configuring-a-custom-Pull-Request-Provider).
    "git-graph.customPullRequestProviders": [],
  
    // Specifies the date format to be used in the "Date" column on the Git Graph View.
    //  - Date & Time: Show the date and time (e.g. "24 Mar 2019 21:34")
    //  - Date Only: Show the date only (e.g. "24 Mar 2019")
    //  - ISO Date & Time: Show the ISO date and time (e.g. "2019-03-24 21:34")
    //  - ISO Date Only: Show the ISO date only (e.g. "2019-03-24")
    //  - Relative: Show relative times (e.g. "5 minutes ago")
    "git-graph.date.format": "Date & Time",
  
    // Specifies the date type to be displayed in the "Date" column on the Git Graph View.
    //  - Author Date: Use the author date of a commit.
    //  - Commit Date: Use the committer date of a commit.
    "git-graph.date.type": "Author Date",
  
    // Depreciated: This setting has been renamed to `git-graph.date.format`
    // Specifies the date format to be used in the "Date" column on the Git Graph View.
    //  - Date & Time: Show the date and time, for example "24 Mar 2019 21:34"
    //  - Date Only: Show the date only, for example "24 Mar 2019"
    //  - ISO Date & Time: Show the ISO date and time, for example "2019-03-24 21:34"
    //  - ISO Date Only: Show the ISO date only, for example "2019-03-24"
    //  - Relative: Show relative times, for example "5 minutes ago"
    "git-graph.dateFormat": "Date & Time",
  
    // Depreciated: This setting has been renamed to `git-graph.date.type`
    // Specifies the date type to be displayed in the "Date" column on the Git Graph View.
    //  - Author Date: Use the author date of a commit
    //  - Commit Date: Use the committer date of a commit
    "git-graph.dateType": "Author Date",
  
    // An object specifying the default visibility of the Date, Author & Commit columns. Example: {"Date": true, "Author": true, "Commit": true}
    "git-graph.defaultColumnVisibility": {
      "Date": true,
      "Author": true,
      "Commit": true
    },
  
    // Depreciated: This setting has been renamed to `git-graph.commitDetailsView.fileView.type`
    // Sets the default type of File View used in the Commit Details / Comparison Views. This can be overridden per repository using the controls on the right side of the Commit Details / Comparison Views.
    //  - File Tree: Display files in a tree structure
    //  - File List: Display files in a list (useful for repositories with deep folder structures)
    "git-graph.defaultFileViewType": "File Tree",
  
    // Default state of the field indicating whether the tag should be pushed to a remote once it is added.
    "git-graph.dialog.addTag.pushToRemote": false,
  
    // Default type of the tag being added.
    "git-graph.dialog.addTag.type": "Annotated",
  
    // Default state of the "Reinstate Index" checkbox.
    "git-graph.dialog.applyStash.reinstateIndex": false,
  
    // Default state of the "No Commit" checkbox.
    "git-graph.dialog.cherryPick.noCommit": false,
  
    // Default state of the "Record Origin" checkbox.
    "git-graph.dialog.cherryPick.recordOrigin": false,
  
    // Default state of the "Check out" checkbox.
    "git-graph.dialog.createBranch.checkOut": false,
  
    // Default state of the "Force Delete" checkbox.
    "git-graph.dialog.deleteBranch.forceDelete": false,
  
    // Default state of the "Force Fetch" checkbox.
    "git-graph.dialog.fetchIntoLocalBranch.forceFetch": false,
  
    // Default state of the "Prune" checkbox.
    "git-graph.dialog.fetchRemote.prune": false,
  
    // Default state of the "Prune Tags" checkbox.
    "git-graph.dialog.fetchRemote.pruneTags": false,
  
    // Specifies a substitution that is automatically performed when space characters are entered or pasted into reference inputs on dialogs (e.g. Create Branch, Add Tag, etc.).
    //  - None: Don't replace spaces.
    //  - Hyphen: Replace space characters with hyphens, for example: "new branch" -> "new-branch".
    //  - Underscore: Replace space characters with underscores, for example: "new branch" -> "new_branch".
    "git-graph.dialog.general.referenceInputSpaceSubstitution": "None",
  
    // Default state of the "No Commit" checkbox.
    "git-graph.dialog.merge.noCommit": false,
  
    // Default state of the "Create a new commit even if fast-forward is possible" checkbox.
    "git-graph.dialog.merge.noFastForward": true,
  
    // Default state of the "Squash Commits" checkbox.
    "git-graph.dialog.merge.squashCommits": false,
  
    // Specifies the message format used for the squashed commit (when the "Squash Commits" option is selected).
    //  - Default: Use the squash message generated by Git Graph.
    //  - Git SQUASH_MSG: Use the detailed squash message generated by Git (stored in .git/SQUASH_MSG).
    "git-graph.dialog.merge.squashMessageFormat": "Default",
  
    // Default state of the "Reinstate Index" checkbox.
    "git-graph.dialog.popStash.reinstateIndex": false,
  
    // Default state of the "Create a new commit even if fast-forward is possible" checkbox.
    "git-graph.dialog.pullBranch.noFastForward": false,
  
    // Default state of the "Squash Commits" checkbox.
    "git-graph.dialog.pullBranch.squashCommits": false,
  
    // Specifies the message format used for the squashed commit (when the "Squash Commits" option is selected).
    //  - Default: Use the squash message generated by Git Graph.
    //  - Git SQUASH_MSG: Use the detailed squash message generated by Git (stored in .git/SQUASH_MSG).
    "git-graph.dialog.pullBranch.squashMessageFormat": "Default",
  
    // Default state of the "Ignore Date (non-interactive rebase only)" checkbox.
    "git-graph.dialog.rebase.ignoreDate": true,
  
    // Default state of the "Launch Interactive Rebase in new Terminal" checkbox.
    "git-graph.dialog.rebase.launchInteractiveRebase": false,
  
    // Default mode to be used for the reset action.
    //  - Soft: Soft - Keep all changes, but reset head
    //  - Mixed: Mixed - Keep working tree, but reset index
    //  - Hard: Hard - Discard all changes
    "git-graph.dialog.resetCurrentBranchToCommit.mode": "Mixed",
  
    // Default mode to be used for the reset action.
    //  - Mixed: Mixed - Keep working tree, but reset index
    //  - Hard: Hard - Discard all changes
    "git-graph.dialog.resetUncommittedChanges.mode": "Mixed",
  
    // Default state of the "Include Untracked" checkbox.
    "git-graph.dialog.stashUncommittedChanges.includeUntracked": true,
  
    // Visual file change A|M|D|R|U indicators in the Commit Details View for users with colour blindness. In the future, this setting will enable any additional accessibility related features of Git Graph that aren't enabled by default.
    "git-graph.enhancedAccessibility": false,
  
    // Depreciated: This setting has been renamed to `git-graph.repository.fetchAndPrune`
    // Before fetching from remote(s) using the Fetch button on the Git Graph View Control Bar, remove any remote-tracking references that no longer exist on the remote(s).
    "git-graph.fetchAndPrune": false,
  
    // Depreciated: This setting has been renamed to `git-graph.repository.commits.fetchAvatars`
    // Fetch avatars of commit authors and committers. By enabling this setting, you consent to commit author and committer email addresses being sent GitHub, GitLab or Gravatar, depending on the repositories remote origin.
    "git-graph.fetchAvatars": false,
  
    // The character set encoding used when retrieving a specific version of repository files (e.g. in the Diff View). A list of all supported encodings can be found [here](https://github.com/ashtuchkin/iconv-lite/wiki/Supported-Encodings).
    "git-graph.fileEncoding": "utf8",
  
    // Specifies the colours used on the graph.
    "git-graph.graph.colours": [
      "#0085d9",
      "#d9008f",
      "#00d90a",
      "#d98500",
      "#a300d9",
      "#ff0000",
      "#00d9cc",
      "#e138e8",
      "#85d900",
      "#dc5b23",
      "#6f24d6",
      "#ffcc00"
    ],
  
    // Specifies the style of the graph.
    //  - rounded: Use smooth curves when transitioning between branches on the graph.
    //  - angular: Use angular lines when transitioning between branches on the graph.
    "git-graph.graph.style": "rounded",
  
    // Specifies how the Uncommitted Changes are displayed on the graph.
    //  - Open Circle at the Uncommitted Changes: Display the Uncommitted Changes as a grey open circle, connected to the commit referenced by HEAD with a solid grey line. The current file system's state is therefore always displayed as an open circle.
    //  - Open Circle at the Checked Out Commit: Display the Uncommitted Changes as a grey closed circle, connected to the commit referenced by HEAD with a dotted grey line. The commit referenced by HEAD is therefore always displayed as an open circle.
    "git-graph.graph.uncommittedChanges": "Open Circle at the Uncommitted Changes",
  
    // Depreciated: This setting has been renamed to `git-graph.graph.colours`
    // Specifies the colours used on the graph.
    "git-graph.graphColours": [
      "#0085d9",
      "#d9008f",
      "#00d90a",
      "#d98500",
      "#a300d9",
      "#ff0000",
      "#00d9cc",
      "#e138e8",
      "#85d900",
      "#dc5b23",
      "#6f24d6",
      "#ffcc00"
    ],
  
    // Depreciated: This setting has been renamed to `git-graph.graph.style`
    // Specifies the style of the graph.
    //  - rounded: Use smooth curves when transitioning between branches on the graph
    //  - angular: Use angular lines when transitioning between branches on the graph
    "git-graph.graphStyle": "rounded",
  
    // Depreciated: This setting has been renamed to `git-graph.repository.includeCommitsMentionedByReflogs`
    // Include commits only mentioned by reflogs in the Git Graph View (only applies when showing all branches). This can be overridden per repository in the Git Graph View's Repository Settings Widget.
    "git-graph.includeCommitsMentionedByReflogs": false,
  
    // Depreciated: This setting has been renamed to `git-graph.repository.commits.initialLoad`
    // Specifies the number of commits to initially load.
    "git-graph.initialLoadCommits": 300,
  
    // Specifies the path and filename of the Shell executable to be used by the Visual Studio Code Integrated Terminal, when it is opened by Git Graph. For example, to use Git Bash on Windows this setting would commonly be set to "C:\Program Files\Git\bin\bash.exe". If this setting is left blank, the default Shell is used.
    "git-graph.integratedTerminalShell": "",
  
    // The keybinding for the keyboard shortcut that opens the Find Widget in the Git Graph View.
    "git-graph.keyboardShortcut.find": "CTRL/CMD + F",
  
    // The keybinding for the keyboard shortcut that refreshes the Git Graph View.
    "git-graph.keyboardShortcut.refresh": "CTRL/CMD + R",
  
    // The keybinding for the keyboard shortcut that scrolls the Git Graph View to be centered on the commit referenced by HEAD.
    "git-graph.keyboardShortcut.scrollToHead": "CTRL/CMD + H",
  
    // The keybinding for the keyboard shortcut that scrolls the Git Graph View to the first (or next) stash in the loaded commits. The Shift Key Modifier can be applied to this keybinding to scroll the Git Graph View to the last (or previous) stash in the loaded commits.
    "git-graph.keyboardShortcut.scrollToStash": "CTRL/CMD + S",
  
    // Depreciated: This setting has been renamed to `git-graph.repository.commits.loadMore`
    // Specifies the number of additional commits to load when the "Load More Commits" button is pressed, or more commits are automatically loaded.
    "git-graph.loadMoreCommits": 100,
  
    // Depreciated: This setting has been renamed to `git-graph.repository.commits.loadMoreAutomatically`
    // When the view has been scrolled to the bottom, automatically load more commits if they exist (instead of having to press the "Load More Commits" button).
    "git-graph.loadMoreCommitsAutomatically": true,
  
    // Parse and render a frequently used subset of inline Markdown formatting rules in commit messages and tag details (bold, italics, bold & italics, and inline code blocks).
    "git-graph.markdown": true,
  
    // Specifies the maximum depth of subfolders to search when discovering repositories in the workspace. Note: Sub-repos are not automatically detected when searching subfolders, however they can be manually added by running the command "Git Graph: Add Git Repository" in the Command Palette.
    "git-graph.maxDepthOfRepoSearch": 0,
  
    // Depreciated: This setting has been renamed to `git-graph.repository.commits.mute.commitsThatAreNotAncestorsOfHead`
    // Display commits that aren't ancestors of the checked-out branch / commit with a muted text color. Muting will only occur if the commit referenced by HEAD is within the loaded commits on the Git Graph View.
    "git-graph.muteCommitsThatAreNotAncestorsOfHead": false,
  
    // Depreciated: This setting has been renamed to `git-graph.repository.commits.mute.mergeCommits`
    // Display merge commits with a muted text color.
    "git-graph.muteMergeCommits": true,
  
    // Depreciated: This setting has been renamed to `git-graph.repository.onlyFollowFirstParent`
    // Only follow the first parent of commits when discovering the commits to load in the Git Graph View. See [--first-parent](https://git-scm.com/docs/git-log#Documentation/git-log.txt---first-parent) to find out more about this setting.
    "git-graph.onlyFollowFirstParent": false,
  
    // Depreciated: This setting has been renamed to `git-graph.openNewTabEditorGroup`
    // Specifies which Editor Group the Visual Studio Code Diff View is opened in.
    //  - Active: Open the Visual Studio Code Diff View in the Active Editor Group.
    //  - Beside: Open the Visual Studio Code Diff View beside the Active Editor Group.
    //  - One: Open the Visual Studio Code Diff View in the First Editor Group.
    //  - Two: Open the Visual Studio Code Diff View in the Second Editor Group.
    //  - Three: Open the Visual Studio Code Diff View in the Third Editor Group.
    //  - Four: Open the Visual Studio Code Diff View in the Fourth Editor Group.
    //  - Five: Open the Visual Studio Code Diff View in the Fifth Editor Group.
    //  - Six: Open the Visual Studio Code Diff View in the Sixth Editor Group.
    //  - Seven: Open the Visual Studio Code Diff View in the Seventh Editor Group.
    //  - Eight: Open the Visual Studio Code Diff View in the Eighth Editor Group.
    //  - Nine: Open the Visual Studio Code Diff View in the Ninth Editor Group.
    "git-graph.openDiffTabLocation": "Active",
  
    // Specifies the Editor Group where Git Graph should open new tabs, when performing the following actions from the Git Graph View: Viewing the Visual Studio Code Diff View, Opening a File, Viewing a File at a Specific Revision.
    //  - Active: Open the new tab in the Active Editor Group.
    //  - Beside: Open the new tab beside the Active Editor Group.
    //  - One: Open the new tab in the First Editor Group.
    //  - Two: Open the new tab in the Second Editor Group.
    //  - Three: Open the new tab in the Third Editor Group.
    //  - Four: Open the new tab in the Fourth Editor Group.
    //  - Five: Open the new tab in the Fifth Editor Group.
    //  - Six: Open the new tab in the Sixth Editor Group.
    //  - Seven: Open the new tab in the Seventh Editor Group.
    //  - Eight: Open the new tab in the Eighth Editor Group.
    //  - Nine: Open the new tab in the Ninth Editor Group.
    "git-graph.openNewTabEditorGroup": "Active",
  
    // Depreciated: This setting has been renamed to `git-graph.repository.onLoad.scrollToHead`
    // When opening or switching repositories in the Git Graph View, automatically scroll the view to be centered on the commit referenced by HEAD. This will only occur if the commit referenced by HEAD is within the loaded commits on the Git Graph View.
    "git-graph.openRepoToHead": false,
  
    // Open the Git Graph View to the repository containing the active Text Editor document.
    "git-graph.openToTheRepoOfTheActiveTextEditorDocument": false,
  
    // Depreciated: This setting has been renamed to `git-graph.referenceLabels.alignment`
    // Specifies how branch and tag reference labels are aligned for each commit.
    //  - Normal: Show branch & tag labels on the left of the commit message in the 'Description' column.
    //  - Branches (on the left) & Tags (on the right): Show branch labels on the left of the commit message in the 'Description' column, and tag labels on the right.
    //  - Branches (aligned to the graph) & Tags (on the right): Show branch labels aligned to the graph in the 'Graph' column, and tag labels on the right in the 'Description' column.
    "git-graph.referenceLabelAlignment": "Normal",
  
    // Specifies how branch and tag reference labels are aligned for each commit.
    //  - Normal: Show branch & tag labels on the left of the commit message in the 'Description' column.
    //  - Branches (on the left) & Tags (on the right): Show branch labels on the left of the commit message in the 'Description' column, and tag labels on the right.
    //  - Branches (aligned to the graph) & Tags (on the right): Show branch labels aligned to the graph in the 'Graph' column, and tag labels on the right in the 'Description' column.
    "git-graph.referenceLabels.alignment": "Normal",
  
    // Combine local and remote branch labels if they refer to the same branch, and are on the same commit.
    "git-graph.referenceLabels.combineLocalAndRemoteBranchLabels": true,
  
    // Fetch avatars of commit authors and committers. By enabling this setting, you consent to commit author and committer email addresses being sent GitHub, GitLab or Gravatar, depending on the repositories remote origin.
    "git-graph.repository.commits.fetchAvatars": false,
  
    // Specifies the number of commits to initially load.
    "git-graph.repository.commits.initialLoad": 300,
  
    // Specifies the number of additional commits to load when the "Load More Commits" button is pressed, or more commits are automatically loaded.
    "git-graph.repository.commits.loadMore": 100,
  
    // When the view has been scrolled to the bottom, automatically load more commits if they exist (instead of having to press the "Load More Commits" button).
    "git-graph.repository.commits.loadMoreAutomatically": true,
  
    // Display commits that aren't ancestors of the checked-out branch / commit with a muted text color. Muting will only occur if the commit referenced by HEAD is within the loaded commits on the Git Graph View.
    "git-graph.repository.commits.mute.commitsThatAreNotAncestorsOfHead": false,
  
    // Display merge commits with a muted text color.
    "git-graph.repository.commits.mute.mergeCommits": true,
  
    // Specifies the order of commits on the Git Graph View. See [git log](https://git-scm.com/docs/git-log#_commit_ordering) for more information on each order option. This can be overridden per repository via the Git Graph View's Column Header Context Menu.
    //  - date: Show commits in the commit timestamp order.
    //  - author-date: Show commits in the author timestamp order.
    //  - topo: Avoid showing commits on multiple lines of history intermixed.
    "git-graph.repository.commits.order": "date",
  
    // Show the commit's signature status to the right of the Committer in the Commit Details View (only for signed commits). Hovering over the signature icon displays a tooltip with the signature details. Requires Git (>= 2.4.0) & GPG (or equivalent) to be installed on the same machine that is running Visual Studio Code.
    "git-graph.repository.commits.showSignatureStatus": false,
  
    // Before fetching from remote(s) using the Fetch button on the Git Graph View Control Bar, remove any remote-tracking references that no longer exist on the remote(s).
    "git-graph.repository.fetchAndPrune": false,
  
    // Before fetching from remote(s) using the Fetch button on the Git Graph View Control Bar, remove any local tags that no longer exist on the remote(s). Requires Git >= 2.17.0, and the "Repository: Fetch And Prune" setting to be enabled. Caution: If you work in repositories that have multiple remotes, it is not recommended to use this setting (instead you can prune tags for a specific remote via "Fetch Remote" Dialog from the Repository Settings Widget on the Git Graph View).
    "git-graph.repository.fetchAndPruneTags": false,
  
    // Include commits only mentioned by reflogs in the Git Graph View (only applies when showing all branches). This can be overridden per repository in the Git Graph View's Repository Settings Widget.
    "git-graph.repository.includeCommitsMentionedByReflogs": false,
  
    // Automatically scroll the Git Graph View to be centered on the commit referenced by HEAD. This will only occur if the commit referenced by HEAD is within the loaded commits on the Git Graph View.
    "git-graph.repository.onLoad.scrollToHead": false,
  
    // Show the checked out branch when a repository is loaded in the Git Graph View. This setting can be used in conjunction with "Repository > On Load: Show Specific Branches". Default: false (show all branches)
    "git-graph.repository.onLoad.showCheckedOutBranch": false,
  
    // Show specific branches when a repository is loaded in the Git Graph View. Branches can be specified as follows: A local branch name (e.g. `master`), a remote-tracking branch name prefixed with "remotes/" (e.g. `remotes/origin/master`), or a glob pattern defined in `git-graph.customBranchGlobPatterns` prefixed with "--glob=" (e.g. `--glob=heads/feature/*`). This setting can be used in conjunction with "Repository > On Load: Show Checked Out Branch". Default: [] (show all branches)
    "git-graph.repository.onLoad.showSpecificBranches": [],
  
    // Only follow the first parent of commits when discovering the commits to load in the Git Graph View. See [--first-parent](https://git-scm.com/docs/git-log#Documentation/git-log.txt---first-parent) to find out more about this setting. This can be overridden per repository in the Git Graph View's Repository Settings Widget.
    "git-graph.repository.onlyFollowFirstParent": false,
  
    // Show Commits that are only referenced by tags in Git Graph.
    "git-graph.repository.showCommitsOnlyReferencedByTags": true,
  
    // Show Remote Branches in Git Graph by default. This can be overridden per repository from the Git Graph View's Control Bar.
    "git-graph.repository.showRemoteBranches": true,
  
    // Show Remote HEAD Symbolic References in Git Graph (e.g. "origin/HEAD").
    "git-graph.repository.showRemoteHeads": true,
  
    // Show Stashes in Git Graph by default. This can be overridden per repository in the Git Graph View's Repository Settings Widget.
    "git-graph.repository.showStashes": true,
  
    // Show Tags in Git Graph by default. This can be overridden per repository in the Git Graph View's Repository Settings Widget.
    "git-graph.repository.showTags": true,
  
    // Show uncommitted changes. If you work on large repositories, disabling this setting can reduce the load time of the Git Graph View.
    "git-graph.repository.showUncommittedChanges": true,
  
    // Show untracked files when viewing the uncommitted changes. If you work on large repositories, disabling this setting can reduce the load time of the Git Graph View.
    "git-graph.repository.showUntrackedFiles": true,
  
    // Enables commit signing with GPG or X.509.
    "git-graph.repository.sign.commits": false,
  
    // Enables tag signing with GPG or X.509.
    "git-graph.repository.sign.tags": false,
  
    // Respect [.mailmap](https://git-scm.com/docs/git-check-mailmap#_mapping_authors) files when displaying author & committer names and email addresses.
    "git-graph.repository.useMailmap": false,
  
    // Specifies the order that repositories are sorted in the repository dropdown on the Git Graph View (only visible when more than one repository exists in the current Visual Studio Code Workspace).
    //  - Full Path: Sort repositories alphabetically by the full path of the repository.
    //  - Name: Sort repositories alphabetically by the name of the repository.
    //  - Workspace Full Path: Sort repositories according to the Visual Studio Code Workspace Folder order, then alphabetically by the full path of the repository.
    "git-graph.repositoryDropdownOrder": "Workspace Full Path",
  
    // Specifies if the Git Graph View's Visual Studio Code context is kept when the panel is no longer visible (e.g. moved to background tab). Enabling this setting will make Git Graph load significantly faster when switching back to the Git Graph tab, however has a higher memory overhead.
    "git-graph.retainContextWhenHidden": true,
  
    // Depreciated: This setting has been renamed to `git-graph.repository.showCommitsOnlyReferencedByTags`
    // Show commits that are only referenced by tags in Git Graph.
    "git-graph.showCommitsOnlyReferencedByTags": true,
  
    // Depreciated: This setting has been renamed to `git-graph.repository.onLoad.showCheckedOutBranch`
    // Show the current branch by default when Git Graph is opened. Default: false (show all branches)
    "git-graph.showCurrentBranchByDefault": false,
  
    // Depreciated: This setting has been renamed to `git-graph.repository.commits.showSignatureStatus`
    // Show the commit's signature status to the right of the Committer in the Commit Details View (only for signed commits). Hovering over the signature icon displays a tooltip with the signature details. Requires Git (>= 2.4.0) & GPG (or equivalent) to be installed on the same machine that is running Visual Studio Code.
    "git-graph.showSignatureStatus": false,
  
    // Show a Status Bar Item that opens the Git Graph View when clicked.
    "git-graph.showStatusBarItem": true,
  
    // Depreciated: This setting has been renamed to `git-graph.repository.showTags`
    // Show Tags in Git Graph by default. This can be overridden per repository in the Git Graph View's Repository Settings Widget.
    "git-graph.showTags": true,
  
    // Depreciated: This setting has been renamed to `git-graph.repository.showUncommittedChanges`
    // Show uncommitted changes. If you work on large repositories, disabling this setting can reduce the load time of the Git Graph View.
    "git-graph.showUncommittedChanges": true,
  
    // Depreciated: This setting has been renamed to `git-graph.repository.showUntrackedFiles`
    // Show untracked files when viewing the uncommitted changes. If you work on large repositories, disabling this setting can reduce the load time of the Git Graph View.
    "git-graph.showUntrackedFiles": true,
  
    // Specifies where the "View Git Graph" action appears on the title of SCM Providers.
    //  - Inline: Show the 'View Git Graph' action on the title of SCM Providers
    //  - More Actions: Show the 'View Git Graph' action in the 'More Actions...' menu on the title of SCM Providers
    "git-graph.sourceCodeProviderIntegrationLocation": "Inline",
  
    // Specifies the colour theme of the icon displayed on the Git Graph tab.
    //  - colour: Show a colour icon which suits most Visual Studio Code colour themes
    //  - grey: Show a grey icon which suits Visual Studio Code colour themes that are predominantly grayscale
    "git-graph.tabIconColourTheme": "colour",
  
    // Depreciated: This setting has been renamed to `git-graph.repository.useMailmap`
    // Respect [.mailmap](https://git-scm.com/docs/git-check-mailmap#_mapping_authors) files when displaying author & committer names and email addresses.
    "git-graph.useMailmap": false
  
  },
  {
    // Command templates for `docker attach` / `docker exec -it` commands.
    "docker.commands.attach": "${containerCommand} exec -it ${containerId} ${shellCommand}",
  
    // Command template(s) for `docker build` commands.
    "docker.commands.build": "${containerCommand} build --pull --rm -f \"${dockerfile}\" -t ${tag} \"${context}\"",
  
    // Command templates for `docker-compose down` commands.
    "docker.commands.composeDown": [
      {
        "label": "Compose Down",
        "template": "${composeCommand} ${configurationFile} down"
      }
    ],
  
    // Command templates for `docker-compose up` commands.
    "docker.commands.composeUp": [
      {
        "label": "Compose Up",
        "template": "${composeCommand} ${configurationFile} up ${detached} ${build}"
      }
    ],
  
    // Command templates for `docker-compose up <subset>` commands.
    "docker.commands.composeUpSubset": [
      {
        "label": "Compose Up",
        "template": "${composeCommand} ${profileList} ${configurationFile} up ${detached} ${build} ${serviceList}"
      }
    ],
  
    // Command templates for `docker logs` commands.
    "docker.commands.logs": "${containerCommand} logs --tail 1000 -f ${containerId}",
  
    // Command templates for `docker run` commands.
    "docker.commands.run": "${containerCommand} run --rm -d ${exposedPorts} ${tag}",
  
    // Command templates for `docker run -it` (interactive) commands.
    "docker.commands.runInteractive": "${containerCommand} run --rm -it ${exposedPorts} ${tag}",
  
    // Command to use for Docker Compose actions (e.g. `docker-compose`, `docker compose`, etc.). If the executable path contains whitespace, it needs to be quoted appropriately. If unset, the extension will attempt to auto-detect the command to use.
    "docker.composeCommand": "",
  
    // Any secondary properties to display for a container (an array). Possible elements include: ContainerId, ContainerName, CreatedTime, FullTag, ImageId, Networks, Ports, Registry, RegistryAndPath, Repository, RepositoryName, RepositoryNameShort, RepositoryNameAndTag, State, Status, and Tag
    "docker.containers.description": [
      "ContainerName",
      "Status"
    ],
  
    // The property to use to group containers in Docker view: ContainerId, ContainerName, CreatedTime, FullTag, ImageId, Networks, Ports, Registry, RegistryAndPath, Repository, RepositoryName, RepositoryNameShort, RepositoryNameAndTag, State, Status, Tag, or None
    "docker.containers.groupBy": "Compose Project Name",
  
    // The items will be grouped by the value of this container label (e.g. `com.microsoft.created-by`)
    "docker.containers.groupByLabel": "",
  
    // The primary property to display for a container: ContainerId, ContainerName, CreatedTime, FullTag, ImageId, Networks, Ports, Registry, RegistryAndPath, Repository, RepositoryName, RepositoryNameShort, RepositoryNameAndTag, State, Status, or Tag
    "docker.containers.label": "FullTag",
  
    // The property to use to sort containers in Docker view: CreatedTime or Label
    "docker.containers.sortBy": "CreatedTime",
  
    // Any secondary properties to display for a Docker context (an array). Possible elements include: Name, Description and DockerEndpoint
    "docker.contexts.description": [
      "Description"
    ],
  
    // The primary property to display for a Docker context: Name, Description or DockerEndpoint
    "docker.contexts.label": "Name",
  
    // Show current Docker context in the status bar
    "docker.contexts.showInStatusBar": false,
  
    // Set to true to include --build option when docker-compose command is invoked
    "docker.dockerComposeBuild": true,
  
    // Set to true to include --d (detached) option when docker-compose command is invoked
    "docker.dockerComposeDetached": true,
  
    // Absolute path to Docker client executable (`docker` command). If the path contains whitespace, it needs to be quoted appropriately.
    "docker.dockerPath": "",
  
    // Whether or not to enable the preview Docker Compose Language Service. Changing requires restart to take effect.
    "docker.enableDockerComposeLanguageService": true,
  
    // Environment variables that will be applied to all VS Code terminals and to all background processes started by the Docker extension. Use for variables like `DOCKER_HOST`, etc.
    "docker.environment": {},
  
    // Build context PATH to pass to Docker build command.
    "docker.imageBuildContextPath": "",
  
    // Check for outdated base images once per Visual Studio Code session
    "docker.images.checkForOutdatedImages": true,
  
    // Any secondary properties to display for a image (an array). Possible elements include: CreatedTime, FullTag, ImageId, Registry, RegistryAndPath, Repository, RepositoryName, RepositoryNameShort, RepositoryNameAndTag, Tag, and Size
    "docker.images.description": [
      "CreatedTime"
    ],
  
    // The property to use to group images in Docker view: CreatedTime, FullTag, ImageId, None, Registry, RegistryAndPath, Repository, RepositoryName, RepositoryNameShort, RepositoryNameAndTag, or Tag
    "docker.images.groupBy": "Repository",
  
    // The primary property to display for a image: CreatedTime, FullTag, ImageId, Registry, RegistryAndPath, Repository, RepositoryName, RepositoryNameShort, RepositoryNameAndTag, Tag, or Size
    "docker.images.label": "Tag",
  
    // The property to use to sort images in Docker view: CreatedTime, Label, or Size
    "docker.images.sortBy": "CreatedTime",
  
    // Controls the diagnostic severity for the deprecated MAINTAINER instruction
    "docker.languageserver.diagnostics.deprecatedMaintainer": "warning",
  
    // Controls the diagnostic severity for parser directives that are not written in lowercase
    "docker.languageserver.diagnostics.directiveCasing": "warning",
  
    // Controls the diagnostic severity for flagging empty continuation lines found in instructions that span multiple lines
    "docker.languageserver.diagnostics.emptyContinuationLine": "warning",
  
    // Controls the diagnostic severity for instructions that are not written in uppercase
    "docker.languageserver.diagnostics.instructionCasing": "warning",
  
    // Controls the diagnostic severity for flagging a Dockerfile with multiple CMD instructions
    "docker.languageserver.diagnostics.instructionCmdMultiple": "warning",
  
    // Controls the diagnostic severity for flagging a Dockerfile with multiple ENTRYPOINT instructions
    "docker.languageserver.diagnostics.instructionEntrypointMultiple": "warning",
  
    // Controls the diagnostic severity for flagging a Dockerfile with multiple HEALTHCHECK instructions
    "docker.languageserver.diagnostics.instructionHealthcheckMultiple": "warning",
  
    // Controls the diagnostic severity for JSON instructions that are written incorrectly with single quotes
    "docker.languageserver.diagnostics.instructionJSONInSingleQuotes": "warning",
  
    // Controls the diagnostic severity for WORKDIR instructions that do not point to an absolute path
    "docker.languageserver.diagnostics.instructionWorkdirRelative": "warning",
  
    // Controls whether the Dockerfile formatter should ignore instructions that span multiple lines when formatting
    "docker.languageserver.formatter.ignoreMultilineInstructions": false,
  
    // Any secondary properties to display for a Docker network (an array). Possible elements include CreatedTime, NetworkDriver, NetworkId, and NetworkName
    "docker.networks.description": [
      "NetworkDriver",
      "CreatedTime"
    ],
  
    // The property to use to group networks in Docker view: CreatedTime, NetworkDriver, NetworkId, NetworkName, or None
    "docker.networks.groupBy": "None",
  
    // The primary property to display for a Docker network: CreatedTime, NetworkDriver, NetworkId, or NetworkName
    "docker.networks.label": "NetworkName",
  
    // Show the built-in networks in the explorer.
    "docker.networks.showBuiltInNetworks": true,
  
    // The property to use to sort networks in Docker view: CreatedTime or Label
    "docker.networks.sortBy": "CreatedTime",
  
    // Prompt for registry selection if the image is not explicitly tagged.
    "docker.promptForRegistryWhenPushingImages": true,
  
    // The path to use for scaffolding templates.
    "docker.scaffolding.templatePath": "",
  
    // Set to true to prompt to switch from "UI" extension mode to "Workspace" extension mode if an operation is not supported in UI mode.
    "docker.showRemoteWorkspaceWarning": true,
  
    // Set to true to truncate long image and container registry paths in Docker view
    "docker.truncateLongRegistryPaths": false,
  
    // Maximum length of a registry paths displayed in Docker view, including ellipsis. The truncateLongRegistryPaths setting must be set to true for truncateMaxLength setting to be effective.
    "docker.truncateMaxLength": 10,
  
    // Any secondary properties to display for a Docker volume (an array). Possible values include CreatedTime and VolumeName
    "docker.volumes.description": [
      "CreatedTime"
    ],
  
    // The property to use to group volumes in Docker view: CreatedTime, VolumeName, or None
    "docker.volumes.groupBy": "None",
  
    // The primary property to display for a Docker volume: CreatedTime or VolumeName
    "docker.volumes.label": "VolumeName",
  
    // The property to use to sort volumes in Docker view: CreatedTime or Label
    "docker.volumes.sortBy": "CreatedTime"
  
  },
  {
    // If you'd like to continue using a .NET path that is not meant to be used for an extension and may cause instability (please read above about the existingDotnetPath setting) then set this to true and restart.
    "dotnetAcquisitionExtension.allowInvalidPaths": false,
  
    // To improve performance, the results of checking .NET Installations may be cached. If you're facing issues with an install not being detected, try setting this to 0.5, or 0; or increasing the number to improve performance. Restart to change.
    "dotnetAcquisitionExtension.cacheTimeToLiveMultiplier": 1,
  
    // Enable Preview Features for the Extension. Restart VS Code to apply changes.
    "dotnetAcquisitionExtension.enablePreviewFeatures": false,
  
    // Enable Telemetry for the .NET Install Tool. Restart VS Code to apply changes.
    "dotnetAcquisitionExtension.enableTelemetry": true,
  
    // The path to an existing .NET host executable for an extension's code to run under, not for your project to run under.
    // Restart VS Code to apply changes.
    // 
    // ⚠️ This is NOT the .NET Runtime that your project will use to run. Extensions such as `C#`, `C# DevKit`, and more have components written in .NET. This .NET PATH is the `dotnet.exe` that these extensions will use to run their code, not your code.
    // 
    // Using a path value in which .NET does not meet the requirements of a specific extension will cause that extension to fail.
    // 
    // 🚀 The version of .NET that is used for your project is determined by the .NET host, or dotnet.exe. The .NET host picks a runtime based on your project. To use a specific version of .NET for your project, install the .NET SDK using the `.NET Install Tool - Install SDK System-Wide` command, install .NET manually using [our instructions](https://dotnet.microsoft.com/download), or edit your PATH environment variable to point to a `dotnet.exe` that has an `/sdk/` folder with only one SDK.
    "dotnetAcquisitionExtension.existingDotnetPath": [],
  
    // Timeout for installing .NET in seconds.
    "dotnetAcquisitionExtension.installTimeoutValue": 600,
  
    // URL to a proxy if you use one, such as: https://proxy:port
    "dotnetAcquisitionExtension.proxyUrl": "",
  
    // The path of the preexisting .NET Runtime you'd like to use for ALL extensions. Restart VS Code to apply changes.
    "dotnetAcquisitionExtension.sharedExistingDotnetPath": ""
  
  },
  {
    // Arguments passed to Black to format Python files. Each argument should be provided as a separate string in the array. 
    //  Example: 
    //  `"black-formatter.args" = ["--config", "<file>"]`
    "black-formatter.args": [],
  
    // Sets the current working directory used to format Python files with Black. By default, it uses the root directory of the workspace `${workspaceFolder}`. You can set it to `${fileDirname}` to use the parent folder of the file being formatted as the working directory for Black.
    "black-formatter.cwd": "${workspaceFolder}",
  
    // Defines which Black formatter binary to be used to format Python files. When set to `useBundled`, the extension will use the Black formatter binary that is shipped with the extension. When set to `fromEnvironment`, the extension will attempt to use the Black formatter binary and all dependencies that are available in the currently selected environment. **Note**: If the extension can't find a valid Black formatter binary in the selected environment, it will fallback to using the binary that is shipped with the extension. The `black-formatter.path` setting takes precedence and overrides the behavior of `black-formatter.importStrategy`.
    //  - fromEnvironment: Use the Black binary from the selected Python environment. If the extension fails to find a valid Black binary, it will fallback to using the bundled version of Black.
    //  - useBundled: Always use the bundled version of Black to format Python files.
    "black-formatter.importStrategy": "useBundled",
  
    // Path to a Python executable or a command that will be used to launch the Black server and any subprocess. Accepts an array of a single or multiple strings. When set to `[]`, the extension will use the path to the selected Python interpreter. If passing a command, each argument should be provided as a separate string in the array.
    "black-formatter.interpreter": [],
  
    // Path or command to be used by the extension to format Python files with Black. Accepts an array of a single or multiple strings. If passing a command, each argument should be provided as a separate string in the array. If set to `["black"]`, it will use the version of Black available in the `PATH` environment variable. Note: Using this option may slowdown formatting. 
    //   Examples: 
    //   - `["~/global_env/black"]` 
    //   - `["conda", "run", "-n", "lint_env", "python", "-m", "black"]`
    "black-formatter.path": [],
  
    // Selects the transport protocol to be used by the Black server. When set to `stdio`, the extension will use the standard input/output streams to communicate with the Black server. When set to `pipe`, the extension will use a named pipe (on Windows) or Unix Domain Socket (on Linux/Mac) to communicate with the Black server. The `stdio` transport protocol is the default and recommended option for most users.
    //  - stdio: Use the standard input/output streams to communicate with the Black server.
    //  - pipe: Use a named pipe (on windows) and Unix Domain Socket (on linux/mac) to communicate with the Black server.
    "black-formatter.serverTransport": "stdio",
  
    // Controls when notifications are shown by this extension.
    //  - always: Notifications are show for anything that the server chooses to show when formatting Python files.
    //  - off: All notifications are turned off, any errors or warnings when formatting Python files are still available in the logs.
    //  - onError: Notifications are shown only in the case of an error when formatting Python files.
    //  - onWarning: Notifications are shown for any errors and warnings when formatting Python files.
    "black-formatter.showNotifications": "off"
  
  },
  {
    // When debugging only step through user-written code. Disable this to allow stepping into library code.
    "debugpy.debugJustMyCode": true,
  
    // Whether to display inline values in the editor while debugging.
    "debugpy.showPythonInlineValues": false
  
  },
  {
    // This setting specifies a folder that contains additional or replacement spec files used for analysis.
    "gather.gatherSpecPath": "",
  
    // Gather code to a python script rather than a notebook.
    "gather.gatherToScript": false
  
  },
  {
    // Arguments passed in. Each argument is a separate string in the array.
    "isort.args": [],
  
    // Controls whether to run `isort` and report import sort issues.
    "isort.check": false,
  
    // Defines where `isort` is imported from. This setting may be ignored if `isort.path` is set.
    //  - useBundled: Always use the bundled version of `isort`.
    //  - fromEnvironment: Use `isort` from environment, fallback to bundled version only if `isort` is not available in the environment.
    "isort.importStrategy": "useBundled",
  
    // When set to a path to Python executable, extension will use that to launch the server and any subprocess.
    "isort.interpreter": [],
  
    // When set to a path to `isort` binary, extension will use that for linting. NOTE: Using this option may slowdown linting.
    "isort.path": [],
  
    // Controls whether to run `isort` in server mode. Setting this to false disables import sorting via Code Actions or Organize Imports, and only the `isort: Sort Imports` command is supported.
    "isort.serverEnabled": true,
  
    // Mapping from severity of `isort` message type to severity shown in problem window.
    "isort.severity": {
      "W": "Warning",
      "E": "Hint"
    },
  
    // Controls when notifications are shown by this extension.
    //  - off: All notifications are turned off, any errors or warnings are still available in the logs.
    //  - onError: Notifications are shown only in the case of an error.
    //  - onWarning: Notifications are shown for errors and warnings.
    //  - always: Notifications are shown for anything that the server chooses to show.
    "isort.showNotifications": "off"
  
  },
  {
    // Arguments passed to Pylint for linting Python files. Each argument should be provided as a separate string in the array. 
    //  Examples:  
    // - `"pylint.args": ["--rcfile=<file>"]` 
    //  - `"pylint.args": ["--disable=C0111", "--max-line-length=120"]`
    "pylint.args": [],
  
    // Sets the current working directory used to lint Python files with Pylint. By default, it uses the root directory of the workspace `${workspaceFolder}`. You can set it to `${fileDirname}` to use the parent folder of the file being linted as the working directory for Pylint.
    "pylint.cwd": "${workspaceFolder}",
  
    // Enable/disable linting Python files with Pylint.
    "pylint.enabled": true,
  
    // Configure [glob patterns](https://docs.python.org/3/library/fnmatch.html) as supported by the fnmatch Python library to exclude files or folders from being linted with Pylint.
    "pylint.ignorePatterns": [],
  
    // Defines which Pylint binary to be used to lint Python files. When set to `useBundled`, the extension will use the Pylint binary that is shipped with the extension. When set to `fromEnvironment`, the extension will attempt to use the Pylint binary and all dependencies that are available in the currently selected environment. Note: If the extension can't find a valid Pylint binary in the selected environment, it will fallback to using the Pylint binary that is shipped with the extension The `pylint.path` setting may also be ignored when this setting is set to `fromEnvironment`.
    //  - useBundled: Always use the bundled version of Pylint shipped with the extension.
    //  - fromEnvironment: Use Pylint from the selected environment. If the extension fails to find a valid Pylint binary, it will fallback to using the bundled version of Pylint.
    "pylint.importStrategy": "useBundled",
  
    // Path to a Python executable or a command that will be used to launch the Pylint server and any subprocess. Accepts an array of a single or multiple strings.  When set to `[]`, the extension will use the path to the selected Python interpreter. If passing a command, each argument should be provided as a separate string in the array.
    "pylint.interpreter": [],
  
    // Enable linting Python files with Pylint as you type.
    "pylint.lintOnChange": false,
  
    // Path or command to be used by the extension to lint Python files with Pylint. Accepts an array of a single or multiple strings. If passing a command, each argument should be provided as a separate string in the array. If set to `["pylint"]`, it will use the version of Pylint available in the `PATH` environment variable. Note: Using this option may slowdown linting. 
    // Examples: 
    // - `["~/global_env/pylint"]` 
    // - `["conda", "run", "-n", "lint_env", "python", "-m", "pylint"]` 
    //  `["pylint"]`
    "pylint.path": [],
  
    // Mapping of Pylint's message types to VS Code's diagnostic severity levels as displayed in the Problems window. You can also use it to override specific Pylint error codes. 
    //  Example:</br> `{"convention": "Information", "error": "Error", "fatal": "Error", "refactor": "Hint", "warning": "Warning", "W0611": "Error", "undefined-variable": "Warning"}`
    "pylint.severity": {
      "convention": "Information",
      "error": "Error",
      "fatal": "Error",
      "refactor": "Hint",
      "warning": "Warning",
      "info": "Information"
    },
  
    // Controls when notifications are shown by this extension.  Accepted values are `onError`, `onWarning`, `always` and `off`.
    //  - off: Never display a notification. Any errors or warning are still available in the logs.
    //  - onError: Show notifications for errors.
    //  - onWarning: Show notifications for errors and warnings.
    //  - always: Show all notifications.
    "pylint.showNotifications": "off"
  
  },
  {
    // Path to the State Tool executable for ActiveState runtimes (version 0.36+).
    "python.activeStateToolPath": "state",
  
    // List of paths to libraries and the like that need to be imported by auto complete engine. E.g. when using Google App SDK, the paths are not in system path, hence need to be added into this list.
    "python.autoComplete.extraPaths": [],
  
    // Path to the conda executable to use for activation (version 4.4+).
    "python.condaPath": "",
  
    // Show or hide Create Environment button in the editor for `requirements.txt` or other dependency files.
    "python.createEnvironment.contentButton": "hide",
  
    // Detect if environment creation is required for the current project
    "python.createEnvironment.trigger": "prompt",
  
    // Path to default Python to use when extension loads up for the first time, no longer used once an interpreter is selected for the workspace. See [here](https://aka.ms/AAfekmf) to understand when this is used
    "python.defaultInterpreterPath": "python",
  
    // Absolute path to a file containing environment variable definitions.
    "python.envFile": "${workspaceFolder}/.env",
  
    // Enables A/B tests experiments in the Python extension. If enabled, you may get included in proposed enhancements and/or features.
    "python.experiments.enabled": true,
  
    // List of experiments to opt into. If empty, user is assigned the default experiment groups. See [here](https://github.com/microsoft/vscode-python/wiki/AB-Experiments) for more details.
    "python.experiments.optInto": [],
  
    // List of experiments to opt out of. If empty, user is assigned the default experiment groups. See [here](https://github.com/microsoft/vscode-python/wiki/AB-Experiments) for more details.
    "python.experiments.optOutFrom": [],
  
    // Whether to install Python modules globally when not using an environment.
    "python.globalModuleInstallation": false,
  
    // Controls when to display information of selected interpreter in the status bar.
    //  - never: Never display information.
    //  - onPythonRelated: Only display information if Python-related files are opened.
    //  - always: Always display information.
    "python.interpreter.infoVisibility": "onPythonRelated",
  
    // Defines type of the language server.
    //  - Default: Automatically select a language server: Pylance if installed and available, otherwise fallback to Jedi.
    //  - Jedi: Use Jedi behind the Language Server Protocol (LSP) as a language server.
    //  - Pylance: Use Pylance as a language server.
    //  - None: Disable language server capabilities.
    "python.languageServer": "None",
  
    // [Experimental] Select implementation of environment locators. This is an experimental setting while we test native environment location.
    "python.locator": "js",
  
    // This setting is deprecated. Please use command `Developer: Set Log Level...` to set logging level.
    // The logging level the extension logs at, defaults to 'error'
    "python.logging.level": "error",
  
    // Set severity of missing packages in requirements.txt or pyproject.toml
    "python.missingPackage.severity": "Hint",
  
    // Path to the pipenv executable to use for activation.
    "python.pipenvPath": "pipenv",
  
    // Path to the pixi executable.
    "python.pixiToolPath": "pixi",
  
    // Path to the poetry executable.
    "python.poetryPath": "poetry",
  
    // Toggle Smart Send for the Python REPL. Smart Send enables sending the smallest runnable block of code to the REPL on Shift+Enter and moves the cursor accordingly.
    "python.REPL.enableREPLSmartSend": true,
  
    // Toggle to provide variables for the REPL variable view for the native REPL.
    "python.REPL.provideVariables": true,
  
    // Toggle to send code to Python REPL instead of the terminal on execution. Turning this on will change the behavior for both Smart Send and Run Selection/Line in the Context Menu.
    "python.REPL.sendToNativeREPL": false,
  
    // Activate Python Environment in the current Terminal on load of the Extension.
    "python.terminal.activateEnvInCurrentTerminal": false,
  
    // Activate Python Environment in all Terminals created.
    "python.terminal.activateEnvironment": true,
  
    // When executing a file in the terminal, whether to use execute in the file's directory, instead of the current open folder.
    "python.terminal.executeInFileDir": false,
  
    // When launching a python terminal, whether to focus the cursor on the terminal.
    "python.terminal.focusAfterLaunch": false,
  
    // Python launch arguments to use when executing a file in the terminal.
    "python.terminal.launchArgs": [],
  
    // Enable [shell integration](https://code.visualstudio.com/docs/terminal/shell-integration) for the terminals running python. Shell integration enhances the terminal experience by enabling command decorations, run recent command, improving accessibility among other things.
    "python.terminal.shellIntegration.enabled": false,
  
    // Enable auto run test discovery when saving a test file.
    "python.testing.autoTestDiscoverOnSaveEnabled": true,
  
    // Glob pattern used to determine which files are used by autoTestDiscoverOnSaveEnabled.
    "python.testing.autoTestDiscoverOnSavePattern": "**/*.py",
  
    // Optional working directory for tests.
    "python.testing.cwd": null,
  
    // Port number used for debugging of tests.
    "python.testing.debugPort": 3000,
  
    // Prompt to configure a test framework if potential tests directories are discovered.
    "python.testing.promptToConfigure": true,
  
    // Arguments passed in. Each argument is a separate item in the array.
    "python.testing.pytestArgs": [],
  
    // Enable testing using pytest.
    "python.testing.pytestEnabled": false,
  
    // Path to pytest. You can use a custom version of pytest by modifying this setting to include the full path.
    "python.testing.pytestPath": "pytest",
  
    // Arguments passed in. Each argument is a separate item in the array.
    "python.testing.unittestArgs": [
      "-v",
      "-s",
      ".",
      "-p",
      "*test*.py"
    ],
  
    // Enable testing using unittest.
    "python.testing.unittestEnabled": false,
  
    // Folders in your home directory to look into for virtual environments (supports pyenv, direnv and virtualenvwrapper by default).
    "python.venvFolders": []
  
  },
  {
    // Allow for connecting the Interactive window to a https Jupyter server that does not have valid certificates. This can be a security risk, so only use for known and trusted servers.
    "jupyter.allowUnauthorizedRemoteConnection": false,
  
    // Warn the user before restarting a kernel.
    "jupyter.askForKernelRestart": true,
  
    // Warn the user before trying to open really large data frames.
    "jupyter.askForLargeDataFrames": true,
  
    // Mapping of characters which trigger auto completion in a Jupyter Kernel language. Following is an example of trigger characters for rust and julia kernel languages:
    // ```json 
    // {
    //   "julia": ["."],
    //   "rust": [".",":"] 
    // }
    // ```
    "jupyter.completionTriggerCharacters": {
      "bash": [
        "$",
        "{"
      ],
      "java": [
        ".",
        "@",
        "#"
      ],
      "javascript": [
        ".",
        "\"",
        "'",
        "/",
        "@"
      ],
      "python": [
        ".",
        "%",
        "'",
        "\""
      ],
      "julia": [
        "."
      ],
      "r": [
        "[",
        "(",
        ",",
        "$",
        "@",
        "\"",
        "'"
      ],
      "rust": [
        ".",
        ":"
      ],
      "scala": [
        "."
      ],
      "typescript": [
        ".",
        "\"",
        "'",
        "/",
        "@",
        "<"
      ]
    },
  
    // When debugging, only step through user-written code. Disable this to allow stepping into library code.
    "jupyter.debugJustMyCode": true,
  
    // Path to debugpy bits for debugging cells.
    "jupyter.debugpyDistPath": "",
  
    // When true, disables Jupyter from being automatically started for you. You must instead run a cell to start Jupyter.
    "jupyter.disableJupyterAutoStart": false,
  
    // This setting has been deprecated in favor of jupyter.enableExtendedPythonKernelCompletions.
    // Enables Jedi support for extended IntelliSense completions in running Python Jupyter kernels for Python (see this [setting](https://ipython.readthedocs.io/en/stable/config/options/terminal.html?highlight=use_jedi#configtrait-Completer.use_jedi)). This can greatly impact notebook cell execution performance. Use with caution.
    "jupyter.enableExtendedKernelCompletions": false,
  
    // Enables Jedi support for extended IntelliSense completions in running Python Jupyter kernels for Python (see this [setting](https://ipython.readthedocs.io/en/stable/config/options/terminal.html?highlight=use_jedi#configtrait-Completer.use_jedi)). This can greatly impact notebook cell execution performance. Use with caution.
    "jupyter.enableExtendedPythonKernelCompletions": false,
  
    // Enable code completions in Notebooks and Interactive Windows using results from the associated Jupyter Kernel.
    "jupyter.enableKernelCompletions": true,
  
    // Add PYTHONNOUSERSITE to kernels before starting. This prevents global/user site-packages from being used in the PYTHONPATH of the kernel.
    "jupyter.excludeUserSitePackages": false,
  
    // Experimental feature to enable execution analysis in notebooks
    "jupyter.executionAnalysis.enabled": false,
  
    // Enables/disables A/B tests.
    "jupyter.experiments.enabled": true,
  
    // List of experiment to opt into. If empty, user is assigned the default experiment groups. [Learn more](https://github.com/microsoft/vscode-jupyter/wiki/Experiments).
    "jupyter.experiments.optInto": [],
  
    // List of experiment to opt out of. If empty, user is assigned the default experiment groups. [Learn more](https://github.com/microsoft/vscode-jupyter/wiki/Experiments).
    "jupyter.experiments.optOutFrom": [],
  
    // Enable exporting a python file into a jupyter notebook and run all cells when doing so.
    "jupyter.exportWithOutputEnabled": false,
  
    // This setting has been deprecated and will be removed in a future release.
    // Inject stack frame links into the stored traceback for the notebook.
    "jupyter.formatStackTraces": false,
  
    // Regular expression used to identify code cells. All code until the next match is considered part of this cell.
    "jupyter.interactiveWindow.cellMarker.codeRegex": "^(#\\s*%%|#\\s*\\<codecell\\>|#\\s*In\\[\\d*?\\]|#\\s*In\\[ \\])",
  
    // Draw a highlight behind the currently active cell, or all cells, in a python file.
    "jupyter.interactiveWindow.cellMarker.decorateCells": "currentCell",
  
    // Cell marker used for delineating a cell in a python file.
    "jupyter.interactiveWindow.cellMarker.default": "# %%",
  
    // Regular expression used to identify markdown cells. All comments after this expression are considered part of the markdown.
    "jupyter.interactiveWindow.cellMarker.markdownRegex": "^(#\\s*%%\\s*\\[markdown\\]|#\\s*\\<markdowncell\\>)",
  
    // Set of commands to put as code lens above a cell.
    "jupyter.interactiveWindow.codeLens.commands": "jupyter.runcell, jupyter.runallcellsabove, jupyter.debugcell",
  
    // Set of debug commands to put as code lens above a cell while debugging.
    "jupyter.interactiveWindow.codeLens.debugCommands": "jupyter.debugcontinue, jupyter.debugstop, jupyter.debugstepover",
  
    // Enables code lens for 'cells' in a python file.
    "jupyter.interactiveWindow.codeLens.enable": true,
  
    // After running a cell, add a 'Goto' code lens on the cell. Note, disabling all code lenses disables this code lens as well.
    "jupyter.interactiveWindow.codeLens.enableGotoCell": true,
  
    // Behavior of the Interactive Window. 'perFile' will create a new interactive window for every file that runs a cell. 'single' allows a single window. 'multiple' allows the creation of multiple.
    "jupyter.interactiveWindow.creationMode": "multiple",
  
    // Experimental. The interactive window will use a notebook as the editor model.
    "jupyter.interactiveWindow.notebookRepl": false,
  
    // A file run in the Interactive Window will be run in individual cells if it has them.
    "jupyter.interactiveWindow.splitRunFileIntoCells": true,
  
    // Append a new empty cell to an interactive window file on running the currently last cell.
    "jupyter.interactiveWindow.textEditor.autoAddNewCell": true,
  
    // Enables moving to the next cell when clicking on a 'Run Cell' code lens.
    "jupyter.interactiveWindow.textEditor.autoMoveToNextCell": true,
  
    // Enable folding regions for code cells in Python files. This setting requires a reload of VS Code.
    "jupyter.interactiveWindow.textEditor.cellFolding": true,
  
    // When pressing shift+enter, send selected code in a Python file to the Jupyter interactive window as opposed to the Python terminal.
    "jupyter.interactiveWindow.textEditor.executeSelection": false,
  
    // Uncomment shell assignments (#!), line magic (#!%) and cell magic (#!%%) when parsing code cells.
    "jupyter.interactiveWindow.textEditor.magicCommandsAsComments": false,
  
    // Selected text will be normalized before it is executed in the Interactive Window.
    "jupyter.interactiveWindow.textEditor.normalizeSelection": false,
  
    // Where to open an Interactive Window that is not associated with a python file. 'beside' will open the interactive window to the right of the active editor. 'active' will open the interactive window in place of the active editor. 'secondGroup' will open the interactive window in the second editor group.
    "jupyter.interactiveWindow.viewColumn": "secondGroup",
  
    // If and when a Jupyter server is started, these arguments will be passed to into the Jupyter Notebook CLI. By default this list is generated by the Jupyter Extension.
    "jupyter.jupyterCommandLineArguments": [],
  
    // Amount of time (in ms) to wait for an interrupt before asking to restart the Jupyter kernel.
    "jupyter.jupyterInterruptTimeout": 10000,
  
    // Number of times to attempt to connect to the Jupyter Notebook
    "jupyter.jupyterLaunchRetries": 3,
  
    // Amount of time (in ms) to wait for the Jupyter Notebook server to start.
    "jupyter.jupyterLaunchTimeout": 60000,
  
    // List of Python environments to be excluded from the Kernel picker.
    "jupyter.kernels.excludePythonEnvironments": [],
  
    // Enter fully qualified paths to Kernel specification files that are to be trusted. E.g. 'C:\Program Data\Jupyter\kernels\python3\kernel.json'.  
    // **Note**: Kernels can execute code with user privileges. Click [here](https://aka.ms/JupyterTrustedKernelPaths) for further details.
    "jupyter.kernels.trusted": [],
  
    // The logging level the extension logs at.
    //  - off: No messages are logged with this level.
    //  - error: Only error messages are logged with this level.
    //  - warn: Warning and error messages are logged with this level.
    //  - info: Information, warning and error messages are logged with this level.
    //  - debug: Debug and higher severity messages are logged with this level.
    //  - trace: All messages are logged with this level.
    "jupyter.logging.level": "info",
  
    // Creates separate output panels for kernels/jupyter server console output
    "jupyter.logKernelOutputSeparately": false,
  
    // Set the root directory for Jupyter Notebooks and the Interactive Window running locally.  
    // 
    // **Note:** This does not apply to Remote Jupyter Kernels.
    "jupyter.notebookFileRoot": "${fileDirname}",
  
    // This setting has been deprecated in favor of jupyter.completionTriggerCharacters.
    // Characters which trigger auto completion on a python jupyter kernel.
    "jupyter.pythonCompletionTriggerCharacters": ".%'\"",
  
    // The method to use when exporting a notebook to a Python file. 'direct' will copy over the code directly as is. 'commentMagics' will comment out lines starting with line magics (%), cell magics (%%), and shell commands(!). 'nbconvert' will install nbconvert and use that for the conversion which can translate iPython syntax into Python syntax.
    "jupyter.pythonExportMethod": "direct",
  
    // A series of Python instructions or iPython magic commands. Can be either an array of strings or a single string with commands separated by '\n'. Commands will be silently executed whenever a Jupyter kernel is started or restarted. For instance, set this to '%load_ext autoreload
    // %autoreload 2' to automatically reload changes made to imported files without having to restart the Jupyter Kernel.
    "jupyter.runStartupCommands": "",
  
    // Show the Outline button in the Jupyter notebook toolbar.
    "jupyter.showOutlineButtonInNotebookToolbar": true,
  
    // Bring up the Variable View when starting a Run by Line session.
    "jupyter.showVariableViewWhenDebugging": false,
  
    // When debugging a cell, stop on the first line.
    "jupyter.stopOnFirstLineWhileDebugging": true,
  
    // In the Interactive window and Notebook Editor theme matplotlib outputs to match the VS Code editor theme.
    "jupyter.themeMatplotlibPlots": false,
  
    // When running Jupyter locally, create a default empty Jupyter config
    "jupyter.useDefaultConfigForJupyter": true,
  
    // Types to exclude from showing in the Interactive variable explorer
    "jupyter.variableExplorerExclude": "module;function;builtin_function_or_method;ABCMeta;type;ModelMetaclass",
  
    // Defines the location and order of the sources where scripts files for Widgets are downloaded from (e.g. ipywidgest, bqplot, beakerx, ipyleaflet, etc). Not selecting any of these could result in widgets not rendering or function correctly. See [here](https://aka.ms/PVSCIPyWidgets) for more information. Once updated you will need to restart the Kernel.
    //  - jsdelivr.com: Loads widget (javascript) scripts from https://www.jsdelivr.com/
    //  - unpkg.com: Loads widget (javascript) scripts from https://unpkg.com/
    "jupyter.widgetScriptSources": []
  
  },
  {
    // The logging level the extension logs at.
    "jupyterhub.log": "error"
  
  },
  {
    // Level of help to provide
    "jupyter.contextualHelp.detailLevel": "normal",
  
    // Enable the contextual help feature.
    "jupyter.contextualHelp.enabled": true,
  
    // Provides the ability to inspect messages sent to and from the kernel.
    "jupyter.inspectKernelMessages.enabled": false,
  
    // Enable the Kernel Management feature providing ability to start/stop/interrupt kernels.
    "jupyter.kernelManagement.enabled": true,
  
    // Enable the notebook run groups feature to provide commands to run groups of notebook cells.
    "jupyter.notebookRunGroups.enabled": true,
  
    // Count of run groups to show (0-3).
    "jupyter.notebookRunGroups.groupCount": 2,
  
    // Display group run icons in the cell execute dropdown.
    "jupyter.notebookRunGroups.runIconsInExecute": true,
  
    // Display group run icons on each cell toolbar.
    "jupyter.notebookRunGroups.runIconsOnCell": false,
  
    // Display group run icons on the global notebook editor toolbar.
    "jupyter.notebookRunGroups.runIconsOnEditorToolbar": true
  
  },
  {
    // Controls the auto-completion provider. If `disabled` and you want word-based completion, you will also need to set `"[cpp]": {"editor.wordBasedSuggestions": <value>}` (and similarly for `c` and `cuda-cpp` languages).
    //  - default: Uses the active IntelliSense engine.
    //  - disabled: Uses the word-based completion provided by Visual Studio Code.
    "C_Cpp.autocomplete": "default",
  
    // If `true`, autocomplete will automatically add `(` after function calls, in which case `)` may also be added, depending on the value of the `editor.autoClosingBrackets` setting.
    "C_Cpp.autocompleteAddParentheses": false,
  
    // If enabled, code folding ranges are provided by the language server.
    "C_Cpp.codeFolding": "enabled",
  
    // Determines whether pop up notifications will be shown when a configuration provider extension is unable to provide a configuration for a source file.
    "C_Cpp.configurationWarnings": "enabled",
  
    // The value to use in a configuration if `browse.databaseFilename` is either not specified or set to `${default}`.
    "C_Cpp.default.browse.databaseFilename": "",
  
    // The value to use in a configuration if `browse.limitSymbolsToIncludedHeaders` is either not specified or set to `${default}`.
    "C_Cpp.default.browse.limitSymbolsToIncludedHeaders": true,
  
    // The value to use in a configuration if `browse.path` is not specified, or the values to insert if `${default}` is present in `browse.path`.
    "C_Cpp.default.browse.path": null,
  
    // The value to use in a configuration if `compileCommands` is either not specified, or set to `${default}`.
    "C_Cpp.default.compileCommands": "",
  
    // The value to use in configuration if `compilerArgs` is either not specified or set to `${default}`.
    "C_Cpp.default.compilerArgs": [],
  
    // The value to use in a configuration if `compilerPath` is either not specified or set to `${default}`.
    "C_Cpp.default.compilerPath": null,
  
    // The value to use in a configuration if `configurationProvider` is either not specified or set to `${default}`.
    "C_Cpp.default.configurationProvider": "",
  
    // The value to use in a configuration if `cppStandard` is either not specified or set to `${default}`.
    "C_Cpp.default.cppStandard": "",
  
    // The value to use in a configuration if `cStandard` is either not specified or set to `${default}`.
    "C_Cpp.default.cStandard": "",
  
    // The value to use in a configuration if `customConfigurationVariables` is not set, or the values to insert if `${default}` is present as a key in `customConfigurationVariables`.
    "C_Cpp.default.customConfigurationVariables": null,
  
    // The value to use in a configuration if `defines` is not specified, or the values to insert if `${default}` is present in `defines`.
    "C_Cpp.default.defines": [],
  
    // The value to use in a configuration if `dotConfig` is not specified, or the value to insert if `${default}` is present in `dotConfig`.
    "C_Cpp.default.dotConfig": "",
  
    // Controls whether the extension will report errors detected in `c_cpp_properties.json`.
    "C_Cpp.default.enableConfigurationSquiggles": true,
  
    // The value to use in a configuration if `forcedInclude` is not specified, or the values to insert if `${default}` is present in `forcedInclude`.
    "C_Cpp.default.forcedInclude": [],
  
    // The value to use in a configuration if `includePath` is not specified in `c_cpp_properties.json`. If `includePath` is specified, add `${default}` to the array to insert the values from this setting. Usually, this should not include system includes; instead, set `C_Cpp.default.compilerPath`.
    "C_Cpp.default.includePath": [],
  
    // The value to use in a configuration if `intelliSenseMode` is either not specified or set to `${default}`.
    "C_Cpp.default.intelliSenseMode": "",
  
    // The value to use in a configuration if `macFrameworkPath` is not specified, or the values to insert if `${default}` is present in `macFrameworkPath`.
    "C_Cpp.default.macFrameworkPath": [],
  
    // Set to `true` to merge include paths, defines, and forced includes with those from a configuration provider.
    "C_Cpp.default.mergeConfigurations": false,
  
    // The value to use for the system include path. If set, it overrides the system include path acquired via `compilerPath` and `compileCommands` settings.
    "C_Cpp.default.systemIncludePath": [],
  
    // Version of the Windows SDK include path to use on Windows, e.g. `10.0.17134.0`.
    "C_Cpp.default.windowsSdkVersion": "",
  
    // Controls whether inactive preprocessor blocks are colored differently than active code. This setting has no effect if IntelliSense is disabled or if using the Default High Contrast theme.
    "C_Cpp.dimInactiveRegions": true,
  
    // If enabled, code is colorized based on IntelliSense. This setting only applies if `C_Cpp.intelliSenseEngine` is set to `default`.
    "C_Cpp.enhancedColorization": "enabled",
  
    // Controls whether suspected compile errors detected by the IntelliSense engine will be reported back to the editor. It also controls whether code analysis warnings are reported if includes can't be found. This setting is ignored by the Tag Parser engine.
    "C_Cpp.errorSquiggles": "enabledIfIncludesResolve",
  
    // Instructs the extension when to use the `files.exclude#` (and `#C_Cpp.files.exclude#`) setting when determining which files should be added to the code navigation database while traversing through the paths in the `browse.path` array. If your `#files.exclude` setting only contains folders, then `checkFolders` is the best choice and will increase the speed at which the extension can initialize the code navigation database.
    //  - checkFolders: The exclusion filters will only be evaluated once per folder (individual files are not checked).
    //  - checkFilesAndFolders: The exclusion filters will be evaluated against every file and folder encountered.
    "C_Cpp.exclusionPolicy": "checkFolders",
  
    // Configure glob patterns for excluding folders (and files if `C_Cpp.exclusionPolicy#` is changed). These are specific to the C/C++ extension and are in addition to `#files.exclude#`, but unlike `#files.exclude` they also apply to paths outside the current workspace folder and are not removed from the Explorer view. Learn more about [glob patterns](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options).
    "C_Cpp.files.exclude": {
      "**/.vscode": true,
      "**/.vs": true
    },
  
    // If disabled, hover details are no longer provided by the language server.
    "C_Cpp.hover": "default",
  
    // Controls the background coloring of inactive preprocessor blocks. Input is in the form a hexadecimal color code or a valid Theme Color. If not set, this defaults to transparent. This setting only applies when inactive region dimming is enabled.
    "C_Cpp.inactiveRegionBackgroundColor": "",
  
    // Controls the font coloring of inactive preprocessor blocks. Input is in the form a hexadecimal color code or a valid Theme Color. If not set, this defaults to the syntax coloring scheme of the editor. This setting only applies when inactive region dimming is enabled.
    "C_Cpp.inactiveRegionForegroundColor": "",
  
    // Controls the opacity of inactive preprocessor blocks. Scales between `0.1` and `1.0`. This setting only applies when inactive region dimming is enabled.
    "C_Cpp.inactiveRegionOpacity": 0.55,
  
    // Display inlay hints for deduced type when `auto` is used in a declaration:
    // ```cpp 
    // 
    //  auto index /* : int */ = 0;
    // ```
    "C_Cpp.inlayHints.autoDeclarationTypes.enabled": false,
  
    // Display inlay hints for deduced type when `auto` is used in a declaration on the left of the identifier:
    // ```cpp 
    // 
    //  auto /* int */ index = 0;
    // ```
    "C_Cpp.inlayHints.autoDeclarationTypes.showOnLeft": false,
  
    // Display inlay hints for parameter names:
    // ```cpp 
    // 
    //  int a = getArea(/* width: */ x, /* height: */ y);
    // ```
    "C_Cpp.inlayHints.parameterNames.enabled": false,
  
    // Hide leading `_` in parameter name hints.
    "C_Cpp.inlayHints.parameterNames.hideLeadingUnderscores": true,
  
    // Suppress parameter name hints when the argument text or inline comment contains the parameter name:
    // ```cpp 
    // 
    //  int a = getArea(width, /* height: */ y);
    // ```
    "C_Cpp.inlayHints.parameterNames.suppressWhenArgumentContainsName": true,
  
    // Display the inlay hint reference operator `&` for parameters passed by non-const reference:
    // ```cpp 
    // 
    //  swap(/* &first: */ str1, /* &last: */ str2);
    // ```
    "C_Cpp.inlayHints.referenceOperator.enabled": false,
  
    // Controls whether a space is shown after `&` for parameters passed by non-const reference:
    // ```cpp 
    // 
    //  swap(/* & first: */ str1, /* & last: */ str2);
    // ```
    "C_Cpp.inlayHints.referenceOperator.showSpace": false,
  
    // Controls the IntelliSense provider.
    //  - default: Provides context-aware results via a separate IntelliSense process.
    //  - Tag Parser: Provides "fuzzy" results that are not context-aware.
    //  - disabled: Turns off C/C++ language service features.
    "C_Cpp.intelliSenseEngine": "default",
  
    // Controls the delay in milliseconds before IntelliSense starts updating after a modification.
    "C_Cpp.intelliSenseUpdateDelay": 1000,
  
    // Enable pre-v1.10.0 behavior for how shell escaping is handled in compiler arg settings. Shell escaping is no longer expected or supported by default in arg arrays starting in v1.10.0.
    "C_Cpp.legacyCompilerArgsBehavior": false,
  
    // Controls whether to include the header file of a refactored function/symbol to its corresponding source file when doing a refactoring action, such as create declaration/definition.
    //  - always: Always include the header file if it is not included explicitly in its source file.
    //  - ifNeeded: Only include the header file if it is not included explicitly in its source file or through implicit inclusion.
    //  - never: Never include the header file.
    "C_Cpp.refactoring.includeHeader": "always",
  
    // If `true`, 'Rename Symbol' will require a valid C/C++ identifier.
    "C_Cpp.renameRequiresIdentifier": true,
  
    // If `true`, snippets are provided by the language server.
    "C_Cpp.suggestSnippets": true,
  
    // Controls whether parsing of the non-active workspace files uses sleeps to avoid using 100% CPU. The values `highest`/`high`/`medium`/`low` correspond to approximately 100/75/50/25% CPU usage.
    "C_Cpp.workspaceParsingPriority": "highest",
  
    // The symbols to include in the query results when 'Go to Symbol in Workspace' is invoked.
    "C_Cpp.workspaceSymbols": "Just My Code"
  
  },
  {
    // Name of the predefined style used as a fallback in case `clang-format` is invoked with style `file` but the `.clang-format` file is not found. Possible values are `Visual Studio`, `LLVM`, `Google`, `Chromium`, `Mozilla`, `WebKit`, `Microsoft`, `GNU`, `none`, or use `{key: value, ...}` to set specific parameters. For example, the `Visual Studio` style is similar to: `{ BasedOnStyle: LLVM, UseTab: Never, IndentWidth: 4, TabWidth: 4, BreakBeforeBraces: Allman, AllowShortIfStatementsOnASingleLine: false, IndentCaseLabels: false, ColumnLimit: 0, AccessModifierOffset: -4, NamespaceIndentation: All, FixNamespaceComments: false }`.
    "C_Cpp.clang_format_fallbackStyle": "Visual Studio",
  
    // The full path of the `clang-format` executable. If not specified, and `clang-format` is available in the environment path, that is used. If not found in the environment path, the `clang-format` bundled with the extension will be used.
    "C_Cpp.clang_format_path": "",
  
    // If set, overrides the include sorting behavior determined by the `SortIncludes` parameter.
    "C_Cpp.clang_format_sortIncludes": null,
  
    // Coding style, currently supports: `Visual Studio`, `LLVM`, `Google`, `Chromium`, `Mozilla`, `WebKit`, `Microsoft`, `GNU`. Use `file` to load the style from a `.clang-format` file in the current or parent directory, or use `file:<path>/.clang-format` to reference a specific path. Use `{key: value, ...}` to set specific parameters. For example, the `Visual Studio` style is similar to: `{ BasedOnStyle: LLVM, UseTab: Never, IndentWidth: 4, TabWidth: 4, BreakBeforeBraces: Allman, AllowShortIfStatementsOnASingleLine: false, IndentCaseLabels: false, ColumnLimit: 0, AccessModifierOffset: -4, NamespaceIndentation: All, FixNamespaceComments: false }`.
    "C_Cpp.clang_format_style": "file",
  
    // Configures the formatting engine.
    //  - clangFormat: `clang-format` will be used to format code.
    //  - vcFormat: The Visual C++ formatting engine will be used to format code.
    //  - default: By default, `clang-format` will be used to format the code. However, the Visual C++ formatting engine will be used if an `.editorconfig` file with relevant settings is found nearer to the code being formatted and `C_Cpp.clang_format_style` is the default value: `file`.
    //  - disabled: Code formatting will be disabled.
    "C_Cpp.formatting": "default",
  
    // Access specifiers are indented relative to class or struct definitions by the amount specified in the `editor.tabSize` setting.
    "C_Cpp.vcFormat.indent.accessSpecifiers": false,
  
    // Braces are indented by the amount specified in the `editor.tabSize` setting.
    "C_Cpp.vcFormat.indent.braces": false,
  
    // Code inside a `case` block is indented relative to its label by the amount specified in the `editor.tabSize` setting.
    "C_Cpp.vcFormat.indent.caseContents": true,
  
    // Indent braces following a case statement by the amount specified in the `editor.tabSize` setting.
    "C_Cpp.vcFormat.indent.caseContentsWhenBlock": false,
  
    // Labels are indented relative to switch statements by the amount specified in the `editor.tabSize` setting.
    "C_Cpp.vcFormat.indent.caseLabels": false,
  
    // The position of goto labels.
    //  - oneLeft: Position goto labels to the left of the current code indentation, by the amount specified in the `editor.tabSize` setting.
    //  - leftmostColumn: Position goto labels at the leftmost edge of the code.
    //  - none: Goto labels will not be formatted.
    "C_Cpp.vcFormat.indent.gotoLabels": "oneLeft",
  
    // Indent braces of lambdas used as function parameters relative to the start of the statement by the amount specified in the `editor.tabSize` setting.
    "C_Cpp.vcFormat.indent.lambdaBracesWhenParameter": true,
  
    // Determines what new line indentation is relative to.
    //  - outermostParenthesis: Indent new line relative to the outermost open parenthesis.
    //  - innermostParenthesis: Indent new line relative to the innermost open parenthesis.
    //  - statementBegin: Indent new line relative to the beginning of the current statement.
    "C_Cpp.vcFormat.indent.multiLineRelativeTo": "innermostParenthesis",
  
    // Code is indented relative to its enclosing namespace by the amount specified in the `editor.tabSize` setting.
    "C_Cpp.vcFormat.indent.namespaceContents": true,
  
    // The position of preprocessor directives.
    //  - oneLeft: Preprocessor directives are positioned to the left of the current code indentation, by the amount specified in the `editor.tabSize` setting.
    //  - leftmostColumn: Preprocessor directives are positioned at the leftmost edge of the code.
    //  - none: Preprocessor directives will not be formatted.
    "C_Cpp.vcFormat.indent.preprocessor": "leftmostColumn",
  
    // Indentation of comments is not changed during formatting operations.
    "C_Cpp.vcFormat.indent.preserveComments": false,
  
    // In existing code, preserve the existing indent alignment of new lines within parentheses.
    "C_Cpp.vcFormat.indent.preserveWithinParentheses": false,
  
    // When a new line is typed, it is aligned under the opening parenthesis or based on `C_Cpp.vcFormat.indent.multiLineRelativeTo`.
    //  - alignToParenthesis: New line is aligned under the opening parenthesis.
    //  - indent: New line is indented based on `C_Cpp.vcFormat.indent.multiLineRelativeTo`.
    "C_Cpp.vcFormat.indent.withinParentheses": "indent",
  
    // Place `catch` and similar keywords on a new line.
    "C_Cpp.vcFormat.newLine.beforeCatch": true,
  
    // Place `else` on a new line.
    "C_Cpp.vcFormat.newLine.beforeElse": true,
  
    // The position of opening braces for control blocks.
    //  - newLine: Opening braces are moved to a new line.
    //  - sameLine: Opening braces are kept on the same line and a space is added before each one.
    //  - ignore: Opening braces are not formatted.
    "C_Cpp.vcFormat.newLine.beforeOpenBrace.block": "ignore",
  
    // The position of opening braces for functions.
    //  - newLine: Opening braces are moved to a new line.
    //  - sameLine: Opening braces are kept on the same line and a space is added before each one.
    //  - ignore: Opening braces are not formatted.
    "C_Cpp.vcFormat.newLine.beforeOpenBrace.function": "ignore",
  
    // The position of opening braces for lambda functions.
    //  - newLine: Opening braces are moved to a new line.
    //  - sameLine: Opening braces are kept on the same line and a space is added before each one.
    //  - ignore: Opening braces are not formatted.
    "C_Cpp.vcFormat.newLine.beforeOpenBrace.lambda": "ignore",
  
    // The position of opening braces for namespaces.
    //  - newLine: Opening braces are moved to a new line.
    //  - sameLine: Opening braces are kept on the same line and a space is added before each one.
    //  - ignore: Opening braces are not formatted.
    "C_Cpp.vcFormat.newLine.beforeOpenBrace.namespace": "ignore",
  
    // The position of opening braces for type definitions.
    //  - newLine: Opening braces are moved to a new line.
    //  - sameLine: Opening braces are kept on the same line and a space is added before each one.
    //  - ignore: Opening braces are not formatted.
    "C_Cpp.vcFormat.newLine.beforeOpenBrace.type": "ignore",
  
    // Place `while` in a `do`-`while` loop on a new line.
    "C_Cpp.vcFormat.newLine.beforeWhileInDoWhile": false,
  
    // For empty function bodies, move closing braces to the same line as opening braces.
    "C_Cpp.vcFormat.newLine.closeBraceSameLine.emptyFunction": false,
  
    // For empty types, move closing braces to the same line as opening braces.
    "C_Cpp.vcFormat.newLine.closeBraceSameLine.emptyType": false,
  
    // Place opening and closing braces for scopes on separate lines.
    "C_Cpp.vcFormat.newLine.scopeBracesOnSeparateLines": false,
  
    // A space is added after the closing parenthesis of a C-style cast.
    "C_Cpp.vcFormat.space.afterCastCloseParenthesis": false,
  
    // A space is added after every comma.
    "C_Cpp.vcFormat.space.afterComma": true,
  
    // A space is added between the keyword and opening parenthesis in control flow statements.
    "C_Cpp.vcFormat.space.afterKeywordsInControlFlowStatements": true,
  
    // Spaces around assignment operators.
    //  - insert: A space is added before the operator and also after it.
    //  - remove: Spaces before and after the operator are removed.
    //  - ignore: Spaces are left as entered.
    "C_Cpp.vcFormat.space.aroundAssignmentOperator": "insert",
  
    // Spaces around binary operators.
    //  - insert: A space is added before the operator and also after it.
    //  - remove: Spaces before and after the operator are removed.
    //  - ignore: Spaces are left as entered.
    "C_Cpp.vcFormat.space.aroundBinaryOperator": "insert",
  
    // Spaces around conditional operators.
    //  - insert: A space is added before the operator and also after it.
    //  - remove: Spaces before and after the operator are removed.
    //  - ignore: Spaces are left as entered.
    "C_Cpp.vcFormat.space.aroundTernaryOperator": "insert",
  
    // A space is added before the opening braces of scope blocks.
    "C_Cpp.vcFormat.space.beforeBlockOpenBrace": true,
  
    // A space is added before every comma.
    "C_Cpp.vcFormat.space.beforeComma": false,
  
    // A space is added before the colon in constructor definitions.
    "C_Cpp.vcFormat.space.beforeConstructorColon": true,
  
    // When square brackets are empty, a space is added before the opening bracket.
    "C_Cpp.vcFormat.space.beforeEmptySquareBrackets": false,
  
    // Spacing between function names and opening parentheses of argument lists.
    //  - insert: Add a space before the opening parenthesis of a function.
    //  - remove: Spaces before opening parenthesis of a function are removed.
    //  - ignore: Spaces are left as entered.
    "C_Cpp.vcFormat.space.beforeFunctionOpenParenthesis": "remove",
  
    // A space is added before the colon for inherited types in class definitions.
    "C_Cpp.vcFormat.space.beforeInheritanceColon": true,
  
    // A space is added before the opening brace of uniform initialization and initializer lists.
    "C_Cpp.vcFormat.space.beforeInitializerListOpenBrace": false,
  
    // A space is added before the opening parenthesis of lambda argument lists.
    "C_Cpp.vcFormat.space.beforeLambdaOpenParenthesis": false,
  
    // A space is added before opening square brackets.
    "C_Cpp.vcFormat.space.beforeOpenSquareBracket": false,
  
    // When braces are empty and on the same line, a space is inserted between them.
    "C_Cpp.vcFormat.space.betweenEmptyBraces": false,
  
    // When square brackets are empty, a space is inserted between them.
    "C_Cpp.vcFormat.space.betweenEmptyLambdaBrackets": false,
  
    // When a function parameter list is empty, a space is inserted between its parentheses.
    "C_Cpp.vcFormat.space.betweenEmptyParameterListParentheses": false,
  
    // When square brackets are empty, a space is inserted between them.
    "C_Cpp.vcFormat.space.betweenEmptySquareBrackets": false,
  
    // For multi-dimensional arrays, all space between brackets is removed. Other settings that control space are overridden.
    "C_Cpp.vcFormat.space.groupSquareBrackets": true,
  
    // A space is inserted after every semicolon.
    "C_Cpp.vcFormat.space.insertAfterSemicolon": false,
  
    // Spaces around pointer and reference operators.
    //  - left: Pointer and reference operators are aligned to the left.
    //  - center: Pointer and reference operators are centered.
    //  - right: Pointer and reference operators are aligned to the right.
    //  - ignore: Pointer and reference operators are not formatted.
    "C_Cpp.vcFormat.space.pointerReferenceAlignment": "left",
  
    // Spaces around commas are preserved inside uniform initialization and initializer lists.
    "C_Cpp.vcFormat.space.preserveInInitializerList": true,
  
    // Spaces around member access operators, pointer-to-member operators, and scope resolution operators are removed.
    "C_Cpp.vcFormat.space.removeAroundMemberOperators": true,
  
    // Spaces between unary operators and operands are removed.
    "C_Cpp.vcFormat.space.removeAroundUnaryOperator": true,
  
    // Spaces are removed before every semicolon.
    "C_Cpp.vcFormat.space.removeBeforeSemicolon": true,
  
    // A space is added after the opening parenthesis and also before the closing parenthesis of a C-style cast.
    "C_Cpp.vcFormat.space.withinCastParentheses": false,
  
    // A space is added after the opening parenthesis and also before the closing parenthesis in control flow statements.
    "C_Cpp.vcFormat.space.withinControlFlowStatementParentheses": false,
  
    // A space is added after the opening parenthesis and also before the closing parenthesis of a parenthesized expression.
    "C_Cpp.vcFormat.space.withinExpressionParentheses": false,
  
    // A space is added after the opening brace and also before the closing brace of uniform initialization and initializer lists.
    "C_Cpp.vcFormat.space.withinInitializerListBraces": true,
  
    // A space is added after the opening square bracket and also before the closing square bracket.
    "C_Cpp.vcFormat.space.withinLambdaBrackets": false,
  
    // A space is added after the opening parenthesis and also before the closing parenthesis in function parameter lists.
    "C_Cpp.vcFormat.space.withinParameterListParentheses": false,
  
    // A space is added after the opening square bracket and also before the closing square bracket.
    "C_Cpp.vcFormat.space.withinSquareBrackets": false,
  
    // Wrapping options for blocks.
    //  - oneLiners: A complete code block that is entered on one line is kept on one line, regardless of the values of any of the `C_Cpp.vcFormat.newLine.*` settings.
    //  - allOneLineScopes: Any code where the opening and closing brace is entered on one line is kept on one line, regardless of the values of any of the `C_Cpp.vcFormat.newLine.*` settings.
    //  - never: Code blocks are always formatted based on the values of the `C_Cpp.vcFormat.newLine.*` settings.
    "C_Cpp.vcFormat.wrap.preserveBlocks": "oneLiners"
  
  },
  {
    // Defines the editor behavior for when the Enter key is pressed inside a multiline or single line comment block.
    "C_Cpp.commentContinuationPatterns": [
      "/**"
    ],
  
    // The string of characters used as the starting line of the Doxygen comment.
    "C_Cpp.doxygen.generatedStyle": "///",
  
    // Controls whether to automatically insert the Doxygen comment after typing the chosen comment style.
    "C_Cpp.doxygen.generateOnType": true,
  
    // Select the Doxygen section tags that you would like to appear on hover in the tooltip area when the 'Simplify Structured Comments' setting is enabled. 
    "C_Cpp.doxygen.sectionTags": [
      "attention",
      "tparam",
      "param",
      "result",
      "returns",
      "retval",
      "exception",
      "deprecated",
      "warning",
      "note"
    ],
  
    // Select whether markdown will be available in the hover tooltip. By default, only a subset of markdown will be applied to comments in the hover tooltip.
    //  - subsetEnabled: Enable all markdown features in the hover tooltip except those that include the '_' and '*' characters.
    //  - enabled: Enable all markdown features in the hover tooltip.
    //  - disabled: Disable all markdown features in the hover tooltip.
    "C_Cpp.markdownInComments": "subsetEnabled",
  
    // If `true`, tooltips of hover and auto-complete will only display certain labels of structured comments. Otherwise, all comments are displayed.
    "C_Cpp.simplifyStructuredComments": true
  
  },
  {
    // Additional command line arguments to pass to `clang-tidy`. These take precedence over the equivalent `C_Cpp.codeAnalysis.clangTidy.*` settings.
    "C_Cpp.codeAnalysis.clangTidy.args": [],
  
    // List of disabled `clang-tidy` checks. The values are appended to the `Checks` in a `.clang-tidy` file or `C_Cpp.codeAnalysis.clangTidy.config`, if any.
    "C_Cpp.codeAnalysis.clangTidy.checks.disabled": [],
  
    // List of enabled `clang-tidy` checks. The values are appended to the `Checks` in a `.clang-tidy` file or `C_Cpp.codeAnalysis.clangTidy.config`, if any. The default check `clang-analyzer-*` is always used unless it is explicitly disabled.
    "C_Cpp.codeAnalysis.clangTidy.checks.enabled": [],
  
    // If `true`, formatting will be run on the lines changed by 'Fix' code actions.
    "C_Cpp.codeAnalysis.clangTidy.codeAction.formatFixes": true,
  
    // Controls which 'Clear' code analysis problem code action options are available. Changing the setting to show more options may require re-running code analysis.
    //  - None: Show no 'Clear' code actions.
    //  - AllOnly: Show only the 'Clear all' code action (or 'Clear all <type>' if there is only one type or 'Clear this' if there is only one problem).
    //  - AllAndAllType: Show the 'Clear all' code action (if there are multiple problem types) and the 'Clear all <type>' code action (or 'Clear this' if there is only one problem for the <type>)
    //  - AllAndAllTypeAndThis: Show the 'Clear all' (if there are multiple problem types), 'Clear all <type>' (if there are multiple problems for the <type>), and 'Clear this' code actions
    "C_Cpp.codeAnalysis.clangTidy.codeAction.showClear": "AllAndAllTypeAndThis",
  
    // If `true`, the 'Disable' code action will be shown when available (the next time code analysis is run). When the 'Disable' code action is used, it adds the warning code to the `C_Cpp.codeAnalysis.clangTidy.checks.disabled` setting.
    "C_Cpp.codeAnalysis.clangTidy.codeAction.showDisable": true,
  
    // If `true`, the 'Show Documentation for' code action will be shown when available (the next time code analysis is run).
    "C_Cpp.codeAnalysis.clangTidy.codeAction.showDocumentation": true,
  
    // Specifies a `clang-tidy` configuration in YAML/JSON format: `{Checks: '-*,clang-analyzer-*', CheckOptions: [{key: x, value: y}]}`. When the value is empty, `clang-tidy` will attempt to find a file named `.clang-tidy` for each source file in its parent directories.
    "C_Cpp.codeAnalysis.clangTidy.config": "",
  
    // If `true`, code analysis using `clang-tidy` will be enabled and will run after a file is opened or saved if `C_Cpp.codeAnalysis.runAutomatically` is `true` (the default).
    "C_Cpp.codeAnalysis.clangTidy.enabled": false,
  
    // Specifies a `clang-tidy` configuration in YAML/JSON format to be used as a fallback when `C_Cpp.codeAnalysis.clangTidy.config` is not set and no `.clang-tidy` file is found: `{Checks: '-*,clang-analyzer-*', CheckOptions: [{key: x, value: y}]}`.
    "C_Cpp.codeAnalysis.clangTidy.fallbackConfig": "",
  
    // A POSIX extended regular expression (ERE) matching the names of the headers to output diagnostics from. Diagnostics from the main file of each translation unit are always displayed. The `${workspaceFolder}` variable is supported (and is used as the default fallback value if no `.clang-tidy` file exists). If this option is not `null` (empty), it overrides the `HeaderFilterRegex` option in a `.clang-tidy` file, if any.
    "C_Cpp.codeAnalysis.clangTidy.headerFilter": null,
  
    // The full path of the `clang-tidy` executable. If not specified, and `clang-tidy` is available in the environment path, that is used. If not found in the environment path, the `clang-tidy` bundled with the extension will be used.
    "C_Cpp.codeAnalysis.clangTidy.path": "",
  
    // If `true` and `compileCommands` is set, the `-p=<build-path>` argument is passed to `clang-tidy` instead of build arguments being passed after `--`. This may not work if environment variables aren't set so that system includes can be found.
    "C_Cpp.codeAnalysis.clangTidy.useBuildPath": false,
  
    // Configure glob patterns for excluding folders and files for code analysis. Files not under the workspace folder are always excluded. Inherits values from `files.exclude#` and `#C_Cpp.files.exclude`. Learn more about [glob patterns](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options).
    "C_Cpp.codeAnalysis.exclude": {},
  
    // The maximum number of concurrent threads to use for code analysis. The default of `null` (empty) uses half the value inherited from `C_Cpp.maxConcurrentThreads`.
    "C_Cpp.codeAnalysis.maxConcurrentThreads": null,
  
    // Fewer code analysis processes will run concurrently after this memory usage (in MB) is exceeded. The default of `null` (empty) uses the value inherited from `C_Cpp.maxMemory`.
    "C_Cpp.codeAnalysis.maxMemory": null,
  
    // If `true`, code analysis will run automatically on a file after it is opened or saved.
    "C_Cpp.codeAnalysis.runAutomatically": true,
  
    // Controls the delay in milliseconds before code analysis starts processing after a save is triggered from an edit when `files.autoSave#` is `afterDelay` and `#C_Cpp.codeAnalysis.runAutomatically` is `true`.
    "C_Cpp.codeAnalysis.updateDelay": 2000
  
  },
  {
    // If `true`, debugger shell command substitution will use obsolete backtick ``(`)``.
    "C_Cpp.debugger.useBacktickCommandSubstitution": false,
  
    // Show the "Run and Debug" play button and "Add Debug Configuration" gear in the editor title bar for C++ files.
    "C_Cpp.debugShortcut": true,
  
    // Controls whether the SSH Targets view is visible. By default, enable the view when an SSH command is invoked.
    "C_Cpp.sshTargetsView": "default"
  
  },
  {
    // The maximum number of IntelliSense processes to keep running. The default of `null` (empty) uses value inherited from `C_Cpp.maxCachedProcesses`.
    "C_Cpp.intelliSense.maxCachedProcesses": null,
  
    // Older IntelliSense processes will shut down before new processes are created after this memory usage (in MB) is exceeded. The default of `null` (empty) uses the value inherited from `C_Cpp.maxMemory`.
    "C_Cpp.intelliSense.maxMemory": null,
  
    // Defines the folder path for cached precompiled headers used by IntelliSense. The default cache path is `%LocalAppData%/Microsoft/vscode-cpptools` on Windows, `$XDG_CACHE_HOME/vscode-cpptools/` on Linux (or `$HOME/.cache/vscode-cpptools/` if `XDG_CACHE_HOME` is not defined), and `$HOME/Library/Caches/vscode-cpptools/` on macOS. The default path will be used if no path is specified or if a specified path is invalid.
    "C_Cpp.intelliSenseCachePath": "",
  
    // Maximum size of the per-workspace hard drive space in megabytes (MB) for cached precompiled headers; the actual usage may fluctuate around this value. The default size is `5120` MB. Precompiled header caching is disabled when the size is `0`.
    "C_Cpp.intelliSenseCacheSize": 5120,
  
    // Memory usage limit in megabytes (MB) of an IntelliSense process. The default is `4096` and the maximum is `16384`. The extension will shutdown and restart an IntelliSense process when it exceeds the limit.
    "C_Cpp.intelliSenseMemoryLimit": 4096,
  
    // The maximum number of cached processes to use for language service processing. The default of `null` (empty) uses twice the number of logical processors available.
    "C_Cpp.maxCachedProcesses": null,
  
    // The maximum number of concurrent threads to use for language service processing. The value is a hint and may not always be used. The default of `null` (empty) uses the number of logical processors available.
    "C_Cpp.maxConcurrentThreads": null,
  
    // The maximum memory (in MB) available for language service processing. Fewer processes will be cached and run concurrently after this memory usage is exceeded. The default of `null` (empty) uses the system's free memory.
    "C_Cpp.maxMemory": null,
  
    // The maximum number of results to show for 'Go to Symbol in Workspace'. The default is `5000`.
    "C_Cpp.maxSymbolSearchResults": 5000,
  
    // The maximum number of processes to keep in memory for 'Find All References' and 'Rename'. The default of `0` disables this feature. The value of `null` (empty) uses the value inherited from `C_Cpp.maxCachedProcesses`.
    "C_Cpp.references.maxCachedProcesses": 0,
  
    // The maximum number of concurrent threads to use for 'Find All References' and 'Rename'. The default of `null` (empty) uses the value inherited from `C_Cpp.maxConcurrentThreads`.
    "C_Cpp.references.maxConcurrentThreads": null,
  
    // Fewer 'Find All References' and 'Rename' processes will be cached and run concurrently after this memory usage (in MB) is exceeded. The default of `null` (empty) uses the value inherited from `C_Cpp.maxMemory`.
    "C_Cpp.references.maxMemory": null
  
  },
  {
    // Add include paths from `nan` and `node-addon-api` when they are dependencies.
    "C_Cpp.addNodeAddonIncludePaths": false,
  
    // Controls whether files are automatically added to `files.associations` when they are the target of a navigation operation from a C/C++ file.
    "C_Cpp.autoAddFileAssociations": true,
  
    // If set to `default`, the file system of the workspace is assumed to be case insensitive on Windows and case sensitive on macOS or Linux. If set to `enabled`, the file system of the workspace is assumed to be case sensitive on Windows.
    "C_Cpp.caseSensitiveFileSupport": "default",
  
    // Controls whether "experimental" features are usable.
    "C_Cpp.experimentalFeatures": "disabled",
  
    // The verbosity of logging in the Output Panel. The order of levels from least verbose to most verbose is: `None` < `Error` < `Warning` < `Information` < `Debug`.
    "C_Cpp.loggingLevel": "Error",
  
    // The character used as a path separator for `#include` auto-completion results.
    "C_Cpp.preferredPathSeparator": "Forward Slash",
  
    // This setting is deprecated. Pre-release extensions are now available via the Marketplace.
    // Set to `Insiders` to automatically download and install the latest Insiders builds of the extension, which include upcoming features and bug fixes.
    "C_Cpp.updateChannel": "Default",
  
    // Enable integration services for the [vcpkg dependency manager](https://aka.ms/vcpkg/).
    "C_Cpp.vcpkg.enabled": true
  
  },
  {
    // How often to automatically refresh the preview.
    "livePreview.autoRefreshPreview": "On All Changes in Editor",
  
    // The browser you want to launch when previewing a file in an external browser. Only works for normal preview (non-debug) and only works on desktop.
    "livePreview.customExternalBrowser": "Default",
  
    // Whether or not to attach the JavaScript debugger on external preview launches.
    "livePreview.debugOnExternalPreview": false,
  
    // The file to automatically show upon starting the server. Leave blank to open at the index.
    "livePreview.defaultPreviewPath": "",
  
    // The local IP host address to host your files on.
    "livePreview.hostIP": "127.0.0.1",
  
    // The extra HTTP headers that should be set in the server's HTTP responses.
    "livePreview.httpHeaders": {
      "Accept-Ranges": "bytes"
    },
  
    // Whether to notify the user when opening a preview for a file that is not part of the currently opened workspace (or the workspace where the server is hosted).
    "livePreview.notifyOnOpenLooseFile": true,
  
    // The preferred target for previews.
    "livePreview.openPreviewTarget": "Embedded Preview",
  
    // Which local port the live preview's server should try initially. If this port number doesn't work, it will increment the port number until it finds a free port.
    "livePreview.portNumber": 3000,
  
    // How many milliseconds delay to use when debouncing the preview update.
    "livePreview.previewDebounceDelay": 50,
  
    // How many minutes after closing the embedded preview you want the server to shut off. Set to 0 to have server stay on indefinetely.
    "livePreview.serverKeepAliveAfterEmbeddedPreviewClose": 3,
  
    // The relative path from the workspace root that the files are served from. Files will be previewed as if the workspace root is at this relative path. If this directory path doesn't exist in your workspace, it will default to the workspace root. This setting only applies if you have a workspace open.
    "livePreview.serverRoot": "",
  
    // Whether or not to show information messages on server on/off status change.
    "livePreview.showServerStatusNotifications": false,
  
    // Whether or not to pair external preview instances with the auto-generated server task. When disabled, the server will also not automatically close (until the window is closed).
    "livePreview.tasks.runTaskWithExternalPreview": false
  
  },
  {
    // Show buttons in the editor's title bar for moving the terminals pane (with the PowerShell Extension Terminal) around.
    "powershell.buttons.showPanelMovementButtons": false,
  
    // Show the `Run` and `Run Selection` buttons in the editor's title bar.
    "powershell.buttons.showRunButtons": true,
  
    // Enables syntax based code folding. When disabled, the default indentation based code folding is used.
    "powershell.codeFolding.enable": true,
  
    // Shows the last line of a folded section similar to the default VS Code folding style. When disabled, the entire folded region is hidden.
    "powershell.codeFolding.showLastLine": true,
  
    // Specifies if Code Lenses are displayed above function definitions, used to show the number of times the function is referenced in the workspace and navigate to those references. Large workspaces may want to disable this setting if performance is compromised. See also `powershell.analyzeOpenDocumentsOnly`.
    "powershell.enableReferencesCodeLens": true,
  
    // Specifies the [comment based help](https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_comment_based_help) completion style triggered by typing ` ##`.
    //  - Disabled: Disables the feature.
    //  - BlockComment: Inserts a block style help comment, for example:
    // 
    // `<#`
    // 
    // `.<help keyword>`
    // 
    // `<help content>`
    // 
    // `#>`
    //  - LineComment: Inserts a line style help comment, for example:
    // 
    // `# .<help keyword>`
    // 
    // `# <help content>`
    "powershell.helpCompletion": "BlockComment",
  
    // **Deprecated:** This prompt has been removed as it's no longer strictly necessary to upgrade the `PackageManagement` module.
    // **Deprecated:** Specifies whether you should be prompted to update your version of `PackageManagement` if it's under 1.4.6.
    "powershell.promptToUpdatePackageManagement": false,
  
    // Specifies whether you may be prompted to update your version of PowerShell.
    "powershell.promptToUpdatePowerShell": true,
  
    // Specifies an array of modules to exclude from Command Explorer listing.
    "powershell.sideBar.CommandExplorerExcludeFilter": [],
  
    // Specifies the visibility of the Command Explorer in the side bar.
    "powershell.sideBar.CommandExplorerVisibility": false,
  
    // Suppresses the warning message when any of `powershell.powerShellAdditionalExePaths` is not found.
    "powershell.suppressAdditionalExeNotFoundWarning": false
  
  },
  {
    // Adds a space before and after the pipeline operator (`|`) if it is missing.
    "powershell.codeFormatting.addWhitespaceAroundPipe": true,
  
    // Align assignment statements in a hashtable or a DSC Configuration.
    "powershell.codeFormatting.alignPropertyValuePairs": true,
  
    // Replaces aliases with their aliased name.
    "powershell.codeFormatting.autoCorrectAliases": false,
  
    // Removes redundant semicolon(s) at the end of a line where a line terminator is sufficient.
    "powershell.codeFormatting.avoidSemicolonsAsLineTerminators": false,
  
    // Does not reformat one-line code blocks, such as: `if (...) {...} else {...}`.
    "powershell.codeFormatting.ignoreOneLineBlock": true,
  
    // Adds a newline (line break) after a closing brace.
    "powershell.codeFormatting.newLineAfterCloseBrace": true,
  
    // Adds a newline (line break) after an open brace.
    "powershell.codeFormatting.newLineAfterOpenBrace": true,
  
    // Places open brace on the same line as its associated statement.
    "powershell.codeFormatting.openBraceOnSameLine": true,
  
    // Whether to increase indentation after a pipeline for multi-line statements. See [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer/blob/a94d9f5666bba9f569cdf9c1bc99556934f2b8f4/docs/Rules/UseConsistentIndentation.md#pipelineindentation-string-default-value-is-increaseindentationforfirstpipeline) for examples. It is suggested to use `IncreaseIndentationForFirstPipeline` instead of the default `NoIndentation`. **This default may change in the future,** please see the [Request For Comment](https://github.com/PowerShell/vscode-powershell/issues/4296).
    //  - IncreaseIndentationForFirstPipeline: Indent once after the first pipeline and keep this indentation.
    //  - IncreaseIndentationAfterEveryPipeline: Indent more after the first pipeline and keep this indentation.
    //  - NoIndentation: Do not increase indentation.
    //  - None: Do not change any existing pipeline indentation (disables feature).
    "powershell.codeFormatting.pipelineIndentationStyle": "NoIndentation",
  
    // Sets the code formatting options to follow the given indent style in a way that is compatible with PowerShell syntax. Any setting other than `Custom` will configure (and override) the settings:
    // 
    // * `powershell.codeFormatting.openBraceOnSameLine`
    // 
    // * `powershell.codeFormatting.newLineAfterOpenBrace`
    // 
    // * `powershell.codeFormatting.newLineAfterCloseBrace`
    // 
    // For more information about the brace styles, please see [PoshCode's discussion](https://github.com/PoshCode/PowerShellPracticeAndStyle/issues/81).
    //  - Custom: The three brace settings are respected as-is.
    //  - Allman: Sets `powershell.codeFormatting.openBraceOnSameLine#` to `false`, `#powershell.codeFormatting.newLineAfterOpenBrace#` to `true`, and `#powershell.codeFormatting.newLineAfterCloseBrace` to `true`.
    //  - OTBS: Sets `powershell.codeFormatting.openBraceOnSameLine#` to `true`, `#powershell.codeFormatting.newLineAfterOpenBrace#` to `true`, and `#powershell.codeFormatting.newLineAfterCloseBrace` to `false`.
    //  - Stroustrup: Sets `powershell.codeFormatting.openBraceOnSameLine#` to `true`, `#powershell.codeFormatting.newLineAfterOpenBrace#` to `true`, and `#powershell.codeFormatting.newLineAfterCloseBrace` to `true`.
    "powershell.codeFormatting.preset": "Custom",
  
    // Trims extraneous whitespace (more than one character) before and after the pipeline operator (`|`).
    "powershell.codeFormatting.trimWhitespaceAroundPipe": false,
  
    // Use single quotes if a string is not interpolated and its value does not contain a single quote.
    "powershell.codeFormatting.useConstantStrings": false,
  
    // Use correct casing for cmdlets.
    "powershell.codeFormatting.useCorrectCasing": false,
  
    // Adds a space after a separator (`,` and `;`).
    "powershell.codeFormatting.whitespaceAfterSeparator": true,
  
    // Adds spaces before and after an operator (`=`, `+`, `-`, etc.).
    "powershell.codeFormatting.whitespaceAroundOperator": true,
  
    // **Deprecated:** Please use the `powershell.codeFormatting.addWhitespaceAroundPipe` setting instead. If you've used this setting before, we have moved it for you automatically.
    // **Deprecated:** Please use the `powershell.codeFormatting.addWhitespaceAroundPipe` setting instead. If you've used this setting before, we have moved it for you automatically.
    "powershell.codeFormatting.whitespaceAroundPipe": true,
  
    // Adds a space between a keyword and its associated script-block expression.
    "powershell.codeFormatting.whitespaceBeforeOpenBrace": true,
  
    // Adds a space between a keyword (`if`, `elseif`, `while`, `switch`, etc.) and its associated conditional expression.
    "powershell.codeFormatting.whitespaceBeforeOpenParen": true,
  
    // Removes redundant whitespace between parameters.
    "powershell.codeFormatting.whitespaceBetweenParameters": false,
  
    // Adds a space after an opening brace (`{`) and before a closing brace (`}`).
    "powershell.codeFormatting.whitespaceInsideBrace": true
  
  },
  {
    // Specifies to search for references only within open documents instead of all workspace files. An alternative to `powershell.enableReferencesCodeLens` that allows large workspaces to support some references without the performance impact.
    "powershell.analyzeOpenDocumentsOnly": false,
  
    // A path where the Extension Terminal will be launched. Both the PowerShell process's and the shell's location will be set to this directory. Does not support variables, but does support the use of '~' and paths relative to a single workspace. **For multi-root workspaces, use the name of the folder you wish to have as the cwd.**
    "powershell.cwd": "",
  
    // Creates a temporary PowerShell Extension Terminal for each debugging session. This is useful for debugging PowerShell classes and binary modules.
    "powershell.debugging.createTemporaryIntegratedConsole": false,
  
    // Sets the operator used to launch scripts.
    //  - DotSource: Use the Dot-Source operator `.` to launch the script, for example, `. 'C:\Data\MyScript.ps1'`
    //  - Call: Use the Call operator `&` to launch the script, for example, `& 'C:\Data\MyScript.ps1'`
    "powershell.debugging.executeMode": "DotSource",
  
    // Specifies whether the extension loads [PowerShell profiles](https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_profiles). Note that the extension's "Current Host" profile is `Microsoft.VSCode_profile.ps1`, which will be loaded instead of the default "Current Host" profile of `Microsoft.PowerShell_profile.ps1`. Use the "All Hosts" profile `profile.ps1` for common configuration.
    "powershell.enableProfileLoading": true,
  
    // Specifies a list of Item / Value pairs where the **Item** is a user-chosen name and the **Value** is an absolute path to a PowerShell executable. The name appears in the [Session Menu Command](command:PowerShell.ShowSessionMenu) and is used to reference this executable in the `powershell.powerShellDefaultVersion` setting.
    "powershell.powerShellAdditionalExePaths": {},
  
    // Specifies the default PowerShell version started by the extension. The name must match what is displayed in the [Session Menu command](command:PowerShell.ShowSessionMenu), for example, `Windows PowerShell (x86)`. You can specify additional PowerShell executables with the `powershell.powerShellAdditionalExePaths` setting.
    "powershell.powerShellDefaultVersion": "",
  
    // **Deprecated:** Please use the `powershell.powerShellAdditionalExePaths` setting instead.
    // **Deprecated:** Specifies the path to the PowerShell executable.
    "powershell.powerShellExePath": "",
  
    // Enables real-time script analysis using [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) that populates the [Problems view](command:workbench.panel.markers.view.focus).
    "powershell.scriptAnalysis.enable": true,
  
    // Specifies the path to a [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) settings file. **This setting may not work as expected currently!**
    "powershell.scriptAnalysis.settingsPath": "PSScriptAnalyzerSettings.psd1",
  
    // Starts the PowerShell extension's underlying PowerShell process as a login shell, if applicable.
    "powershell.startAsLoginShell.linux": false,
  
    // Starts the PowerShell extension's underlying PowerShell process as a login shell, if applicable.
    "powershell.startAsLoginShell.osx": true,
  
    // Starts the PowerShell extension automatically when a PowerShell file is opened. If `false`, to start the extension use the [Restart Session command](command:PowerShell.RestartSession). **IntelliSense, code navigation, the Extension Terminal, code formatting, and other features are not enabled until the extension starts.**
    "powershell.startAutomatically": true,
  
    // **Deprecated:** This setting was removed when the PowerShell installation searcher was added. Please use the `powershell.powerShellAdditionalExePaths` setting instead.
    // **Deprecated:** Uses the 32-bit language service on 64-bit Windows. This setting has no effect on 32-bit Windows or on the PowerShell extension debugger, which has its own architecture configuration.
    "powershell.useX86Host": false
  
  },
  {
    // This setting controls the appearance of the `Run Tests` and `Debug Tests` CodeLenses that appears above Pester tests.
    "powershell.pester.codeLens": true,
  
    // Defines the verbosity of output to be used when debugging a test or a block. For Pester 5 and newer the default value `Diagnostic` will print additional information about discovery, skipped and filtered tests, mocking and more.
    "powershell.pester.debugOutputVerbosity": "Diagnostic",
  
    // Defines the verbosity of output to be used. For Pester 5 and newer the default value `FromPreference` will use the `Output` settings from the `$PesterPreference` defined in the caller's context, and will default to `Normal` if there is none. For Pester 4 the `FromPreference` and `Normal` options map to `All`, and `Minimal` option maps to `Fails`.
    "powershell.pester.outputVerbosity": "FromPreference",
  
    // Use a CodeLens that is compatible with Pester 4. Disabling this will show `Run Tests` on all `It`, `Describe` and `Context` blocks, and will correctly work only with Pester 5 and newer.
    "powershell.pester.useLegacyCodeLens": true
  
  },
  {
    // Switches focus to the console when a script selection is run or a script file is debugged.
    "powershell.integratedConsole.focusConsoleOnExecute": true,
  
    // Use the VS Code API to clear the terminal since that's the only reliable way to clear the scrollback buffer. Turn this on if you're used to `Clear-Host` clearing scroll history. **This setting is not recommended and likely to be deprecated!**
    "powershell.integratedConsole.forceClearScrollbackBuffer": false,
  
    // Shows the Extension Terminal when the PowerShell extension is initialized. When disabled, the pane is not opened on startup, but the Extension Terminal is still created in order to power the extension's features.
    "powershell.integratedConsole.showOnStartup": true,
  
    // Starts the Extension Terminal in the background. **If this is enabled, to access the terminal you must run the [Show Extension Terminal command](command:PowerShell.ShowSessionConsole), and once shown it cannot be put back into the background.** This option completely hides the Extension Terminal from the terminals view. You are probably looking for the `powershell.integratedConsole.showOnStartup` option instead.
    "powershell.integratedConsole.startInBackground": false,
  
    // Sets the startup location for Extension Terminal.
    //  - Editor: Creates the Extension Terminal in Editor area
    //  - Panel: Creates the Extension Terminal in Panel area
    "powershell.integratedConsole.startLocation": "Panel",
  
    // Do not show the startup banner in the PowerShell Extension Terminal.
    "powershell.integratedConsole.suppressStartupBanner": false,
  
    // This will disable the use of PSReadLine in the PowerShell Extension Terminal and use a legacy implementation. **This setting is not recommended and likely to be deprecated!**
    "powershell.integratedConsole.useLegacyReadLine": false
  
  },
  {
    // **Deprecated:** This setting was never meant to be changed!
    // **Deprecated:** Specifies the URL of the GitHub project in which to generate bug reports.
    "powershell.bugReporting.project": "https://github.com/PowerShell/vscode-powershell",
  
    // Specifies an alternative path to the folder containing modules that are bundled with the PowerShell extension, that is: PowerShell Editor Services, PSScriptAnalyzer and PSReadLine. **This setting is only meant for extension developers and requires the extension to be run in development mode!**
    "powershell.developer.bundledModulesPath": "../../PowerShellEditorServices/module",
  
    // Sets the log verbosity for both the extension and its LSP server, PowerShell Editor Services. **Please set to `Trace` when recording logs for a bug report!**
    //  - Trace: Enables all logging possible, please use this setting when submitting logs for bug reports!
    //  - Debug: Enables more detailed logging of the extension
    //  - Information: Logs high-level information about what the extension is doing.
    //  - Warning: Only log warnings and errors. This is the default setting
    //  - Error: Only log errors.
    //  - None: Disable all logging possible. No log files will be written!
    "powershell.developer.editorServicesLogLevel": "Warning",
  
    // Launches the LSP server with the `/waitForDebugger` flag to force it to wait for a .NET debugger to attach before proceeding, and emit its PID until then. **This setting is only meant for extension developers and requires the extension to be run in development mode!**
    "powershell.developer.editorServicesWaitForDebugger": false,
  
    // An array of strings that enable experimental features in the PowerShell extension. **No flags are currently available!**
    "powershell.developer.featureFlags": [],
  
    // On Windows we launch the PowerShell executable with `-ExecutionPolicy Bypass` so that the LSP server (PowerShell Editor Services module) will launch without issue. Some anti-virus programs disallow this command-line argument and this flag can be used to remove it. **Using this setting may require trusting the script manually in order for it to launch!**
    "powershell.developer.setExecutionPolicy": true,
  
    // Traces the DAP communication between VS Code and the PowerShell Editor Services [DAP Server](https://microsoft.github.io/debug-adapter-protocol/). The output will be logged and also visible in the Output pane, where the verbosity is configurable. **For extension developers and issue troubleshooting only!**
    "powershell.developer.traceDap": false,
  
    // Specifies how many seconds the extension will wait for the LSP server, PowerShell Editor Services, to connect. The default is four minutes; try increasing this value if your computer is particularly slow (often caused by overactive anti-malware programs).
    "powershell.developer.waitForSessionFileTimeoutSeconds": 240,
  
    // Traces the communication between VS Code and the PowerShell Editor Services [LSP Server](https://microsoft.github.io/language-server-protocol/). The output will be logged and also visible in the Output pane, where the verbosity is configurable. **For extension developers and issue troubleshooting only!**
    "powershell.trace.server": "off"
  
  },
  {
    // Specifies the order in which to display folders under Remote targets in the Remote Explorer.
    //  - most recently used: Display folders in order of the most recently opened at the top
    //  - alphabetical: Display folders in alphabetical order
    "remote-explorer.foldersSortOrder": "most recently used"
  
  },
  {
    // Always update the VS Code CLI if there is an update available.
    "remote.tunnels.alwaysUpdateCLI": false,
  
    // List of extensions that should be installed automatically on all tunnel hosts.
    "remote.tunnels.defaultExtensions": []
  
  },
  {
    // Enable to run fine-tuning and inference on Azure Container Apps (Reload Visual Studio Code after changing this setting to take effect).
    "windowsaistudio.enableRemoteFine-tuningAndInference": false,
  
    // List of external providers to register
    "windowsaistudio.externalOpenAIProviders": [],
  
    // The Open AI inference http local port
    "windowsaistudio.openAIInferencePort": null,
  
    // Playground Agent model storage path
    "windowsaistudio.playgroundAgentModelStorage": null,
  
    // Playground Agent Pipe name
    "windowsaistudio.playgroundAgentPipe": null,
  
    // List of remote inference endpoints
    "windowsaistudio.remoteInfereneEndpoints": [],
  
    // Branch to pull from the template repo
    "windowsaistudio.templateRef": null,
  
    // Workspace Agent Pipe name
    "windowsaistudio.workspaceAgentPipe": null
  
  },
  {
    // If enabled, other files in the workspace are searched when estimating types for a parameter. Disabling this will increase performance, but may reduce estimation accuracy.
    "workspace.searchEnabled": true,
  
    // The maximum number of files searched in a workspace search. Has no effect if workspace searching is disabled.
    "workspace.searchLimit": 10
  
  },
  {
    // Write the generated table using Markdown format instead of the default style.
    "csv-to-table.markdownFormat": false,
  
    // Open the generated table in a new editor window, instead of replacing the current editor's content.
    "csv-to-table.openGeneratedTableInNewEditor": true,
  
    // Align cell values that are numbers to the right side for easy comparison between other row values.
    "csv-to-table.rightAlignNumbers": true,
  
    // Convert the first row's values (header) in the table to upper-case.
    "csv-to-table.upperCaseHeader": false
  
  },
  {
    // Select an icon pack that enables specific icons.
    //  - angular: Icons for Angular.
    //  - angular_ngrx: Icons for Angular and ngrx.
    //  - react: Icons for React.
    //  - react_redux: Icons for React and Redux.
    //  - roblox: Icons for Roblox.
    //  - qwik: Icons for Qwik.
    //  - vue: Icons for Vue.
    //  - vue_vuex: Icons for Vue and Vuex.
    //  - nest: Icons for NestJS.
    //  - none: No icon pack enabled.
    "material-icon-theme.activeIconPack": "angular",
  
    // Enable logging to the output channel.
    "material-icon-theme.enableLogging": false,
  
    // Set custom file icon associations.
    "material-icon-theme.files.associations": {},
  
    // Change the color of the file icons.
    "material-icon-theme.files.color": "#90a4ae",
  
    // Clone any existing icon and create a new one with custom colors and associations
    "material-icon-theme.files.customClones": [],
  
    // Set custom folder icon associations.
    "material-icon-theme.folders.associations": {},
  
    // Change the color of the folder icons.
    "material-icon-theme.folders.color": "#90a4ae",
  
    // Clone any existing icon and create a new one with custom colors and associations
    "material-icon-theme.folders.customClones": [],
  
    // Set the type for the folder icons.
    //  - specific: Select specific folder icons.
    //  - classic: Select classic folder icons.
    //  - none: No folder icons.
    "material-icon-theme.folders.theme": "specific",
  
    // Hide explorer arrows before folder.
    "material-icon-theme.hidesExplorerArrows": false,
  
    // Set custom language icon associations.
    "material-icon-theme.languages.associations": {},
  
    // Clone any existing icon and create a new one with custom colors and associations
    "material-icon-theme.languages.customClones": [],
  
    // Set the log level for output messages.
    "material-icon-theme.logLevel": "info",
  
    // Change the opacity of the icons.
    "material-icon-theme.opacity": 1,
  
    // Set custom root folder icon associations.
    "material-icon-theme.rootFolders.associations": {},
  
    // Change the color of the root folder icons.
    "material-icon-theme.rootFolders.color": "#90a4ae",
  
    // Change the saturation of the icons.
    "material-icon-theme.saturation": 1
  
  },
  {
    // Background color of snippet container. Use any value for CSS `background-color`
    "polacode.backgroundColor": "#f2f2f2",
  
    // Shadow of the snippet node. Use any value for CSS `box-shadow`
    "polacode.shadow": "rgba(0, 0, 0, 0.55) 0px 20px 68px",
  
    // Shoot with or without container
    //  - container: Shoot with the container.
    //  - snippet: Shoot with the snippet alone. If you want transparent padding, use `container` with `"polacode.transparentBackground": true`
    "polacode.target": "container",
  
    // Transparent background for containers
    "polacode.transparentBackground": false
  
  },
  {
    // Controls the log level of the Rust crates that the language server depends on.
    "air.dependencyLogLevels": null,
  
    // The path to an `air` executable. Only utilized when `air.executableStrategy` is set to "path".
    "air.executablePath": null,
  
    // Strategy used to locate the `air` executable to start the language server with.
    //  - bundled: Always use the bundled `air` executable.
    //  - environment: Look for an `air` executable using the `PATH` environment variable, falling back to the bundled version.
    //  - path: Look for an `air` executable at the fixed path provided by `air.executablePath`.
    "air.executableStrategy": "bundled",
  
    // Controls the log level of the language server.
    "air.logLevel": null,
  
    // Whether settings from air.toml files should be propagated to the client (the IDE).
    "air.syncFileSettingsWithClient": true
  
  },
  {
    // Data Preview Charts library to use: d3fc || highcharts
    "data.preview.charts.plugin": "d3fc",
  
    // Create '.json' data files for Arrow, Avro, Parquet & Excel binary data formats
    "data.preview.create.json.files": false,
  
    // Create '.schema.json' file for Arrow & Avro metadata binary data formats
    "data.preview.create.json.schema": true,
  
    // Data Preview run log level: info || debug
    "data.preview.log.level": "info",
  
    // Opens created data file Content Editor on Data Save.
    "data.preview.openSavedFileEditor": true,
  
    // Data Preview UI Theme: light, dark, dense.light, dense.dark || vaporwave (hight constrast blue theme)
    "data.preview.theme": "dark"
  
  },
  {
    // Whether to check the version of the R package before launching the debugger.
    "r.debugger.checkVersion": "recommended",
  
    // Additional command line arguments used when launching R.
    "r.debugger.commandLineArgs": [],
  
    // Time in ms that is waited before handling input prompts on stdout (to avoid async issues).
    "r.debugger.timeouts.prompt": 0,
  
    // The maximum time in ms that is waited for R to startup. Is also used for some other timeouts.
    "r.debugger.timeouts.startup": 2000,
  
    // Time in ms that is waited when terminating R to allow messages etc. to appear.
    "r.debugger.timeouts.terminate": 50,
  
    // Whether to track terminals opened while using the extension. Recommended for debugging in attached mode on windows.
    "r.debugger.trackTerminals": false,
  
    // Path to an R executable for Linux. Must be "vanilla" R, not radian etc.!
    "r.rpath.linux": "",
  
    // Path to an R executable for macOS. Must be "vanilla" R, not radian etc.!
    "r.rpath.mac": "",
  
    // Path to an R executable for Windows. Must be "vanilla" R, not radian etc.!
    "r.rpath.windows": "",
  
    // Deprecated. Use `r.debugger.checkVersion` instead.
    // Whether to check the version of the R package before launching the debugger.
    "rdebugger.checkVersion": "",
  
    // Deprecated. Use `r.debugger.commandLineArgs` instead.
    // Additional command line arguments used when launching R.
    "rdebugger.rterm.args": [],
  
    // Deprecated. Use `r.rpath.linux` instead.
    // R path for Linux. If empty, the PATH is searched for an R executable.
    "rdebugger.rterm.linux": "",
  
    // Deprecated. Use `r.rpath.mac` instead.
    // R path for macOS. If empty, the PATH is searched for an R executable.
    "rdebugger.rterm.mac": "",
  
    // Deprecated. Use `r.rpath.windows` instead.
    // R.exe path for Windows. If empty, the registry and PATH are searched for an R executable.
    "rdebugger.rterm.windows": "",
  
    // Deprecated. Use `r.debugger.timeouts.prompt` instead.
    // Time in ms that is waited before handling input prompts on stdout (to avoid async issues).
    "rdebugger.timeouts.prompt": 0,
  
    // Deprecated. Use `r.debugger.timeouts.startup` instead.
    // The maximum time in ms that is waited for R to startup. Is also used for some other timeouts.
    "rdebugger.timeouts.startup": 0,
  
    // Deprecated. Use `r.debugger.timeouts.terminate` instead.
    // Time in ms that is waited when terminating R to allow messages etc. to appear.
    "rdebugger.timeouts.terminate": 0,
  
    // Deprecated. Use `r.debugger.trackTerminals` instead.
    // Whether to track terminals opened while using the extension. Recommended for debugging in attached mode on windows.
    "rdebugger.trackTerminals": false
  
  },
  {
    // Register XML catalog files. See how to configure [XML catalog with XSD](command:xml.open.docs?%5B%7B%22page%22%3A%22Validation%22%2C%22section%22%3A%22xml-catalog-with-xsd%22%7D%5D) or [XML catalog with DTD](command:xml.open.docs?%5B%7B%22page%22%3A%22Validation%22%2C%22section%22%3A%22xml-catalog-with-dtd%22%7D%5D) for more information.
    "xml.catalogs": [],
  
    // Enable/disable XML CodeLens. Default is `false`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22CodeLens%22%2C%22section%22%3A%22Code%20Lens%22%7D%5D) for information about CodeLens features
    "xml.codeLens.enabled": false,
  
    // Allows colors for the given file name patterns. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Features/XMLColorsFeatures%22%2C%22section%22%3A%22xmlcolorsfeatures%22%7D%5D) for more information.
    "xml.colors": [],
  
    // Enable/disable the content of an element being removed when the element start tag is turned into a self-closing tag. The default setting is to remove the content. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Preferences%22%2C%22section%22%3A%22auto-close-removes-content%22%7D%5D) for more information.
    "xml.completion.autoCloseRemovesContent": true,
  
    // Enable/disable autoclosing of XML tags. Default is `true`. 
    // 
    // IMPORTANT: Turn off `editor.autoClosingTags` for this to work.
    "xml.completion.autoCloseTags": true,
  
    // Download external resources like referenced DTD, XSD. Default is `true`.
    "xml.downloadExternalResources.enabled": true,
  
    // An array of paths to JARs that should be contributed to the LemMinX classpath. The paths can include glob patterns. This is intended to be used as a tool for developing extensions to vscode-xml. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Preferences%22%2C%22section%22%3A%22extension-jars%22%7D%5D) for more information
    "xml.extension.jars": [],
  
    // Allows XML schemas/ DTD to be associated to file name patterns. Please refer to [XML file association with XSD](command:xml.open.docs?%5B%7B%22page%22%3A%22Validation%22%2C%22section%22%3A%22xml-file-association-with-xsd%22%7D%5D) or [XML file association with DTD](command:xml.open.docs?%5B%7B%22page%22%3A%22Validation%22%2C%22section%22%3A%22xml-file-association-with-dtd%22%7D%5D) for more information. 
    // 
    // Example:
    // ```json
    // [{
    //   "pattern": "file1.xml",
    //   "systemId": "path/to/file.xsd"
    // },
    // {
    //   "pattern": "**/*.xsd",
    //   "systemId": "http://www.w3.org/2001/XMLSchema.xsd"
    // }]
    // ```
    "xml.fileAssociations": [],
  
    // Allows file path for the given file name patterns. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Features/XMLFilePathSupport%22%2C%22section%22%3A%22xmlfilepathsfeatures%22%7D%5D) for more information.
    "xml.filePathSupport.mappings": [],
  
    // Minimize the closing tag after folding. Default is `false`.
    "xml.foldings.includeClosingTagInFold": false,
  
    // The option to put a closing bracket on a newline when `xml.format.splitAttributes` is `true`. Default value is `false`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Formatting%22%2C%22section%22%3A%22xmlformatclosingbracketnewline%22%7D%5D) for more information.
    "xml.format.closingBracketNewLine": false,
  
    // Expand/collapse empty elements. Default is `ignore`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Formatting%22%2C%22section%22%3A%22xmlformatemptyelements%22%7D%5D) for more information.
    "xml.format.emptyElements": "ignore",
  
    // Enable/disable ability to format document. Default is `true`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Formatting%22%2C%22section%22%3A%22xmlformatenabled%22%7D%5D) for more information.
    "xml.format.enabled": true,
  
    // Enforce `preferred` quote style (set by `xml.preferences.quoteStyle`) or `ignore` quote style when formatting. Default is `ignore`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Formatting%22%2C%22section%22%3A%22xmlformatenforcequotestyle%22%7D%5D) for more information.
    //  - preferred: Use preferred quote style set by `xml.preferences.quoteStyle` when formatting.
    //  - ignore: Ignore quote style formatting.
    "xml.format.enforceQuoteStyle": "ignore",
  
    // Use Schema/DTD grammar information while formatting. Default is `true`. Not supported by legacy formatter. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Formatting%22%2C%22section%22%3A%22xmlformatgrammarawareformatting%22%7D%5D) for more information.
    "xml.format.grammarAwareFormatting": true,
  
    // Set to `true` to join lines in CDATA content during formatting. Default is `false`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Formatting%22%2C%22section%22%3A%22xmlformatjoincdatalines%22%7D%5D) for more information.
    "xml.format.joinCDATALines": false,
  
    // Join comment content on format. Default is `false`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Formatting%22%2C%22section%22%3A%22xmlformatjoincommentlines%22%7D%5D) for more information.
    "xml.format.joinCommentLines": false,
  
    // Normalize the whitespace of content inside an element. Newlines and excess whitespace are removed. Default is `false`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Formatting%22%2C%22section%22%3A%22xmlformatjoincontentlines%22%7D%5D) for more information.
    "xml.format.joinContentLines": false,
  
    // Enable/disable legacy formatter. Default is `false`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Formatting%22%2C%22section%22%3A%22xmlformatlegacy%22%7D%5D) for more information.
    "xml.format.legacy": false,
  
    // Max line width. Set to `0` to disable this setting. Default is `100`. Not supported by legacy formatter. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Formatting%22%2C%22section%22%3A%22xmlformatmaxlinewidth%22%7D%5D) for more information.
    "xml.format.maxLineWidth": 100,
  
    // Preserve line breaks that appear before and after attributes. This setting is overridden if `xml.format.splitAttributes` is set to `splitNewLine` or `alignWithFirstAttr`. Default is `true`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Formatting%22%2C%22section%22%3A%22xmlformatpreserveattributelinebreaks%22%7D%5D) for more information.
    "xml.format.preserveAttributeLineBreaks": true,
  
    // Preserve new lines that separate tags. The value represents the maximum number of new lines per section. A value of 0 removes all new lines. Default is `2`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Formatting%22%2C%22section%22%3A%22xmlformatpreservednewlines%22%7D%5D) for more information.
    "xml.format.preservedNewlines": 2,
  
    // Preserve empty content/whitespace in a tag. Default is `false`. Supported only with legacy formatter. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Formatting%22%2C%22section%22%3A%22xmlformatpreserveemptycontent%22%7D%5D) for more information.
    "xml.format.preserveEmptyContent": false,
  
    // Element names for which spaces will be preserved. Not supported by legacy formatter. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Formatting%22%2C%22section%22%3A%22xmlformatpreservespace%22%7D%5D) for more information.
    "xml.format.preserveSpace": [
      "xsl:text",
      "xsl:comment",
      "xsl:processing-instruction",
      "literallayout",
      "programlisting",
      "screen",
      "synopsis",
      "pre",
      "xd:pre"
    ],
  
    // Insert space before end of self closing tag. 
    // Example:
    //   ```<tag/> -> <tag />```. Default is `true`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Formatting%22%2C%22section%22%3A%22xmlformatspacebeforeemptyclosetag%22%7D%5D) for more information.
    "xml.format.spaceBeforeEmptyCloseTag": true,
  
    // Split multiple attributes each onto a new line or align attributes to the first. Default is `preserve`. Indicate level of indentation with `xml.format.splitAttributesIndentSize`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Formatting%22%2C%22section%22%3A%22xmlformatsplitattributes%22%7D%5D) for more information.
    "xml.format.splitAttributes": "preserve",
  
    // How many levels to indent the attributes by when `xml.format.splitAttributes` is `true`. Default value is `2`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Formatting%22%2C%22section%22%3A%22xmlformatsplitattributesindentsize%22%7D%5D) for more information
    "xml.format.splitAttributesIndentSize": 2,
  
    // Split `xsi:schemaLocation` content. Default is `onPair`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Formatting%22%2C%22section%22%3A%22xmlformatxsischemalocationsplit%22%7D%5D) for more information
    //  - onElement: Put a new line after each namespace and URI, arranging them into one column.
    //  - onPair: Put a new line after each URI, arranging the content into pairs of namespace and URI.
    //  - none: Ignore `xsi:schemaLocation` content formatting.
    "xml.format.xsiSchemaLocationSplit": "onPair",
  
    // Specifies the folder path to the JDK (11 or more recent) used to launch the XML Language Server if the Java server is being run.
    // On Windows, backslashes must be escaped, i.e.
    // `"xml.java.home": "C:\\Program Files\\Java\\jdk11"`. For more information, please refer to [this document](command:xml.open.docs?%5B%7B%22page%22%3A%22Preferences%22%2C%22section%22%3A%22java-home%22%7D%5D).
    "xml.java.home": null,
  
    // Enable/disable logging to the Output view. Default is `true`.
    "xml.logs.client": true,
  
    // Preferred quote style to use for completion: `single` quotes, `double` quotes. Default is `double`.
    "xml.preferences.quoteStyle": "double",
  
    // Specifies the source of the XML schema documentation displayed on hover and completion. Default is `all`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Preferences%22%2C%22section%22%3A%22documentation-type%22%7D%5D) for more information.
    //  - documentation: Documentation comes from the `xs:documentation` element.
    //  - appinfo: Documentation comes from the `xs:appinfo` element.
    //  - all: Documentation comes from the `xs:documentation` and `xs:appinfo` elements.
    //  - none: Displays no documentation.
    "xml.preferences.showSchemaDocumentationType": "all",
  
    // Allows references for the given file name patterns. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Features/XMLReferencesFeatures%22%2C%22section%22%3A%22xmlreferencesfeatures%22%7D%5D) for more information.
    "xml.references": [],
  
    // Command line arguments to supply to the binary server when the binary server is being used. Takes into effect after relaunching VSCode. Please refer to [this website for the available options](https://www.graalvm.org/reference-manual/native-image/HostedvsRuntimeOptions/). For example, you can increase the maximum memory that the server can use to 1 GB by adding `-Xmx1g`
    "xml.server.binary.args": "",
  
    // Specify the path of a custom binary version of the XML server to use. A binary will be downloaded if this is not set.
    "xml.server.binary.path": "",
  
    // List of the SHA256 hashes of trusted copies of the lemminx (XML language server) binary. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Preferences%22%2C%22section%22%3A%22trusted-binary-hashes%22%7D%5D) for more information
    "xml.server.binary.trustedHashes": [],
  
    // By default, vscode-xml tries to run the Java version of the XML Language Server. If no Java is detected, vscode-xml runs the binary XML language server. When this setting is enabled, the binary will also be used even if Java is installed. If there are additions to the XML Language Server provided by other extensions, Java will be used (if available) even if this setting is enabled.
    "xml.server.preferBinary": false,
  
    // The XML Language server allows other VSCode extensions to extend its functionality. It requires Java-specific features in order to do this. If extensions to the XML language server are detected, but a binary XML language server is run, a warning will appear. This setting can be used to disable this warning.
    "xml.server.silenceExtensionWarning": false,
  
    // Specifies extra VM arguments used to launch the XML Language Server. Eg. use `-Xmx1G  -XX:+UseG1GC -XX:+UseStringDeduplication` to increase the heap size to 1GB and enable String deduplication with the G1 Garbage collector. Please refer to [this document](command:xml.open.docs?%5B%7B%22page%22%3A%22Preferences%22%2C%22section%22%3A%22server-vm-arguments%22%7D%5D) for more information on the Java server arguments.
    "xml.server.vmargs": "-Xmx64M",
  
    // Set a custom folder path for cached XML Schemas. An absolute path is expected, although the `~` prefix (for the user home directory) is supported. Default is `~/.lemminx`. Please refer to the [cache documentation](command:xml.open.docs?%5B%7B%22page%22%3A%22Preferences%22%2C%22section%22%3A%22server-cache-path%22%7D%5D) for more information.
    "xml.server.workDir": "~/.lemminx",
  
    // Enable/disable document symbols (Outline). Default is `true`. No symbols are given if `"xml.symbols.enabled": false`.
    "xml.symbols.enabled": true,
  
    // Disable document symbols (Outline) for the given file name patterns. Updating file name patterns does not automatically reload the Outline view for the relevant file(s). Each file must either be reopened or changed, in order to trigger an Outline view reload.
    // 
    // Example:
    // ```
    // [
    //  "**/*LargeFile.xml"
    // ]```.
    "xml.symbols.excluded": [],
  
    // Allows XML symbols filter to be associated to file name patterns. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Symbols%22%2C%22section%22%3A%22xmlsymbolsfilters%22%7D%5D) for more information.. 
    // 
    // Example:
    // ```json
    // [
    //   {
    //     "pattern": "pom.xml",
    //     "expressions": [
    //       {
    //         "xpath": "//text()"
    //       }
    //     ]
    //   }
    // ]
    // ```
    "xml.symbols.filters": [],
  
    // The maximum number of outline symbols and folding regions computed (limited for performance reasons). Default is `5000`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Symbols%22%2C%22section%22%3A%22xmlsymbolsmaxitemscomputed%22%7D%5D) for more information.
    "xml.symbols.maxItemsComputed": 5000,
  
    // Show referenced grammars in the Outline. Default is `true`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Symbols%22%2C%22section%22%3A%22xmlsymbolsshowreferencedgrammars%22%7D%5D) for more information.
    "xml.symbols.showReferencedGrammars": true,
  
    // Traces the communication between VS Code and the XML language server in the Output view. Default is `off`.
    "xml.trace.server": "off",
  
    // Enable/disable if a fatal error is thrown if the incoming document contains a DOCTYPE declaration. Default is `false`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Validation%22%2C%22section%22%3A%22disallow-doc-type-declarations%22%7D%5D) for more information
    "xml.validation.disallowDocTypeDecl": false,
  
    // Enable/disable all validation. Default is `true`.
    "xml.validation.enabled": true,
  
    // 
    "xml.validation.filters": [
      {
        "pattern": "**.exsd",
        "noGrammar": "ignore",
        "schema": {
          "enabled": "never"
        }
      },
      {
        "pattern": "**{.project,.classpath,plugin.xml,feature.xml,category.xml,.target,.product}",
        "noGrammar": "ignore"
      }
    ],
  
    // Enable/disable namespaces validation. Default is `always`. Ignored if `xml.validation.enabled` is set to `false`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Validation%22%2C%22section%22%3A%22xmlnamespaceschemaenabled%22%7D%5D) for more information.
    //  - always: Enable namespaces validation.
    //  - never: Disable namespaces validation.
    //  - onNamespaceEncountered: Enable namespaces validation only when the root element declares an xmlns namespace.
    "xml.validation.namespaces.enabled": "always",
  
    // The message severity when a document has no associated grammar. Default is `hint`.
    "xml.validation.noGrammar": "hint",
  
    // Enable/disable resolve of external entities. Default is `false`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Validation%22%2C%22section%22%3A%22resolve-external-entities%22%7D%5D) for more information. Disabled for untrusted workspaces
    "xml.validation.resolveExternalEntities": false,
  
    // Enable/disable schema based validation. Default is `always`. Ignored if `xml.validation.enabled` is set to `false`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Validation%22%2C%22section%22%3A%22xmlvalidationschemaenabled%22%7D%5D) for more information.
    //  - always: Enable schema based validation.
    //  - never: Disable schema based validation.
    //  - onValidSchema: Enable schema based validation only when the declared xsi:schemaLocation hint or xsi:noNamespaceSchemaLocation is valid for the root element.
    "xml.validation.schema.enabled": "always",
  
    // Enable/disable validation for `xi:include`. Default is `false`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Validation%22%2C%22section%22%3A%22xmlvalidationxincludeenabled%22%7D%5D) for more information.
    "xml.validation.xInclude.enabled": false
  
  },
  {
    // Enable/disable completion feature
    "yaml.completion": true,
  
    // Custom tags for the parser to use
    "yaml.customTags": [],
  
    // Globally set additionalProperties to false for all objects. So if its true, no extra properties are allowed inside yaml.
    "yaml.disableAdditionalProperties": false,
  
    // Disable adding not required properties with default values into completion text.
    "yaml.disableDefaultProperties": false,
  
    // Suggest additional extensions based on YAML usage.
    "yaml.extension.recommendations": "true",
  
    // Print spaces between brackets in objects
    "yaml.format.bracketSpacing": true,
  
    // Enable/disable default YAML formatter
    "yaml.format.enable": true,
  
    // Specify the line length that the printer will wrap on
    "yaml.format.printWidth": 80,
  
    // Always: wrap prose if it exceeds the print width, Never: never wrap the prose, Preserve: wrap prose as-is
    "yaml.format.proseWrap": "preserve",
  
    // Use single quotes instead of double quotes
    "yaml.format.singleQuote": false,
  
    // Enable/disable hover feature
    "yaml.hover": true,
  
    // Enforces alphabetical ordering of keys in mappings when set to true
    "yaml.keyOrdering": false,
  
    // The maximum number of outline symbols and folding regions computed (limited for performance reasons).
    "yaml.maxItemsComputed": 5000,
  
    // Associate schemas to YAML files in the current workspace
    "yaml.schemas": {},
  
    // Automatically pull available YAML schemas from JSON Schema Store
    "yaml.schemaStore.enable": true,
  
    // URL of schema store catalog to use
    "yaml.schemaStore.url": "https://www.schemastore.org/api/json/catalog.json",
  
    // Forbid flow style mappings
    "yaml.style.flowMapping": "allow",
  
    // Forbid flow style sequences
    "yaml.style.flowSequence": "allow",
  
    // If true, the user must select some parent skeleton first before autocompletion starts to suggest the rest of the properties. When yaml object is not empty, autocompletion ignores this setting and returns all properties and skeletons
    "yaml.suggest.parentSkeletonSelectedFirst": false,
  
    // Traces the communication between VSCode and the YAML language service.
    "yaml.trace.server": "off",
  
    // Enable/disable validation feature
    "yaml.validate": true,
  
    // Default YAML spec version
    "yaml.yamlVersion": "1.2"
  
  },
  {
    // Use active terminal for all commands, rather than creating a new R terminal.
    "r.alwaysUseActiveTerminal": false,
  
    // Use bracketed paste mode when sending code to terminal. Enable for [radian](https://github.com/randy3k/radian) console.
    "r.bracketedPaste": false,
  
    // Whether/where to store parsed help indices between sessions.
    //  - None: Do not store anything
    //  - Workspace: Store on a per workspace basis
    //  - Global: Store globally
    "r.helpPanel.cacheIndexFiles": "None",
  
    // What happens when clicking code examples on help pages. Might require restarting to take effect.
    "r.helpPanel.clickCodeExamples": {
      "Click": "Copy",
      "Ctrl+Click": "Run",
      "Shift+Click": "Ignore"
    },
  
    // Show links to matching help pages in hover
    "r.helpPanel.enableHoverLinks": true,
  
    // Enable syntax highlighting in the help panel.
    "r.helpPanel.enableSyntaxHighlighting": true,
  
    // Which local directories to try for local help pages previewer. Set to `[]` to disable.
    "r.helpPanel.previewLocalPackages": [
      "."
    ],
  
    // Will be deprecated. Use `r.rpath.windows#`, `#r.rpath.mac#`, or `#r.rpath.linux` instead.
    // DEPRECATED! Path to an R executable. Must be "vanilla" R, not radian etc.! Will be read from registry or path if not set.
    "r.helpPanel.rpath": "",
  
    // Additional library paths to launch R background processes (R languageserver, help server, etc.). These paths will be appended to `.libPaths()` on process startup. It could be useful for projects with [renv](https://rstudio.github.io/renv/index.html) enabled.
    "r.libPaths": [],
  
    // Default boolean value for guest command forwarding.
    "r.liveShare.defaults.commandForward": false,
  
    // Default boolean value for automatically sharing R browser ports with guests.
    "r.liveShare.defaults.shareBrowser": false,
  
    // Default boolean value for sharing the R workspace with guests.
    "r.liveShare.defaults.shareWorkspace": true,
  
    // Time in milliseconds before aborting attempt to connect to Live Share API.
    "r.liveShare.timeout": 10000,
  
    // The command line arguments to use when launching R Language Server.
    "r.lsp.args": [],
  
    // Debug R Language Server.
    "r.lsp.debug": false,
  
    // Enable diagnostics.
    "r.lsp.diagnostics": true,
  
    // Enable the R language service to provide code analysis features (completion, signature, hover, diagnostics, definition, etc.)
    "r.lsp.enabled": true,
  
    // Override default `LANG` environment variable.
    "r.lsp.lang": "",
  
    // Use multiple language servers for [multi-root workspaces](https://code.visualstudio.com/docs/editor/multi-root-workspaces). If disabled, only one language server will be used to handle all requests from all workspaces and files.
    "r.lsp.multiServer": true,
  
    // Prompt to install R Language Server if it is not installed.
    "r.lsp.promptToInstall": true,
  
    // Use STDIO connection instead of TCP. (Unix/macOS users only)
    "r.lsp.use_stdio": false,
  
    // Path to a custom CSS file to be used when `r.plot.defaults.colorTheme` is `vscode`. Replaces the default CSS overwrites!
    "r.plot.customStyleOverwrites": "",
  
    // Which color theme to use when launching the httpgd plot viewer.
    //  - vscode: Match background and primary stroke color to the current color theme (Or apply custom CSS overwrites, if specified in `r.plot.customStyleOverwrites`)
    //  - original: Use original colors
    "r.plot.defaults.colorTheme": "original",
  
    // Whether to use full window mode when launching the httpgd plot viewer.
    "r.plot.defaults.fullWindowMode": false,
  
    // How to display plot previews if more than one row required.
    //  - multirow: Show in multiple rows
    //  - scroll: Show scrollbar
    //  - hidden: Don't show preview plots
    "r.plot.defaults.plotPreviewLayout": "multirow",
  
    // The arguments for the png device to replay user graphics to show in VSCode. Requires `r.plot.useHttpgd` to be set to `false`. 
    // 
    // Changes the option `vsc.dev.args` in R.
    "r.plot.devArgs": {
      "width": 800,
      "height": 1200
    },
  
    // Interval in ms to wait between plot refreshs.
    "r.plot.timing.refreshInterval": 10,
  
    // Interval in ms to wait between plot resizes.
    "r.plot.timing.resizeInterval": 100,
  
    // Use the httpgd-based plot viewer instead of the base VSCode-R plot viewer. Changes the option `vsc.use_httpgd` in R.
    // 
    // Requires the `httpgd` R package version 1.2.0 or later.
    "r.plot.useHttpgd": false,
  
    // Remove leading comments when sending code to terminal.
    "r.removeLeadingComments": false,
  
    // RMarkdown chunk background color in RGBA or RGB value. Defaults to rgba(128, 128, 128, 0.1). Leave it empty to disable it (use default editor background color). Reload VS Code after changing settings.
    // 
    // Learn how to set colors: https://www.w3schools.com/css/css_colors_rgb.asp.
    // 
    // Examples for syntax rgba(<red>, <green>, <blue>, <alpha>):
    // rgba(128, 128, 128, 0.1)
    // rgba(128, 128, 128, 0.3)
    // rgba(255, 165, 0, 0.1)
    // 
    // 
    "r.rmarkdown.chunkBackgroundColor": "rgba(128, 128, 128, 0.1)",
  
    // Customize RMarkdown CodeLens, which are inline commands/buttons e.g. 'Run Chunk' shown on the first line of each code chunk. 
    // Customize both the commands AND its orders (that is, CodeLens respect user-specified orders):
    "r.rmarkdown.codeLensCommands": [
      "r.runCurrentChunk",
      "r.runAboveChunks"
    ],
  
    // Enable RMarkdown CodeLens, which are inline commands/buttons e.g. 'Run Chunk | Run Above' shown on the first line of each code chunk.
    // 
    // - Click the buttons to run commands.
    // - Hover on the buttons to show tooltips.
    // - CodeLens commands are customizable via `r.rmarkdown.codeLensCommands` or settings.json `r.rmarkdown.codeLensCommands`
    "r.rmarkdown.enableCodeLens": true,
  
    // Command used to knit a Rmd file if not specified by the frontmatter.
    "r.rmarkdown.knit.command": "rmarkdown::render",
  
    // What working directory should R Markdown chunks be evaluated in? Default knit behaviour is to use the document's directory as root.
    // 
    // Requires `r.rmarkdown.knit.useBackgroundProcess` to be set to `true`.
    //  - document directory: Use the document's directory as the knit directory
    //  - workspace root: Use the workspace root as the knit directory
    "r.rmarkdown.knit.defaults.knitWorkingDirectory": "document directory",
  
    // Should the R Markdown output channel be focused when knitting?
    // 
    // Requires `r.rmarkdown.knit.useBackgroundProcess` to be set to `true`.
    "r.rmarkdown.knit.focusOutputChannel": true,
  
    // Should the output file be opened automatically when using knit?
    // 
    // Requires `r.rmarkdown.knit.useBackgroundProcess` to be set to `true`.
    "r.rmarkdown.knit.openOutputFile": false,
  
    // Should knitting occur in a background process (*smart knitting*), or should it be done in the current R terminal (*manual knitting*)? 
    // 
    // *Smart knitting* includes additional features, such as custom knit function detection, R Markdown site detection, progress bars, and the setting knit directory.
    "r.rmarkdown.knit.useBackgroundProcess": true,
  
    // Enable automatic refresh of R Markdown preview on file update.
    "r.rmarkdown.preview.autoRefresh": true,
  
    // Controls the zoom of the R Markdown preview.
    "r.rmarkdown.preview.zoom": 1,
  
    // R path for interactive terminals (Linux). Can also be radian etc. Some variables defined in <https://code.visualstudio.com/docs/editor/variables-reference> such as `${userHome}`, `${workspaceFolder}`, `${fileWorkspaceFolder}`, and `${fileDirname}` are supported.
    "r.rterm.linux": "",
  
    // R path for interactive terminals (macOS). Can also be radian etc. Some variables defined in <https://code.visualstudio.com/docs/editor/variables-reference> such as `${userHome}`, `${workspaceFolder}`, `${fileWorkspaceFolder}`, and `${fileDirname}` are supported.
    "r.rterm.mac": "",
  
    // R command line options.
    "r.rterm.option": [
      "--no-save",
      "--no-restore"
    ],
  
    // R path for interactive terminals (Windows). Can also be radian etc. Some variables defined in <https://code.visualstudio.com/docs/editor/variables-reference> such as `${userHome}`, `${workspaceFolder}`, `${fileWorkspaceFolder}`, and `${fileDirname}` are supported.
    "r.rterm.windows": "",
  
    // Delay in milliseconds before sending each line to rterm. Requires `r.bracketedPaste` to be `false`.
    "r.rtermSendDelay": 8,
  
    // The maximum number of rows per page in the data viewer. `0` means to disable pagination.
    "r.session.data.pageSize": 500,
  
    // The maximum number of rows to be displayed in the data viewer. `0` means no limit. Changes the option `vsc.row_limit` in R. Requires `r.sessionWatcher` to be set to `true`.
    "r.session.data.rowLimit": 0,
  
    // Emulate the RStudio API for addin support and other {rstudioapi} calls. Changes the option `vsc.rstudioapi` in R. Requires `r.sessionWatcher` to be set to `true`.
    "r.session.emulateRStudioAPI": true,
  
    // How much of the object to show on hover, autocompletion, and in the workspace viewer? Changes the option `vsc.str.max.level` in R. Requires `r.sessionWatcher` to be set to `true`.
    //  - Minimal: Display literal values and object types only.
    //  - Normal: Display the top level of list content, data frame column values, and example values.
    //  - Detailed: Display the top two levels of list content, data frame column values, and example values. This option may cause notable delay after each user input in the terminal.
    "r.session.levelOfObjectDetail": "Minimal",
  
    // The upper limit of object length to show object details in workspace viewer and provide session symbol completion. Decrease this value if you experience significant delay after executing R commands caused by large global objects with many elements. Changes the option `vsc.object_length_limit` in R. Requires `r.sessionWatcher` to be set to `true`.
    "r.session.objectLengthLimit": 2000,
  
    // The maximum number of milliseconds to get information of a single object in the global environment. Decrease this value if you experience significant delay after executing R commands caused by large global objects with many elements. Changes the option `vsc.object_timeout` in R. Requires `r.sessionWatcher` to be set to `true`.
    "r.session.objectTimeout": 50,
  
    // Enable experimental use of web server in the R session to handle session requests from the extension. Changes the option `vsc.use_webserver` in R. Requires `r.sessionWatcher` to be set to `true`. Requires the `httpuv` R package.
    "r.session.useWebServer": false,
  
    // Which view column should R-related webviews be displayed? Requires `r.sessionWatcher` to be set to `true`.
    "r.session.viewers.viewColumn": {
      "plot": "Two",
      "browser": "Active",
      "viewer": "Two",
      "pageViewer": "Active",
      "view": "Two",
      "helpPanel": "Two"
    },
  
    // Watch the global environment to provide hover, autocompletions, and workspace viewer information. Changes the option `vsc.globalenv` in R. Requires `r.sessionWatcher` to be set to `true`.
    "r.session.watchGlobalEnvironment": true,
  
    // Enable R session watcher. Required for workspace viewer and most features to work with an R session. Restart required to take effect.
    "r.sessionWatcher": true,
  
    // Should the file be executed with echo option set to TRUE by default, i.e. `source(FILE, echo=TRUE)`?
    "r.source.echo": false,
  
    // An optional encoding to pass to R when executing the file, i.e. `source(FILE, encoding=ENCODING)`.
    "r.source.encoding": "UTF-8",
  
    // What to show/focus after sending code to terminal.
    //  - editor: Focus editor when sending code to terminal
    //  - terminal: Focus terminal when sending code to terminal
    //  - none: Do not show terminal when sending code to terminal
    "r.source.focus": "editor",
  
    // Use renv library paths to launch R background processes (R languageserver, help server, etc.).
    "r.useRenvLibPath": false,
  
    // Prompt the user for confirmation when clearing the workspace.
    "r.workspaceViewer.clearPrompt": true,
  
    // Remove hidden items when clearing workspace.
    "r.workspaceViewer.removeHiddenItems": false,
  
    // Show object size when hovering over a workspace viewer item. Changes the option `vsc.show_object_size` in R.
    "r.workspaceViewer.showObjectSize": false
  
  },
  {
    // Commands that can be auto-executed when 'Always approve execute operations' is enabled
    "roo-cline.allowedCommands": [
      "npm test",
      "npm install",
      "tsc",
      "git log",
      "git diff",
      "git show"
    ],
  
    // Custom storage path. Leave empty to use the default location. Supports absolute paths (e.g. 'D:\RooCodeStorage')
    "roo-cline.customStoragePath": "",
  
    // Settings for VSCode Language Model API
    "roo-cline.vsCodeLmModelSelector": {}
  
  },
  {
    // Path to Chrome executable for browser use functionality. If not set, the extension will attempt to find or download it automatically.
    "cline.chromeExecutablePath": null,
  
    // Disables extension from spawning browser session.
    "cline.disableBrowserTool": false,
  
    // Enables extension to save checkpoints of workspace throughout the task. Uses git under the hood which may not work well with large workspaces.
    "cline.enableCheckpoints": true,
  
    // Controls MCP inclusion in prompts, reduces token usage if you only need access to certain functionality.
    //  - full: Enable all MCP functionality (server use and build instructions)
    //  - server-use-only: Enable MCP server use only (excludes instructions about building MCP servers)
    //  - off: Disable all MCP functionality
    "cline.mcp.mode": "full",
  
    // Controls whether the MCP Marketplace is enabled.
    "cline.mcpMarketplace.enabled": true,
  
    // Controls the reasoning effort when using the o3-mini model. Higher values may result in more thorough but slower responses.
    "cline.modelSettings.o3Mini.reasoningEffort": "medium",
  
    // The language that Cline should use for communication.
    "cline.preferredLanguage": "English",
  
    // Settings for VSCode Language Model API
    "cline.vsCodeLmModelSelector": {}
  
  },
  {
    // Always show backlinks in preview.
    "markdown-preview-enhanced.alwaysShowBacklinksInPreview": false,
  
    // Automatically show preview of markdown being edited.
    "markdown-preview-enhanced.automaticallyShowPreviewOfMarkdownBeingEdited": false,
  
    // In Markdown, a single newline character doesn't cause a line break in the generated HTML. In GitHub Flavored Markdown, that is not true. Enable this config option to insert line breaks in rendered HTML for single newlines in Markdown source.
    "markdown-preview-enhanced.breakOnSingleNewLine": true,
  
    // Chrome executable path, which is used for Puppeteer export. Leaving it empty means the path will be found automatically.
    "markdown-preview-enhanced.chromePath": "",
  
    // Code block theme. If `auto.css` is chosen, then the code block theme that best matches the current preview theme will be picked.
    "markdown-preview-enhanced.codeBlockTheme": "auto.css",
  
    // Restart is required after changes. The global configuration directory path. Leave it empty to use `$HOME/.crossnote` for Windows or `$XDG_CONFIG_HOME/.crossnote` or `$HOME/.local/state/crossnote` as the config path.
    "markdown-preview-enhanced.configPath": "",
  
    // Enable CriticMarkup syntax. Only works with markdown-it parser. Please check http://criticmarkup.com/users-guide.php for more information.
    "markdown-preview-enhanced.enableCriticMarkupSyntax": false,
  
    // Enable emoji & font-awesome plugin. This only works for markdown-it parser, but not pandoc parser.
    "markdown-preview-enhanced.enableEmojiSyntax": true,
  
    // Enable extended table syntax to support merging table cells.
    "markdown-preview-enhanced.enableExtendedTableSyntax": false,
  
    //  Enables transform audio video link to to html5 embed audio video tags.
    "markdown-preview-enhanced.enableHTML5Embed": false,
  
    // Enable or disable conversion of URL-like text to links in the markdown preview.
    "markdown-preview-enhanced.enableLinkify": true,
  
    // Enable this option will hide unnecessary UI elements in preview unless your mouse is over it.
    "markdown-preview-enhanced.enablePreviewZenMode": true,
  
    // Enables executing code chunks and importing javascript files.
    // ⚠️ Please use this feature with caution because it may put your security at risk! Your machine can get hacked if someone makes you open a markdown with malicious code while script execution is enabled.
    "markdown-preview-enhanced.enableScriptExecution": false,
  
    // Enable smartypants and other sweet transforms.
    "markdown-preview-enhanced.enableTypographer": false,
  
    // Enable Wiki Link syntax support. More information can be found at https://help.github.com/articles/adding-links-to-wikis/
    "markdown-preview-enhanced.enableWikiLinkSyntax": true,
  
    // Front matter rendering option
    "markdown-preview-enhanced.frontMatterRenderingOption": "none",
  
    // Hide the default VSCode markdown preview extension buttons. Restarting the editor is required to make this config take effect.
    "markdown-preview-enhanced.hideDefaultVSCodeMarkdownPreviewButtons": true,
  
    // HTML attributes to pass to audio tags.
    "markdown-preview-enhanced.HTML5EmbedAudioAttributes": "controls preload=\"metadata\" width=\"320\"",
  
    // When true embed media with http:// schema in URLs. When false ignore and don't embed them.
    "markdown-preview-enhanced.HTML5EmbedIsAllowedHttp": false,
  
    //  Enables video/audio embed with ![]() syntax (default).
    "markdown-preview-enhanced.HTML5EmbedUseImageSyntax": true,
  
    // Enables video/audio embed with []() syntax.
    "markdown-preview-enhanced.HTML5EmbedUseLinkSyntax": false,
  
    // HTML attributes to pass to video tags.
    "markdown-preview-enhanced.HTML5EmbedVideoAttributes": "controls preload=\"metadata\" width=\"320\" height=\"240\"",
  
    // When using Image Helper to copy images, by default images will be copied to root image folder path '/assets'
    "markdown-preview-enhanced.imageFolderPath": "/assets",
  
    // ImageMagick command line path. Should be either `magick` or `convert`. Leaving it empty means the path will be found automatically.
    "markdown-preview-enhanced.imageMagickPath": "",
  
    // You can choose different image uploader to upload image
    "markdown-preview-enhanced.imageUploader": "imgur",
  
    // jsDelivr CDN host. Example values: `cdn.jsdelivr.net`, `fastly.jsdelivr.net`, `gcore.jsdelivr.net`, `testingcf.jsdelivr.net`
    "markdown-preview-enhanced.jsdelivrCdnHost": "cdn.jsdelivr.net",
  
    // The URL of the Kroki server to use.  
    "markdown-preview-enhanced.krokiServer": "https://kroki.io",
  
    // Default latex engine for Pandoc export and latex code chunk.
    "markdown-preview-enhanced.latexEngine": "pdflatex",
  
    // Re-render the preview as the contents of the source changes, without requiring the source buffer to be saved. If disabled, the preview is re-rendered only when the buffer is saved to disk.
    "markdown-preview-enhanced.liveUpdate": true,
  
    // Markdown file extensions. This is used to determine whether to show the preview button in the markdown file context menu.
    "markdown-preview-enhanced.markdownFileExtensions": [
      ".md",
      ".markdown",
      ".mdown",
      ".mkdn",
      ".mkd",
      ".rmd",
      ".qmd",
      ".mdx"
    ],
  
    // Use customized Math expression block delimiters.
    "markdown-preview-enhanced.mathBlockDelimiters": [
      [
        "$$",
        "$$"
      ],
      [
        "\\[",
        "\\]"
      ]
    ],
  
    // Use customized Math expression inline delimiters.
    "markdown-preview-enhanced.mathInlineDelimiters": [
      [
        "$",
        "$"
      ],
      [
        "\\(",
        "\\)"
      ]
    ],
  
    // MathJax v3 script source. Leave it empty to use the default CDN.
    "markdown-preview-enhanced.mathjaxV3ScriptSrc": "https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js",
  
    // Choose the Math expression rendering method option for GFM markdown export (Save as Markdown).
    "markdown-preview-enhanced.mathRenderingOnlineService": "https://latex.codecogs.com/gif.latex",
  
    // Choose the Math expression rendering method here. You can also disable math rendering if you want by choosing 'None'.
    "markdown-preview-enhanced.mathRenderingOption": "KaTeX",
  
    // Mermaid theme, you can choose one from ["mermaid.css", "mermaid.dark.css", "mermaid.forest.css"]
    "markdown-preview-enhanced.mermaidTheme": "default",
  
    // Args passed to pandoc command e.g. ["--smart", "--filter=/bin/exe"] Please use long argument names.
    "markdown-preview-enhanced.pandocArguments": [],
  
    // The pandoc markdown flavor you want
    "markdown-preview-enhanced.pandocMarkdownFlavor": "markdown-raw_tex+tex_math_single_backslash",
  
    // Pandoc executable path
    "markdown-preview-enhanced.pandocPath": "pandoc",
  
    // Absolute path to the plantuml.jar file (`java` is required in system path).
    "markdown-preview-enhanced.plantumlJarPath": "",
  
    // Render using PlantUML server instead of binary. Leave it empty to use the builtin plantuml.jar binary (`java` is required in system path). Eg: "http://localhost:8080/svg/"
    "markdown-preview-enhanced.plantumlServer": "",
  
    // 
    //  - selectedPreviewTheme: Use the `markdown-preview-enhanced.previewTheme` setting.
    //  - systemColorScheme: Follow system color scheme. If set to true, then the theme of markdown preview will automatically switch between light and dark when your system switch between light and dark. For example, if you set the current preview theme to `github-light.css`, then when your system is dark, the preview theme will be switched to `github-dark.css` automatically. If set to false, then the theme of markdown preview will not be changed automatically.
    //  - editorColorScheme: Use the same theme as the editor (light or dark). If set to true, then the theme of markdown preview will automatically switch between light and dark when you switch between vscode light and dark theme. For example, if you set the current preview theme to `github-light.css`, then when you switch to vscode dark theme, the preview theme will be switched to `github-dark.css` automatically. If set to false, then the theme of markdown preview will not be changed automatically.
    "markdown-preview-enhanced.previewColorScheme": "selectedPreviewTheme",
  
    // - **Single Preview**: Only one preview will be shown for all editors.
    // - **Multiple Previews**: Multiple previews will be shown. Each editor has its own preview.
    // - **Previews Only**: No editor will be shown. Only previews will be shown. You can use the in-preview editor to edit the markdown.
    // 
    // Restart is required after changes.
    "markdown-preview-enhanced.previewMode": "Single Preview",
  
    // Preview Theme
    //  - atom-dark.css: Atom Dark
    //  - atom-light.css: Atom Light
    //  - atom-material.css: Atom Material
    //  - github-dark.css: GitHub Dark
    //  - github-light.css: GitHub Light
    //  - gothic.css: Gothic
    //  - medium.css: Medium
    //  - monokai.css: Monokai
    //  - newsprint.css: Newsprint
    //  - night.css: Night
    //  - none.css: None
    //  - one-dark.css: One Dark
    //  - one-light.css: One Light
    //  - solarized-dark.css: Solarized Dark
    //  - solarized-light.css: Solarized Light
    //  - vue.css: Vue
    "markdown-preview-enhanced.previewTheme": "github-light.css",
  
    // Whether to print background for file export or not. If set to `false`, then `github-light` preview theme will be used. You can also set `print_background` in front-matter for individual files.
    "markdown-preview-enhanced.printBackground": false,
  
    // Accepted protocols for links.
    "markdown-preview-enhanced.protocolsWhiteList": "http://, https://, atom://, file://, mailto:, tel:",
  
    // Args passed to puppeteer.launch({args: $puppeteerArgs})
    "markdown-preview-enhanced.puppeteerArgs": [],
  
    // Puppeteer waits for a certain timeout in milliseconds before the document export.
    "markdown-preview-enhanced.puppeteerWaitForTimeout": 0,
  
    // Qiniu AccessKey
    "markdown-preview-enhanced.qiniuAccessKey": "",
  
    // Qiniu Bucket
    "markdown-preview-enhanced.qiniuBucket": "",
  
    // Qiniu Domain
    "markdown-preview-enhanced.qiniuDomain": "http://",
  
    // Qiniu SecretKey
    "markdown-preview-enhanced.qiniuSecretKey": "",
  
    // RevealJS Presentation Theme
    "markdown-preview-enhanced.revealjsTheme": "white.css",
  
    // Automatic scroll sync. This is now partially supported.
    "markdown-preview-enhanced.scrollSync": true,
  
    // If checked, we use GitHub style piped wiki links, i.e. [[linkText|wikiLink]]. Otherwise, we use [[wikiLink|linkText]] as the original Wikipedia style.
    "markdown-preview-enhanced.useGitHubStylePipedLink": false,
  
    // Enable this option will render markdown by pandoc instead of markdown-it.
    "markdown-preview-enhanced.usePandocParser": false,
  
    // The file extension for the link in wikilink if the link does not have an extension.
    "markdown-preview-enhanced.wikiLinkTargetFileExtension": ".md",
  
    // The case for the file name in wikilink. If the value is `none`, then the file name will not be changed. Otherwise, the file name will be transformed to the specified case. You can read https://www.npmjs.com/package/case-anything for more details.
    "markdown-preview-enhanced.wikiLinkTargetFileNameChangeCase": "none"
  
  },
  {
    // The maximum amount of keys in a dotted key to display during completion, 0 effectively disables key completions.
    "evenBetterToml.completion.maxKeys": 5,
  
    // Align consecutive comments after entries and items vertically. This applies to comments that are after entries or array items
    "evenBetterToml.formatter.alignComments": null,
  
    // Align entries vertically. Entries that have table headers, comments, or blank lines between them are not aligned.
    "evenBetterToml.formatter.alignEntries": null,
  
    // The maximum amount of consecutive blank lines allowed.
    "evenBetterToml.formatter.allowedBlankLines": null,
  
    // Automatically collapse arrays if they fit in one line.
    "evenBetterToml.formatter.arrayAutoCollapse": null,
  
    // Automatically expand arrays to multiple lines.
    "evenBetterToml.formatter.arrayAutoExpand": null,
  
    // Put trailing commas for multiline arrays.
    "evenBetterToml.formatter.arrayTrailingComma": null,
  
    // Target maximum column width after which arrays are expanded into new lines.
    "evenBetterToml.formatter.columnWidth": null,
  
    // Omit whitespace padding inside single-line arrays.
    "evenBetterToml.formatter.compactArrays": null,
  
    // Omit whitespace around `=`.
    "evenBetterToml.formatter.compactEntries": null,
  
    // Omit whitespace padding inside inline tables.
    "evenBetterToml.formatter.compactInlineTables": null,
  
    // Use CRLF line endings.
    "evenBetterToml.formatter.crlf": null,
  
    // Indent entries under tables.
    "evenBetterToml.formatter.indentEntries": null,
  
    // Indentation to use, should be tabs or spaces but technically could be anything.
    "evenBetterToml.formatter.indentString": null,
  
    // Indent subtables if they come in order.
    "evenBetterToml.formatter.indentTables": null,
  
    // Expand values inside in line tables.
    "evenBetterToml.formatter.inlineTableExpand": null,
  
    // Alphabetically reorder array values that are not separated by blank lines.
    "evenBetterToml.formatter.reorderArrays": null,
  
    // Alphabetically reorder inline tables.
    "evenBetterToml.formatter.reorderInlineTables": null,
  
    // Alphabetically reorder keys that are not separated by blank lines.
    "evenBetterToml.formatter.reorderKeys": null,
  
    // Add trailing newline to the source.
    "evenBetterToml.formatter.trailingNewline": null,
  
    // Array of Taplo rules in JSON format, see [Configuration File - Rules](https://taplo.tamasfe.dev/configuration/file.html#rules). The rules given here are appended to existing rules from config files, if any. There is no conversion done, all object keys must be snake_case, including formatting rules.
    "evenBetterToml.rules": [],
  
    // Additional document and schema associations. 
    // 
    //  The key must be a regular expression, this pattern is used to associate schemas with absolute document URIs. Overlapping patterns result in undefined behaviour and either matching schema can be used. 
    // 
    //  The value must be an absolute URI to the JSON schema, for supported values and more information [read here](https://taplo.tamasfe.dev/configuration#visual-studio-code).
    "evenBetterToml.schema.associations": {},
  
    // The amount of seconds after which cached catalogs and schemas expire and will be attempted to be fetched again.
    "evenBetterToml.schema.cache.diskExpiration": 600,
  
    // The amount of seconds after which schemas will be invalidated from memory. 
    // **NOTE**: setting too low values will cause performance issues and validation of some schemas will fail.
    "evenBetterToml.schema.cache.memoryExpiration": 60,
  
    // A list of URLs to schema catalogs where schemas and associations can be fetched from
    "evenBetterToml.schema.catalogs": [
      "https://www.schemastore.org/api/json/catalog.json"
    ],
  
    // Enable completion and validation based on JSON schemas.
    "evenBetterToml.schema.enabled": true,
  
    // Whether to show clickable links for keys in the editor.
    "evenBetterToml.schema.links": false,
  
    // Enable semantic tokens for inline table and array keys.
    "evenBetterToml.semanticTokens": false,
  
    // Whether to enable semantic tokens for tables and arrays.
    "evenBetterToml.syntax.semanticTokens": true,
  
    // Use the bundled taplo language server. If set to `false`, the `taplo` executable must be found in PATH or must be set in `evenBetterToml.taplo.path`.
    "evenBetterToml.taplo.bundled": true,
  
    // Whether to enable the usage of a Taplo configuration file.
    "evenBetterToml.taplo.configFile.enabled": true,
  
    // An absolute, or workspace relative path to the Taplo configuration file.
    "evenBetterToml.taplo.configFile.path": null,
  
    // Environment variables for Taplo.
    "evenBetterToml.taplo.environment": {},
  
    // Additional arguments for Taplo. Has no effect for the bundled LSP.
    "evenBetterToml.taplo.extraArgs": [],
  
    // An absolute path to the `taplo` executable. `evenBetterToml.taplo.bundled` needs to be set to `false` for this to have any effect.
    "evenBetterToml.taplo.path": null
  
  },
  {
    // The default cursol tool for preview.
    "pdf-preview.default.cursor": "select",
  
    // The default zoom level for preview. Allowed values are `auto`, `page-actual`, `page-fit`, `page-width`, and 1-based scale values. (`1.0` means 100%)
    "pdf-preview.default.scale": "auto",
  
    // The default scroll mode for preview.
    "pdf-preview.default.scrollMode": "vertical",
  
    // Show the sidebar on load. The default visiblity of sidebar for preview.
    "pdf-preview.default.sidebar": false,
  
    // The default spread mode for preview.
    "pdf-preview.default.spreadMode": "none"
  
  },
  {
    // Logging level for console
    "intellicodeApiExamples.loggingLevel": "INFO",
  
    // Enable API Usage Examples for Python files
    "intellicodeApiExamples.python.enabled": true,
  
    // Enable API Usage Examples for Typescript/Javascript files
    "intellicodeApiExamples.typescript.enabled": true
  
  },
  {
    // Allow to run tasks in parallel, each running will create a new terminal. This configuration will override `gradle.reuseTerminals` and always create new task terminals when running or debugging a task.
    "gradle.allowParallelRun": false,
  
    // Controls whether Gradle tasks should be automatically detected
    "gradle.autoDetect": "on",
  
    // Show extra debug information in the output panel
    "gradle.debug": false,
  
    // Disable the warning confirm messages when performing batch actions
    "gradle.disableConfirmations": false,
  
    // Focus the task in the explorer when running a task
    "gradle.focusTaskInExplorer": true,
  
    // This setting will be removed in the future since the extension can automatically get debug tasks, for clean options, please see `gradle.javaDebug.cleanOutput`.
    // Java debug options
    "gradle.javaDebug": {
      "tasks": [
        "run",
        "runBoot",
        "test",
        "intTest",
        "integration"
      ]
    },
  
    // Clean the task output cache before debugging
    "gradle.javaDebug.cleanOutput": true,
  
    // Discover Gradle projects in nested sub-directories
    "gradle.nestedProjects": false,
  
    // Default method of opening newly created project.
    "gradle.projectOpenBehaviour": "Interactive",
  
    // Reuse task terminals behaviour, will be overridden to `off` if `gradle.allowParallelRun` is true.
    //  - task: Use a dedicated terminal for a specific task. The terminal is not shared with other tasks.
    //  - off: Create a new terminal when a task is executed.
    //  - all: Share the terminal with other tasks.
    "gradle.reuseTerminals": "task",
  
    // Show stopped daemons in the Gradle Daemons view
    "gradle.showStoppedDaemons": false,
  
    // Whether to use build server to synchronize Gradle project. It will replace the original Buildship to import the Gradle when enabled.
    "java.gradle.buildServer.enabled": "on",
  
    // Controls when the build output should open.
    //  - neverOpen: Never automatically open build output.
    //  - openOnBuildStart: Open the build output when the build starts.
    //  - openOnBuildFailure: Open the build output when the build fails.
    "java.gradle.buildServer.openBuildOutput": "openOnBuildFailure"
  
  },
  {
    // Minimum level of debugger logs that are sent to VS Code.
    "java.debug.logLevel": "warn",
  
    // The specified console to launch Java program. If you want to customize the console for a specific debug session, please modify the 'console' config in launch.json.
    //  - internalConsole: VS Code debug console (input stream not supported).
    //  - integratedTerminal: VS Code integrated terminal.
    //  - externalTerminal: External terminal that can be configured in user settings.
    "java.debug.settings.console": "integratedTerminal",
  
    // [Experimental]: Enable debugging support on the decompiled source code. Be aware that this feature may affect the loading speed of Call Stack Viewlet.
    "java.debug.settings.debugSupportOnDecompiledSource": "on",
  
    // Enable the run and debug code lens providers over main methods.
    "java.debug.settings.enableRunDebugCodeLens": true,
  
    // Specifies the allowed locations where the exception breakpoint can break on. Wildcard is supported, e.g. java.*, *.Foo
    "java.debug.settings.exceptionBreakpoint.allowClasses": [],
  
    // Specifies a set of exception types you want to break on, e.g. java.lang.NullPointerException. A specific exception type and its subclasses can be selected for caught exceptions, uncaught exceptions, or both can be selected.
    "java.debug.settings.exceptionBreakpoint.exceptionTypes": [],
  
    // Skip the specified classes when breaking on exception. You could use the built-in variables such as '$JDK' and '$Libraries' to skip a group of classes, or add a specific class name expression, e.g. java.*, *.Foo
    "java.debug.settings.exceptionBreakpoint.skipClasses": [],
  
    // Force building the workspace before launching java program.
    "java.debug.settings.forceBuildBeforeLaunch": true,
  
    // Reload the changed Java classes during debugging.
    "java.debug.settings.hotCodeReplace": "manual",
  
    // Experimental: Controls whether the debugger is allowed to send JDWP commands asynchronously. Async mode can improve remote debugging response speed on high-latency networks.
    "java.debug.settings.jdwp.async": "auto",
  
    // The maximum number of variables or fields that can be requested in one JDWP request. The higher the value, the less frequently debuggee will be requested when expanding the variable view. Also a large number can cause JDWP request timeout.
    "java.debug.settings.jdwp.limitOfVariablesPerJdwpRequest": 100,
  
    // The timeout (ms) of JDWP request when the debugger communicates with the target JVM.
    "java.debug.settings.jdwp.requestTimeout": 3000,
  
    // The maximum length of strings displayed in "Variables" or "Debug Console" viewlet, strings longer than this length will be trimmed, if 0 no trim is performed.
    "java.debug.settings.maxStringLength": 0,
  
    // The precision when formatting doubles in "Variables" or "Debug Console" viewlet.
    "java.debug.settings.numericPrecision": 0,
  
    // Force to proceed when build fails
    "java.debug.settings.onBuildFailureProceed": false,
  
    // Show numbers in hex format in "Variables" viewlet.
    "java.debug.settings.showHex": false,
  
    // Show the logical structure for the Collection and Map classes in "Variables" viewlet.
    "java.debug.settings.showLogicalStructure": true,
  
    // Show fully qualified class names in "Variables" viewlet.
    "java.debug.settings.showQualifiedNames": false,
  
    // Show static variables in "Variables" viewlet.
    "java.debug.settings.showStaticVariables": false,
  
    // Show 'toString()' value for all classes that override 'toString' method in "Variables" viewlet.
    "java.debug.settings.showToString": true,
  
    // Skip the specified classes when stepping. You could use the built-in variables such as '$JDK' and '$Libraries' to skip a group of classes, or add a specific class name expression, e.g. java.*, *.Foo
    "java.debug.settings.stepping.skipClasses": [],
  
    // Skip constructor methods when stepping.
    "java.debug.settings.stepping.skipConstructors": false,
  
    // Skip static initializer methods when stepping.
    "java.debug.settings.stepping.skipStaticInitializers": false,
  
    // Skip synthetic methods when stepping.
    "java.debug.settings.stepping.skipSynthetics": false,
  
    // The default VM arguments to launch the Java program. Eg. Use '-Xmx1G -ea' to increase the heap size to 1GB and enable assertions. If you want to customize the VM arguments for a specific debug session, please modify the 'vmArgs' config in launch.json.
    "java.debug.settings.vmArgs": "",
  
    // Controls whether notifications can be used to report progress. If true, use status bar to report progress instead.
    "java.silentNotification": false
  
  },
  {
    // Synchronize Java Projects explorer with changes
    "java.dependency.autoRefresh": true,
  
    // Package presentation mode: flat or hierarchical
    "java.dependency.packagePresentation": "flat",
  
    // The delay time (ms) the auto refresh is invoked when changes are detected
    "java.dependency.refreshDelay": 2000,
  
    // Show the members in the explorer
    "java.dependency.showMembers": false,
  
    // Link Java Projects Explorer with the active editor
    "java.dependency.syncWithFolderExplorer": true,
  
    // When enabled, the explorer shows non-Java resources.
    "java.project.explorer.showNonJavaResources": true,
  
    // The output path of the exported jar. Leave it empty if you want to manually pick the output location.
    "java.project.exportJar.targetPath": "${workspaceFolder}/${workspaceFolderBasename}.jar"
  
  },
  {
    // Whether to send back detailed information from error logs for diagnostic purpose.
    "java.help.collectErrorLog": false,
  
    // Sets the default view which is presented during the first use.
    //  - auto: Automatically pick the first experience view
    //  - overview: Present the Java Overview page
    //  - gettingStarted: Present the Java Beginner Tips page
    //  - welcome: Present the Java Help Center page
    //  - none: Do not show any view
    "java.help.firstView": "auto",
  
    // Show release notes of Extension Pack for Java on startup.
    "java.help.showReleaseNotes": true
  
  },
  {
    // Specify the configurations for running the tests.
    "java.test.config": {},
  
    // Specify the name of the default test configuration.
    "java.test.defaultConfig": ""
  
  },
  {
    // Specify whether to show diagnostics for conflict dependencies.
    "maven.dependency.enableConflictDiagnostics": "true",
  
    // Specifies file path pattern of folders to exclude while searching for Maven projects.
    "maven.excludedFolders": [
      "**/.*",
      "**/node_modules",
      "**/target",
      "**/bin",
      "**/archetype-resources"
    ],
  
    // Specifies default options for all mvn commands.
    "maven.executable.options": "",
  
    // Specifies absolute path of your 'mvn' executable. When this value is empty, it tries using 'mvn' or 'mvnw' according to the value of 'maven.executable.preferMavenWrapper'.
    "maven.executable.path": "",
  
    // Specifies whether you prefer to use Maven wrapper. If true, it tries using 'mvnw' by walking up the parent folders. If false, or 'mvnw' is not found, it tries 'mvn' in PATH instead.
    "maven.executable.preferMavenWrapper": "true",
  
    // Format of project node name shown in Maven explorer.
    "maven.explorer.projectName": "${project.name}",
  
    // Specifies whether to update effective-pom automatically whenever changes detected.
    "maven.pomfile.autoUpdateEffectivePOM": false,
  
    // Specifies the glob pattern used to look for pom.xml files.
    "maven.pomfile.globPattern": "**/pom.xml",
  
    // Specifies whether to prefetch effective pom on startup.
    "maven.pomfile.prefetchEffectivePom": false,
  
    // Default method of opening newly created project.
    "maven.projectOpenBehavior": "Interactive",
  
    // Specifies the absolute path of your maven configuration file, the default value is ~/.m2/settings.xml
    "maven.settingsFile": null,
  
    // If this value is true, add a command to create Maven Projects in the Explorer context menu for folders.
    "maven.showInExplorerContextMenu": "true",
  
    // Specifies an array of environment variable names and values. These environment variable values will be added to the terminal session before Maven is first executed.
    "maven.terminal.customEnv": [],
  
    // Specify pre-defined favorite commands to execute.
    "maven.terminal.favorites": [],
  
    // If this value is true, and if the setting java.home has a value, then the environment variable JAVA_HOME will be set to the value of java.home when a new terminal window is created.
    "maven.terminal.useJavaHome": false,
  
    // Specifies the way of viewing Maven projects.
    "maven.view": "flat"
  
  },
  {
    // Specifies whether to show gutter icon in editors.
    //  - on: Enable
    //  - off: Disable
    "spring.dashboard.enableGutter": "on",
  
    // Defines which URL is opened when opening Spring Boot apps. Uses {protocol}, {hostname}, {port} and {contextPath} as placeholders.
    "spring.dashboard.openUrl": "{protocol}://{hostname}:{port}{contextPath}",
  
    // Defines which browser to use when opening Spring Boot apps.
    //  - integrated: VS Code's integrated browser
    //  - external: External default browser
    "spring.dashboard.openWith": "integrated"
  
  },
  {
    // Default value for Artifact Id.
    "spring.initializr.defaultArtifactId": "demo",
  
    // Default value for Group Id.
    "spring.initializr.defaultGroupId": "com.example",
  
    // Default Java version.
    "spring.initializr.defaultJavaVersion": "",
  
    // Default language.
    "spring.initializr.defaultLanguage": "",
  
    // Default method of opening newly generated project
    "spring.initializr.defaultOpenProjectMethod": "",
  
    // Default packaging.
    "spring.initializr.defaultPackaging": "",
  
    // Controls if a new sub-folder should be created for the newly generated project.
    //  - artifactId: Place project in a folder named after Artifact Id
    //  - none: Do not create a folder for the project
    "spring.initializr.parentFolder": "artifactId",
  
    // Spring Initializr Service URL(s). If more than one url is specified, it requires you to select one every time you create a project.
    "spring.initializr.serviceUrl": [
      "https://start.spring.io"
    ]
  
  },
  {
    // Save absolute path in local-history.path
    "local-history.absolute": false,
  
    // Specify locale to use when displaying date
    "local-history.dateLocale": "",
  
    // A day number to purge local history. (0: no purge)
    "local-history.daysLimit": 30,
  
    // Is save in local history enabled (Never=0, Always=1, Limited to workspaceFolder=2)
    "local-history.enabled": 1,
  
    // Files or folder to not save
    "local-history.exclude": [
      "**/.history/**",
      "**/.vscode/**",
      "**/node_modules/**",
      "**/typings/**",
      "**/out/**",
      "**/Code/User/**"
    ],
  
    // A max files to display
    "local-history.maxDisplay": 10,
  
    // Specify a location for .history folder (null: use workspaceFolder)
    "local-history.path": "",
  
    // Controls the delay in seconds after which local-history is saved. To avoid too many history files.
    "local-history.saveDelay": 0,
  
    // Specify a location for tree view: explorer or localHistory
    "local-history.treeLocation": "explorer"
  
  },
  {
    // Use `**` or `__` to wrap bold text.
    "markdown.extension.bold.indicator": "**",
  
    // Whether to enable auto-completion.
    "markdown.extension.completion.enabled": false,
  
    // Whether to exclude files from auto-completion using VS Code's `search.exclude` setting. (`node_modules`, `bower_components` and `*.code-search` are **always excluded**, not affected by this option.)
    "markdown.extension.completion.respectVscodeSearchExclude": true,
  
    // The root folder for path auto-completion.
    "markdown.extension.completion.root": "",
  
    // List of extra supported languages (e.g., rmd, quarto), default [].
    "markdown.extension.extraLangIds": [],
  
    // Use `*` or `_` to wrap italic text.
    "markdown.extension.italic.indicator": "*",
  
    // User-defined KaTeX macros.
    "markdown.extension.katex.macros": {},
  
    // List indentation scheme. (Also affects TOC generation.)
    // 
    // Whether to use different indentation sizes on different list contexts or stick to VS Code's tab size.
    //  - adaptive: Adaptive indentation size according to the context, trying to **left align the sublist with its parent's content**. For example:
    // 
    // ```markdown
    // - Parent
    //   - Sublist
    // 
    // 1. Parent
    //    1. Sublist
    // 
    // 10. Parent with longer marker
    //     1. Sublist
    // ```
    //  - inherit: Use the configured tab size of the current document (see the status bar). For example (with `tabSize: 4`):
    // 
    // ```markdown
    // - Parent
    //     - Sublist
    // 
    // 1. Parent
    //     1. Sublist
    // 
    // 10. Parent with longer marker
    //     1. Sublist
    // ```
    "markdown.extension.list.indentationSize": "adaptive",
  
    // List candidate markers. It will cycle through those markers
    "markdown.extension.list.toggle.candidate-markers": [
      "-",
      "*",
      "+",
      "1.",
      "1)"
    ],
  
    // Enable basic math support (Powered by KaTeX).
    "markdown.extension.math.enabled": true,
  
    // Auto fix ordered list markers.
    "markdown.extension.orderedList.autoRenumber": true,
  
    // Ordered list marker.
    //  - one: Always use `1.` as ordered list marker.
    //  - ordered: Use increasing numbers as ordered list marker.
    "markdown.extension.orderedList.marker": "ordered",
  
    // Auto show preview to side.
    "markdown.extension.preview.autoShowPreviewToSide": false,
  
    // Convert image path to absolute path.
    "markdown.extension.print.absoluteImgPath": true,
  
    // Convert images to base64 when printing to HTML.
    "markdown.extension.print.imgToBase64": false,
  
    // Include VS Code's basic Markdown styles so that the exported HTML looks similar as inside VS Code.
    "markdown.extension.print.includeVscodeStylesheets": true,
  
    // Print current document to HTML when file is saved.
    "markdown.extension.print.onFileSave": false,
  
    // Print current document to pure HTML (without any stylesheets).
    "markdown.extension.print.pureHtml": false,
  
    // Theme of the exported HTML. Only affects code blocks.
    "markdown.extension.print.theme": "light",
  
    // Enable/disable URL validation when printing.
    "markdown.extension.print.validateUrls": true,
  
    // Show buttons (e.g. toggle bold, italic) on the editor toolbar.
    // 
    "markdown.extension.showActionButtons": false,
  
    // If a file is larger than this size (in byte/B), we won't attempt to render syntax decorations.
    "markdown.extension.syntax.decorationFileSizeLimit": 50000,
  
    // (**Deprecated**) Use `markdown.extension.theming.decoration.renderCodeSpan` instead. See <https://github.com/yzhang-gh/vscode-markdown/issues/888> for details.
    // 
    "markdown.extension.syntax.decorations": null,
  
    // (**Experimental**) Report issue at <https://github.com/yzhang-gh/vscode-markdown/issues/185>.
    "markdown.extension.syntax.plainTheme": false,
  
    // Don't add padding to the delimiter row.
    "markdown.extension.tableFormatter.delimiterRowNoPadding": false,
  
    // Enable [GitHub Flavored Markdown](https://github.github.com/gfm/) table formatter.
    "markdown.extension.tableFormatter.enabled": true,
  
    // Normalize table indentation to closest multiple of configured editor tab size.
    "markdown.extension.tableFormatter.normalizeIndentation": false,
  
    // Apply a border around a [code span](https://spec.commonmark.org/0.29/#code-spans).
    "markdown.extension.theming.decoration.renderCodeSpan": true,
  
    // (**Experimental**)
    "markdown.extension.theming.decoration.renderHardLineBreak": false,
  
    // (**Experimental**)
    "markdown.extension.theming.decoration.renderLink": false,
  
    // (**Experimental**)
    "markdown.extension.theming.decoration.renderParagraph": false,
  
    // Show a line through the middle of a [strikethrough](https://github.github.com/gfm/#strikethrough-extension-).
    "markdown.extension.theming.decoration.renderStrikethrough": true,
  
    // Shade the background of trailing space (U+0020) characters on a [line](https://spec.commonmark.org/0.29/#line).
    "markdown.extension.theming.decoration.renderTrailingSpace": false,
  
    // Range of levels for table of contents. Use `x..y` for level `x` to `y`.
    "markdown.extension.toc.levels": "1..6",
  
    // Lists of headings to omit by project file.
    // Example:
    // { "README.md": ["# Introduction"] }
    "markdown.extension.toc.omittedFromToc": {},
  
    // Use ordered list, that is:
    // 1. ...
    // 2. ...
    "markdown.extension.toc.orderedList": false,
  
    // Just plain text TOC, no links.
    "markdown.extension.toc.plaintext": false,
  
    // The method to generate heading ID. This affects **links to headings** in **TOC**, **code completion**, and **printing**.
    //  - github: GitHub
    //  - azureDevops: Azure DevOps
    //  - bitbucket-cloud: Bitbucket Cloud
    //  - gitea: Gitea
    //  - gitlab: GitLab
    //  - vscode: Visual Studio Code
    "markdown.extension.toc.slugifyMode": "github",
  
    // Use `-`, `*`, or `+` in the table of contents (for **unordered** list).
    "markdown.extension.toc.unorderedList.marker": "-",
  
    // Auto update TOC on save.
    "markdown.extension.toc.updateOnSave": true
  
  },
  {
    // 
    "markdown-editor.customCss": "",
  
    // Save images to which folder when upload in markdown, default relative to the markdown file, you can set to project root via `${projectRoot}/assets`.
    "markdown-editor.imageSaveFolder": "assets",
  
    // Use vscode theme's background color as the markdown editor's background color.
    "markdown-editor.useVscodeThemeColor": true
  
  },
  {
    // Json for Visual Studio Code
    "JSON-zain.author.ZainChen": "Welcome to vscode-json.",
  
    // Whether to update the menu in real time based on the contents of the json file!
    "JSON-zain.json.autorefresh": false
  
  },
  {
    // Toggle bold on some scopes
    "oneDarkPro.bold": false,
  
    // Code highlight color, read more [docs](https://binaryify.github.io/OneDark-Pro/#/?id=highlight-color-custom)
    "oneDarkPro.color": {
      "chalky": "",
      "coral": "",
      "dark": "",
      "error": "",
      "fountainBlue": "",
      "green": "",
      "invalid": "",
      "lightDark": "",
      "lightWhite": "",
      "malibu": "",
      "purple": "",
      "whiskey": "",
      "deepRed": ""
    },
  
    // Switch to different editor theme
    "oneDarkPro.editorTheme": "One Dark Pro",
  
    // Toggle italics on some scopes
    "oneDarkPro.italic": true,
  
    // Toggle Markdown style
    "oneDarkPro.markdownStyle": true,
  
    // Toggle vivid colors
    "oneDarkPro.vivid": false
  
  },
  {
    // If enabled, web url will always point to default branch instead of local commit SHA or local branch
    "openInGitHub.alwaysOpenInDefaultBranch": false,
  
    // Configure a custom blob path to connect git path and file path
    "openInGitHub.customBlobPath": "+",
  
    // Configure a custom line number prefix
    "openInGitHub.customLinePrefix": "#",
  
    // Configure a custom path to the git repo your project is hosted
    "openInGitHub.customProviderPath": "https://git-repo-domain:git-path/custom-path/",
  
    // Specify the default destination branch for pull requests
    "openInGitHub.defaultPullRequestBranch": "integration",
  
    // Configure a custom Gitea domain
    "openInGitHub.giteaDomain": "gitea.io",
  
    // Configure a custom GitHub domain. Useful for GitHub Enterprise
    "openInGitHub.gitHubDomain": "github.com",
  
    // Specify the provider protocol for custom sites or GitHub Enterprise
    "openInGitHub.providerProtocol": "https",
  
    // Specify the provider type in Custom Site
    "openInGitHub.providerType": "unknown",
  
    // If enabled, the copied or opened URL won't include line number(s) unless there's an active selection
    "openInGitHub.requireSelectionForLines": false,
  
    // If enabled, use commit SHA instead of branch
    "openInGitHub.useCommitSHAInURL": false
  
  }]